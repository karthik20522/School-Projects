<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GeoFramework</name>
    </assembly>
    <members>
        <member name="T:GeoFramework.Licensing.BetaLicense">
            <summary>
            Represents a license used to authorize assemblies during a beta testing
            period.
            </summary>
            <remarks>
            GeoFrameworks, LLC releases several beta versions of assemblies in order to work
            with the development community as close as possible for improvements. During beta
            periods, licensing is disabled in order to give developers the greatest flexibility
            during testing. A <strong>BetaLicense</strong> object will be returned for all license
            checks until the beta period expires, after which the assembly will no longer
            function.
            </remarks>
        </member>
        <member name="T:GeoFramework.Licensing.GeoFrameworksLicense">
            <summary>Represents a license used to authorize use of GeoFrameworks assemblies.</summary>
            <remarks>
            GeoFrameworks, LLC uses the built-in licensing features of the .NET framework to
            control access to its assemblies. This class gives information about licenses which
            have been granted for any GeoFrameworks assembly.
            </remarks>
        </member>
        <member name="P:GeoFramework.Licensing.GeoFrameworksLicense.Context">
            <summary>Indicates the environment for which the license is valid.</summary>
            <value>
            A <strong>LicenseContext</strong> object indicating whther the license is valid
            for design-time or run-time environments.
            </value>
            <remarks>
            The behavior of licenses changes depending on whether assemblies are being used
            in a design-time versus run-time environment. In general, design-time licenses are
            always granted (even if a license has expired) in order to let developers open Windows
            Forms containing GeoFrameworks user controls. The run-time environment is enforced more
            strictly.
            </remarks>
        </member>
        <member name="P:GeoFramework.Licensing.GeoFrameworksLicense.LicensedType">
            <summary>Indicates the class for which a license has been granted.</summary>
            <value>A <strong>Type</strong> describing the class which has been authorized.</value>
            <remarks>
            This property is used to indicate which specific class has been authorized for
            creation.
            </remarks>
        </member>
        <member name="P:GeoFramework.Licensing.GeoFrameworksLicense.IsTrialLicense">
            <summary>Indicates if the license is only valid during a trial period.</summary>
            <value>
            A <strong>Boolean</strong>, <strong>True</strong> if the license is valid only
            during trial periods.
            </value>
            <remarks>
            Trial licenses are granted if no other licenses are found, and the assembly is
            not in a beta testing period.
            </remarks>
        </member>
        <member name="P:GeoFramework.Licensing.GeoFrameworksLicense.LicenseExpirationDate">
            <summary>
            Indicates the expiration date of the license during trial or subscription
            periods.
            </summary>
            <value>
            A <strong>DateTime</strong> structure indicating the license expiration
            date.
            </value>
            <remarks>
            This property is valid for trial or subscription licenses only. For trial
            licenses, this property indicates the date at which the trial period will expire, after
            which the assembly will stop functioning. For subscription licenses, this property
            indicates the last date that free upgrades are allowed. If a subscription expiration
            date is reached, the license is still valid for production use.
            </remarks>
        </member>
        <member name="P:GeoFramework.Licensing.GeoFrameworksLicense.LicenseTimeRemaining">
            <summary>Indicates the amount of time remaining for trial or subscription periods.</summary>
            <value>
            A <strong>TimeSpan</strong> indicating the remaining time of a trial or
            subscription period.
            </value>
            <remarks>
            This property is valid for trial or subscription licenses only. For trial
            periods, this property indicates the amount of time remaining before the assembly will
            cease to function. For subscription licenses, this property indicates the amount of
            time remaining for developers to get free upgrades. If the subscription period ends,
            however, the subscription license will still be valid for production use.
            </remarks>
        </member>
        <member name="P:GeoFramework.Licensing.GeoFrameworksLicense.IsLicenseExpired">
            <summary>Indicates if the license is no longer valid.</summary>
            <value>
            A <strong>Boolean</strong>, <strong>True</strong> if the license is no longer
            valid.
            </value>
            <remarks>
            This property is used for trial or subscription licenses only. For trial
            licenses, this property indicates if a trial period has ended. For subscription
            licenses, this property indicates if free upgrades are still allowed.
            </remarks>
        </member>
        <member name="P:GeoFramework.Licensing.GeoFrameworksLicense.IsLicenseValid">
            <summary>Indicates if the data in the license is valid.</summary>
            <value>
            A <strong>Boolean</strong>, <strong>True</strong> if the information in the
            license has been validated.
            </value>
            <remarks>
            Licenses are monitored for attempts at tampering via Reflection. If tampering is
            suspected, the license becomes invalid and the activity may be reported. If the license
            is used as intended, this property always returns <strong>True</strong>.
            </remarks>
        </member>
        <member name="P:GeoFramework.Licensing.GeoFrameworksLicense.InvoiceID">
            <summary>Indicates the purchase associated with the license.</summary>
            <value>
            An <strong>Integer</strong> describing the invoice number associated with the
            license.
            </value>
            <remarks>
            During product activation, the GeoFrameworks licensing system checks a license
            key against an actual purchase to verify that the license is valid. This guards against
            programs known as "key generators" which create bogus license keys.
            </remarks>
        </member>
        <member name="P:GeoFramework.Licensing.GeoFrameworksLicense.LicensedProductID">
            <summary>Indicates the unique ID of the licensed assembly.</summary>
            <value>
            An <strong>Integer</strong> indicating the unique ID of the licensed
            product.
            </value>
            <remarks>
            GeoFrameworks assemblies are given unique product IDs in order to differentiate
            them from each other during license validation. This property is used internally and
            not useful for developers.
            </remarks>
        </member>
        <member name="P:GeoFramework.Licensing.GeoFrameworksLicense.LicensedVersion">
            <summary>Indicates the version for which the license is granted.</summary>
            <value>
            A <strong>Version</strong> object describing the major version of the licensed
            assembly.
            </value>
            <remarks>
            In order to ensure the highest product quality and developer satisfaction,
            upgrades to GeoFrameworks assemblies known as "hotfixes" are always allowed for the
            same major version. This property indicates the major version for which hotfixes are
            allowed.
            </remarks>
        </member>
        <member name="P:GeoFramework.Licensing.GeoFrameworksLicense.LicenseKey">
            <summary>Indicates the encrypted license key for the license.</summary>
            <value>A <strong>String</strong> containing the encrypted license key.</value>
            <remarks>
            License keys are used to guard against software piracy and keep prices from
            rising unnecessarily. This property returns the license key associated with the
            license.
            </remarks>
        </member>
        <member name="M:GeoFramework.Licensing.BetaLicense.ToString">
            <summary>Returns the expiration date of the beta license.</summary>
            <returns>A <strong>String</strong> indicating the beta license expiration date.</returns>
            <remarks>
            This method is used to indicate the number of days remaining in a trial
            period.
            </remarks>
        </member>
        <member name="P:GeoFramework.Licensing.BetaLicense.LicenseKey">
            <summary>
            Returns the license key used to authorize an assembly during a beta
            period.
            </summary>
            <value>A <strong>String</strong> containing the beta license key.</value>
            <remarks>
            When an assembly created by GeoFrameworks, LLC is in a beta testing phase,
            licensing enforcement features are disabled in order to give developers flexibility
            during testing.
            </remarks>
        </member>
        <member name="T:GeoFramework.Licensing.GeoFrameworksLicenseAttribute">
            <summary>
            Defines the serial number used to unlock GPS.NET for a production environment.
            </summary>
        </member>
        <member name="T:GeoFramework.Licensing.GeoFrameworksLicenseProvider">
            <summary>Provides license validation services for GeoFrameworks assemblies.</summary>
            <remarks>
            This class provides software piracy prevention services for GeoFrameworks
            assemblies. Protected classes are authorized and licenses granted based upon the
            product, code execution environment and available license keys. This class is used
            internally and is not typically used by developers except to manually retrieve and
            verify license information.
            </remarks>
        </member>
        <member name="M:GeoFramework.Licensing.GeoFrameworksLicenseProvider.IsKeyValid(System.ComponentModel.LicenseContext,System.Type,System.Object,System.String)">
            <summary>
            Indicates if the specified license key is valid for the specified
            instance.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the license key is valid for
            the specified Type, instance, and context.
            </returns>
            <remarks>
            This method can be used to manually validate a license. It is not necessary to
            perform validation manually, as this class is called automatically by the .NET
            framework. This method might be useful, however, if developers wish to verify that they
            are using the correct license keys for production environments. Creating a unit test
            which calls this method could be beneficial.
            </remarks>
            <requirements>A valid license key must be available at the time this method is called.</requirements>
            <param name="context">
            A <strong>LicenseContext</strong> object indicating whether the license is for a
            design-time or run-time environment.
            </param>
            <param name="type">The <strong>Type</strong> of the object to validate.</param>
            <param name="instance">An instance of the specified <strong>Type</strong> to validate.</param>
            <param name="licenseKey">A license key used to check against the specified parameters.</param>
        </member>
        <member name="M:GeoFramework.Licensing.GeoFrameworksLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>Attempts to return a license for the specified license key and object.</summary>
            <returns>
            A <strong>License</strong> object if the validation is successful, otherwise
            null.
            </returns>
            <remarks>
            	<para>This method is called automatically by the .NET framework to perform license
                validation for a particular type. If a beta testing period is in effect, a
                <strong>BetaLicense</strong> object will be returned. The calling assembly is
                examined for <strong>DeveloperLicenseAttribute</strong> assembly attributes. If any
                are found, they are examined to see if any of them are valid for the specified
                type. If one is found, an <strong>OwnerLicense</strong> object is returned. If no
                owner licenses are found or none are valid, a trial period is assumed. If the trial
                period is valid, a <strong>TrialLicense</strong> is returned. If all attempts to
                provide a license fail, this method throws an exception or returns null depending
                on the <strong>allowExceptions</strong> parameter.</para>
            </remarks>
            <param name="context">
            A <strong>LicenseContext</strong> object indicating whether the license is for a
            design-time or run-time environment.
            </param>
            <param name="type">The <strong>Type</strong> of the object to validate.</param>
            <param name="instance">An instance of the specified <strong>Type</strong> to validate.</param>
            <param name="allowExceptions">
            A <strong>Boolean</strong>, <strong>True</strong> if an exception should be
            thrown if validation fails.
            </param>
        </member>
        <member name="T:GeoFramework.Licensing.OwnerLicense">
            <summary>Represents a license valid for unrestricted use of an assembly.</summary>
            <remarks>
            This type of license is granted when developers specify a valid license key via
            the <see cref="T:GeoFramework.Licensing.GeoFrameworksLicenseAttribute">GeoFrameworksLicenseAttribute</see>
            assembly attribute, or, for Compact Framework 1.0, for license keys specified via the
            <strong>RegisterLicense</strong> method of the <strong>LicenseManager</strong> class. If the
            assembly is a beta version, a <strong>BetaLicense</strong> will be returned instead of
            an <strong>OwnerLicense</strong> even if a valid key exists.
            </remarks>
        </member>
        <member name="T:GeoFramework.Licensing.TrialForm">
            <summary>
            Summary description for LicensingForm.
            </summary>
        </member>
        <member name="M:GeoFramework.Licensing.TrialForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:GeoFramework.Licensing.TrialForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GeoFramework.Licensing.TrialLicense">
            <summary>Represents a license used for the purpose of evaluating a product.</summary>
            <remarks>
            	<para>GeoFrameworks, LLC allows developers the ability to try any of its products
                for several weeks before making any decision to purchase. Trial periods are
                attractive for both developers and vendors because developers can be certain that a
                product will meet their needs, and vendors are not faced with dissatisfied
                customers who spend money only to discover that a product doesn't meet their
                needs.</para>
            	<para>Trial licenses are granted in any situation where a product is not in a beta
                testing period, and no license keys have been specified. If the trial license is
                created for the first time, a trial period of several weeks (typically 30-60 days)
                is started, after which the assembly will stop functioning. Developers may also
                make special requests to extend their trial periods one time if they enter into a
                trial period but get distracted and don't get an opportunity to actually try the
                software out.</para>
            	<para>An Internet connection is required in order to activate a trial period on the
                development machine. Requests for trial licenses are made via port 80 to a web
                service on the GeoFrameworks web server.</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.Licensing.TrialLicense.DeleteTrialRegistryKeys">
            <summary>
            Removes license key information from the registry.
            </summary>
            <remarks>
            	<para>This method is used in special situations where trial license keys have
                become corrupt or were inadvertantly modified in the registry. Registry keys cannot
                be deleted in order to restart a trial period. If keys are deleted, the
                GeoFramework licensing system will re-request the same trial license via the
                Internet.</para>
            	<para>If you wish to extend your trial period, simply contact the GeoFrameworks
                Tech Support Team at
                <a href="mailto:support@geoframeworks.com">support@geoframeworks.com</a> and
                explain your situation. In most cases we are happy to grant you a 30-day extention
                to your trial period.</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.Licensing.TrialLicense.ToString">
            <summary>Outputs the amount of time remaining in the trial.</summary>
            <returns>
            A <strong>String</strong> describing the amount of time remaining in the trial
            period.
            </returns>
        </member>
        <member name="P:GeoFramework.Licensing.TrialLicense.LicenseBeginDate">
            <summary>Indicates the date on which the trial license was granted.</summary>
            <remarks>
            When a trial license is needed, a call to a Web Service is made via the Internet.
            When a license key is granted, it is fused with a timestamp in order to remember when
            the trial period started. This property is typically used by developers as a reminder
            of how much time is remaining.
            </remarks>
        </member>
        <member name="P:GeoFramework.Licensing.TrialLicense.LicenseTimeElapsed">
            <summary>Indicates the amount of time that has been used of a trial period.</summary>
            <remarks>
            This property is used to determine how much time of a trial period has been
            used.
            </remarks>
            <value>
            A <strong>TimeSpan</strong> indicating the amount of time elapsed of the trial
            period.
            </value>
        </member>
        <member name="T:GeoFramework.AngleConverter">
            <summary>
            Provides functionality to converting values to and from <strong>Angle</strong>
            objects.
            </summary>
            <remarks>
            	<para>This class allows any <strong>Angle</strong> object to be converted between
                other data types, such as <strong>Double</strong>, <strong>Integer</strong> and
                <strong>String</strong>. This class is used primarily during the Windows Forms
                designer to give detailed information about properties of type
                <strong>Angle</strong>, and also allows developers to type in string values such as
                "1.50" and have them converted to <strong>Angle</strong> objects automatically.
                Finally, this class controls design-time serialization of <strong>Angle</strong>
                object properties.</para>
            	<para>In most situations this class is used by the Visual Studio.NET IDE and is
                rarely created at run-time.</para>
            </remarks>
        </member>
        <member name="T:GeoFramework.AreaConverter">
            <summary>
            Provides functionality to convert string values to and from Area objects at design time.
            </summary>
        </member>
        <member name="T:GeoFramework.AzimuthConverter">
            <summary>
            Provides functionality to converting values to and from <strong>Azimuth</strong>
            objects.
            </summary>
            <remarks>
            	<para>This class allows any <strong>Azimuth</strong> object to be converted between
                other data types, such as <strong>Double</strong>, <strong>Integer</strong> and
                <strong>String</strong>. This class is used primarily during the Windows Forms
                designer to give detailed information about properties of type
                <strong>Azimuth</strong>, and also allows developers to type in string values such
                as "NNW" and have them converted to <strong>Azimuth</strong> objects automatically.
                Finally, this class controls design-time serialization of <strong>Azimuth</strong>
                object properties.</para>
            	<para>In most situations this class is used by the Visual Studio.NET IDE and is
                rarely created at run-time.</para>
            </remarks>
        </member>
        <member name="T:GeoFramework.DistanceConverter">
            <summary>
            Provides functionality to converting values to and from <strong>Distance</strong>
            objects.
            </summary>
            <remarks>
            	<para>This class allows any <strong>Distance</strong> object to be converted
                between other data types, such as <strong>String</strong>. This class is used
                primarily during the Windows Forms designer to give detailed information about
                properties of type <strong>Distance</strong>, and also allows developers to type in
                string values such as "2 miles" and have them converted to
                <strong>Distance</strong> objects automatically. Finally, this class controls
                design-time serialization of <strong>Distance</strong> object properties.</para>
            	<para>In most situations this class is used by the Visual Studio.NET IDE and is
                rarely created at run-time.</para>
            </remarks>
        </member>
        <member name="T:GeoFramework.ElevationConverter">
            <summary>
            Provides functionality to converting values to and from
            <strong>Elevation</strong> objects.
            </summary>
            <remarks>
            	<para>This class allows any <strong>Elevation</strong> object to be converted
                between other data types, such as <strong>Double</strong>, <strong>Integer</strong>
                and <strong>String</strong>. This class is used primarily during the Windows Forms
                designer to give detailed information about properties of type
                <strong>Elevation</strong>, and also allows developers to type in string values
                such as "45" and have them converted to <strong>Elevation</strong> objects
                automatically. Finally, this class controls design-time serialization of
                <strong>Elevation</strong> object properties.</para>
            	<para>In most situations this class is used by the Visual Studio.NET IDE and is
                rarely created at run-time.</para>
            </remarks>
        </member>
        <member name="T:GeoFramework.GeographicRectangleConverter">
            <summary>
            Provides functionality to converting values to and from
            <strong>GeographicRectangle</strong> objects.
            </summary>
            <remarks>
            	<para>This class allows any <strong>GeographicRectangle</strong> object to be
                converted between other data types, such as <strong>String</strong>. This class is
                used primarily during the Windows Forms designer to give detailed information about
                properties of type <strong>GeographicRectangle</strong>, and also allows developers
                to type in string values such as "1,2,10,10" and have them converted to
                <strong>GeographicRectangle</strong> objects automatically. Finally, this class
                controls design-time serialization of <strong>GeographicRectangle</strong> object
                properties.</para>
            	<para>In most situations this class is used by the Visual Studio.NET IDE and is
                rarely created at run-time.</para>
            </remarks>
        </member>
        <member name="T:GeoFramework.GeographicSizeConverter">
            <summary>
            Provides functionality to converting values to and from
            <strong>GeographicSize</strong> objects.
            </summary>
            <remarks>
            	<para>This class allows any <strong>GeographicSize</strong> object to be converted
                between other data types, such as <strong>String</strong>. This class is used
                primarily during the Windows Forms designer to give detailed information about
                properties of type <strong>GeographicSize</strong>, and also allows developers to
                type in string values such as "1,2" and have them converted to
                <strong>GeographicSize</strong> objects automatically. Finally, this class controls
                design-time serialization of <strong>GeographicSize</strong> object
                properties.</para>
            	<para>In most situations this class is used by the Visual Studio.NET IDE and is
                rarely created at run-time.</para>
            </remarks>
        </member>
        <member name="T:GeoFramework.LatitudeConverter">
            <summary>
            Provides functionality to convert string values to and from Latitude objects at design time.
            </summary>
            <remarks>
            	<para>This class allows any <strong>Latitude</strong> object to be converted
                between other data types, such as <strong>Double</strong>, <strong>Integer</strong>
                and <strong>String</strong>. This class is used primarily during the Windows Forms
                designer to give detailed information about properties of type
                <strong>Latitude</strong>, and also allows developers to type in string values such
                as "12N" (for 12° North) and have them converted to <strong>Latitude</strong>
                objects automatically. Finally, this class controls design-time serialization of
                <strong>Latitude</strong> object properties.</para>
            	<para>In most situations this class is used by the Visual Studio.NET IDE and is
                rarely created at run-time.</para>
            </remarks>
        </member>
        <member name="T:GeoFramework.LongitudeConverter">
            <summary>
            Provides functionality to convert string values to and from Longitude objects at design time.
            </summary>
            <remarks>
            	<para>This class allows any <strong>Longitude</strong> object to be converted
                between other data types, such as <strong>Double</strong>, <strong>Integer</strong>
                and <strong>String</strong>. This class is used primarily during the Windows Forms
                designer to give detailed information about properties of type
                <strong>Longitude</strong>, and also allows developers to type in string values
                such as "54E" (for 54° East) and have them converted to <strong>Longitude</strong>
                objects automatically. Finally, this class controls design-time serialization of
                <strong>Longitude</strong> object properties.</para>
            	<para>In most situations this class is used by the Visual Studio.NET IDE and is
                rarely created at run-time.</para>
            </remarks>
        </member>
        <member name="T:GeoFramework.PointDConverter">
            <summary>
            Provides functionality to converting values to and from <strong>PointD</strong>
            objects.
            </summary>
            <remarks>
            	<para>This class allows any <strong>PointD</strong> object to be converted between
                other data types, such as <strong>String</strong>. This class is used primarily
                during the Windows Forms designer to give detailed information about properties of
                type <strong>PointD</strong>, and also allows developers to type in string values
                such as "10.123, 20.123" and have them converted to <strong>PointD</strong> objects
                automatically. Finally, this class controls design-time serialization of
                <strong>PointD</strong> object properties.</para>
            	<para>In most situations this class is used by the Visual Studio.NET IDE and is
                rarely created at run-time.</para>
            </remarks>
        </member>
        <member name="T:GeoFramework.PolarCoordinateConverter">
            <summary>
            Provides functionality to converting values to and from
            <strong>PolarCoordinate</strong> objects.
            </summary>
            <remarks>
            	<para>This class allows any <strong>PolarCoordinate</strong> object to be converted
                between other data types, such as <strong>String</strong>. This class is used
                primarily during the Windows Forms designer to give detailed information about
                properties of type <strong>PolarCoordinate</strong>, and also allows developers to
                type in string values such as "2,80" and have them converted to
                <strong>PolarCoordinate</strong> objects automatically. Finally, this class
                controls design-time serialization of <strong>PolarCoordinate</strong> object
                properties.</para>
            	<para>In most situations this class is used by the Visual Studio.NET IDE and is
                rarely created at run-time.</para>
            </remarks>
        </member>
        <member name="T:GeoFramework.PositionConverter">
            <summary>
            Provides functionality to converting values to and from <strong>Position</strong>
            objects.
            </summary>
            <remarks>
            	<para>This class allows any <strong>Position</strong> object to be converted
                between other data types, such as <strong>String</strong>. This class is used
                primarily during the Windows Forms designer to give detailed information about
                properties of type <strong>Position</strong>, and also allows developers to type in
                string values such as "29N,42W" (for 29°North by 42°West) and have them converted
                to <strong>Position</strong> objects automatically. Finally, this class controls
                design-time serialization of <strong>Position</strong> object properties. UTM
                coordinates such as "13S 12345E 12345N" are also accepted.</para>
            	<para>In most situations this class is used by the Visual Studio.NET IDE and is
                rarely created at run-time.</para>
            </remarks>
        </member>
        <member name="T:GeoFramework.RectangleDConverter">
            <summary>
            Provides functionality to converting values to and from
            <strong>RectangleD</strong> objects.
            </summary>
            <remarks>
            	<para>This class allows any <strong>RectangleD</strong> object to be converted
                between other data types, such as <strong>String</strong>. This class is used
                primarily during the Windows Forms designer to give detailed information about
                properties of type <strong>RectangleD</strong>, and also allows developers to type
                in string values such as "1.5,2.5,4.5,7.8" and have them converted to
                <strong>RectangleD</strong> objects automatically. Finally, this class controls
                design-time serialization of <strong>RectangleD</strong> object properties.</para>
            	<para>In most situations this class is used by the Visual Studio.NET IDE and is
                rarely created at run-time.</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.RectangleDConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns of an object can be converted into a <strong>Speed</strong>
            object.
            </summary>
            <param name="sourceType">
            The source type to be converted, typically a <strong>String</strong> or
            <strong>InstanceDescriptor</strong> object.
            </param>
        </member>
        <member name="T:GeoFramework.SizeDConverter">
            <summary>
            Provides functionality to converting values to and from <strong>SizeD</strong>
            objects.
            </summary>
            <remarks>
            	<para>This class allows any <strong>Position</strong> object to be converted
                between other data types, such as <strong>String</strong>. This class is used
                primarily during the Windows Forms designer to give detailed information about
                properties of type <strong>Position</strong>, and also allows developers to type in
                string values such as "29.23,15.65" and have them converted to
                <strong>Position</strong> objects automatically. Finally, this class controls
                design-time serialization of <strong>Position</strong> object properties.</para>
            	<para>In most situations this class is used by the Visual Studio.NET IDE and is
                rarely created at run-time.</para>
            </remarks>
        </member>
        <member name="T:GeoFramework.SpeedConverter">
            <summary>
            Provides functionality to converting values to and from <strong>Speed</strong>
            objects.
            </summary>
            <remarks>
            	<para>This class allows any <strong>Speed</strong> object to be converted between
                other data types, such as <strong>String</strong>. This class is used primarily
                during the Windows Forms designer to give detailed information about properties of
                type <strong>Speed</strong>, and also allows developers to type in string values
                such as "120 km/h" and have them converted to <strong>Speed</strong> objects
                automatically. Finally, this class controls design-time serialization of
                <strong>Speed</strong> object properties.</para>
            	<para>In most situations this class is used by the Visual Studio.NET IDE and is
                rarely created at run-time.</para>
            </remarks>
        </member>
        <member name="T:GeoFramework.Licensing.LicenseAuthorizer">
            <remarks/>
        </member>
        <member name="M:GeoFramework.Licensing.LicenseAuthorizer.#ctor">
            <remarks/>
        </member>
        <member name="M:GeoFramework.Licensing.LicenseAuthorizer.RequestTrialLicense(System.Int32,System.Int32,System.Int64)">
            <remarks/>
        </member>
        <member name="M:GeoFramework.Licensing.LicenseAuthorizer.BeginRequestTrialLicense(System.Int32,System.Int32,System.Int64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:GeoFramework.Licensing.LicenseAuthorizer.EndRequestTrialLicense(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:GeoFramework.Licensing.LicenseAuthorizer.ExtendTrialLicense(System.Int32,System.Int32,System.Int64)">
            <remarks/>
        </member>
        <member name="M:GeoFramework.Licensing.LicenseAuthorizer.BeginExtendTrialLicense(System.Int32,System.Int32,System.Int64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:GeoFramework.Licensing.LicenseAuthorizer.EndExtendTrialLicense(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:GeoFramework.Licensing.LicenseAuthorizer.Ping">
            <remarks/>
        </member>
        <member name="M:GeoFramework.Licensing.LicenseAuthorizer.BeginPing(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:GeoFramework.Licensing.LicenseAuthorizer.EndPing(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:GeoFramework.Licensing.LicenseAuthorizer.RequestProductionLicense(System.String,System.Int64)">
            <remarks/>
        </member>
        <member name="M:GeoFramework.Licensing.LicenseAuthorizer.BeginRequestProductionLicense(System.String,System.Int64,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:GeoFramework.Licensing.LicenseAuthorizer.EndRequestProductionLicense(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="T:GeoFramework.Angle">
            <summary>Represents an angular measurement around a circle.</summary>
            <remarks>
            	<para>This class serves as the base class for angular measurement classes within
                the framework, such as the <strong>Azimuth</strong>, <strong>Elevation</strong>,
                <strong>Latitude</strong> and <strong>Longitude</strong> classes. An "angular
                measurement" is a measurement around a circle. Typically, angular measurements are
                between 0° and 360°.</para>
            	<para>Angles can be represented in two forms: decimal and sexagesimal. In decimal
                form, angles are represented as a single number. In sexagesimal form, angles are
                represented in three components: hours, minutes, and seconds, very much like a
                clock.</para>
            	<para>Upon creating an <strong>Angle</strong> object, other properties such as
                <strong>DecimalDegrees</strong>, <strong>DecimalMinutes</strong>,
                <strong>Hours</strong>, <strong>Minutes</strong> and <strong>Seconds</strong> are
                calculated automatically.</para>
            	<para>Instances of this class are guaranteed to be thread-safe because they are
                immutable (properties can only be modified via constructors).</para>
            </remarks>
            <seealso cref="T:GeoFramework.Azimuth">Azimuth Class</seealso>
            <seealso cref="T:GeoFramework.Elevation">Elevation Class</seealso>
            <seealso cref="T:GeoFramework.Latitude">Latitude Class</seealso>
            <seealso cref="T:GeoFramework.Longitude">Longitude Class</seealso>
            <example>
                These examples create new instances of Angle objects. 
                <code lang="VB" description="Create an angle of 90°">
            Dim MyAngle As New Angle(90)
                </code>
            	<code lang="CS" description="Create an angle of 90°">
            Angle MyAngle = new Angle(90);
                </code>
            	<code lang="C++" description="Create an angle of 90°">
            Angle MyAngle = new Angle(90);
                </code>
            	<code lang="VB" description="Create an angle of 105°30'21.4">
            Dim MyAngle1 As New Angle(105, 30, 21.4)
                </code>
            	<code lang="CS" description="Create an angle of 105°30'21.4">
            Angle MyAngle = new Angle(105, 30, 21.4);
                </code>
            	<code lang="C++" description="Create an angle of 105°30'21.4">
            Angle MyAngle = new Angle(105, 30, 21.4);
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Angle.Minimum">
            <summary>Represents the minimum value of an angle in one turn of a circle.</summary>
            <remarks>
            This member is typically used for looping through the entire range of possible
            angles. It is possible to create angular values below this value, such as -720°.
            </remarks>
            <example>
                This example creates an angle representing the minimum allowed value. 
                <code lang="VB">
            Dim MyAngle As Angle = Angle.Minimum
                </code>
            	<code lang="CS">
            Angle MyAngle = Angle.Minimum;
                </code>
            	<code lang="C++">
            Angle MyAngle = Angle.Minimum;
                </code>
            </example>
            <value>An Angle with a value of -359.999999°.</value>
        </member>
        <member name="F:GeoFramework.Angle.Empty">
            <summary>Represents an angle with no value.</summary>
            <remarks>
            This member is typically used to initialize an angle variable to zero. When an
            angle has a value of zero, its <see cref="P:GeoFramework.Angle.IsEmpty">IsEmpty</see> property returns
            <strong>True</strong>.
            </remarks>
            <value>An Angle containing a value of zero (0°).</value>
            <seealso cref="P:GeoFramework.Angle.IsEmpty">IsEmpty Property</seealso>
        </member>
        <member name="F:GeoFramework.Angle.Infinity">
            <summary>
            Represents an angle with infinite value.
            </summary>
            <remarks>
            In some cases, the result of an angular calculation may be infinity. This member
            is used in such cases. The <see cref="P:GeoFramework.Angle.DecimalDegrees">DecimalDegrees</see> property is
            set to Double.PositiveInfinity.
            </remarks>
        </member>
        <member name="F:GeoFramework.Angle.Maximum">
            <summary>Represents the maximum value of an angle in one turn of a circle.</summary>
            <remarks>
            This member is typically used for looping through the entire range of possible
            angles, or to test the range of a value. It is possible to create angular values below
            this value, such as 720°.
            </remarks>
            <example>
                This example creates an angle representing the maximum allowed value of 359.9999°. 
                <code lang="VB">
            Dim MyAngle As Angle = Angle.Maximum
                </code>
            	<code lang="CS">
            Angle MyAngle = Angle.Maximum;
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.Normalize">
            <summary>Modifies a value to its equivalent between 0° and 360°.</summary>
            <returns>An <strong>Angle</strong> representing the normalized angle.</returns>
            <remarks>
            	<para>This function is used to ensure that an angular measurement is within the
                allowed bounds of 0° and 360°. If a value of 360° or 720° is passed, a value of 0°
                is returned since 360° and 720° represent the same point on a circle. For the Angle
                class, this function is the same as "value Mod 360".</para>
            </remarks>
            <seealso cref="M:GeoFramework.Angle.Normalize">Normalize(Angle) Method</seealso>
            <example>
                This example demonstrates how normalization is used. The Stop statement is hit.
                This example demonstrates how the Normalize method can ensure that an angle fits
                between 0° and 359.9999°. This example normalizes 725° into 5°. 
                <code lang="VB">
            Dim MyAngle As New Angle(720)
            MyAngle = MyAngle.Normalize()
                </code>
            	<code lang="CS">
            Angle MyAngle = new Angle(720);
            MyAngle = MyAngle.Normalize();
                </code>
            	<code lang="VB">
            Dim MyValue As New Angle(725)
            MyValue = MyValue.Normalize()
                </code>
            	<code lang="CS">
            Angle MyValue = new Angle(725);
            MyValue = MyValue.Normalize();
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.Normalize(System.Double)">
            <summary>Converts the specified value to its equivalent between 0° and 360°.</summary>
            <returns>
            An Angle containing a value equivalent to the value specified, but between 0° and
            360°.
            </returns>
            <param name="decimalDegrees">A <strong>Double</strong> value to be normalized.</param>
        </member>
        <member name="M:GeoFramework.Angle.op_Implicit(GeoFramework.Radian)~GeoFramework.Angle">
            <summary>
            Converts a measurement in Radians into an Angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Angle.op_Implicit(System.Double)~GeoFramework.Angle">
            <summary>
            Converts a decimal degree measurement as a Double into an Angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Angle.op_Implicit(GeoFramework.Angle)~System.Double">
            <summary>
            Converts a decimal degree measurement as a Double into an Angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Angle.op_Implicit(GeoFramework.Angle)~System.Single">
            <summary>
            Converts a decimal degree measurement as a Double into an Angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Angle.op_Implicit(System.Int32)~GeoFramework.Angle">
            <summary>
            Converts a measurement in degrees as an Integer into an Angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Angle.op_Explicit(System.String)~GeoFramework.Angle">
            <summary>
            Converts a measurement in the form of a formatted String into an Angle.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Angle.op_Implicit(GeoFramework.Angle)~System.String">
            <summary>
            Converts an Angle into a String.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <remarks>This operator calls the ToString() method using the current culture.</remarks>
        </member>
        <member name="M:GeoFramework.Angle.#ctor">
            <summary>Creates a new instance with a default value of 0°.</summary>
            <example>
                This example creates a new instance with a default value of 0°. 
                <code lang="VB">
            Dim MyAngle As New Angle()
                </code>
            	<code lang="CS">
            Angle MyAngle = new Angle();
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.#ctor(System.Double)">
            <summary>Creates a new instance with the specified decimal degrees.</summary>
            <example>
                This example demonstrates how to create an angle with a measurement of 90°. 
                <code lang="VB">
            Dim MyAngle As New Angle(90)
                </code>
            	<code lang="CS">
            Angle MyAngle = new Angle(90);
                </code>
            </example>
            <returns>An <strong>Angle</strong> containing the specified value.</returns>
        </member>
        <member name="M:GeoFramework.Angle.#ctor(System.Int32)">
            <summary>Creates a new instance with the specified degrees.</summary>
            <returns>An <strong>Angle</strong> containing the specified value.</returns>
            <param name="hours">
            An <strong>Integer</strong> indicating the amount of degrees, typically between 0
            and 360.
            </param>
        </member>
        <member name="M:GeoFramework.Angle.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>Creates a new instance with the specified hours, minutes and 
            seconds.</summary>
            <example>
                This example demonstrates how to create an angular measurement of 34°12'29.2 in
                hours, minutes and seconds. 
                <code lang="VB">
            Dim MyAngle As New Angle(34, 12, 29.2)
                </code>
            	<code lang="CS">
            Angle MyAngle = new Angle(34, 12, 29.2);
                </code>
            </example>
            <returns>An <strong>Angle</strong> containing the specified value.</returns>
        </member>
        <member name="M:GeoFramework.Angle.#ctor(System.Int32,System.Double)">
            <summary>Creates a new instance with the specified hours and decimal minutes.</summary>
            <example>
                This example demonstrates how an angle can be created when only the hours and
                minutes (in decimal form) are known. This creates a value of 12°42.345'. 
                <code lang="VB">
            Dim MyAngle As New Angle(12, 42.345)
                </code>
            	<code lang="VB">
            Angle MyAngle = new Angle(12, 42.345);
                </code>
            </example>
            <remarks>An <strong>Angle</strong> containing the specified value.</remarks>
        </member>
        <member name="M:GeoFramework.Angle.#ctor(System.String)">
            <summary>Creates a new instance by converting the specified string.</summary>
            <remarks>
            This constructor parses the specified string into an <strong>Angle</strong>
            object using the current culture. This constructor can parse any strings created via
            the <strong>ToString</strong> method.
            </remarks>
            <seealso cref="M:GeoFramework.Angle.Parse(System.String)">Parse Method</seealso>
            <example>
                This example creates a new instance by parsing a string. (NOTE: The double-quote is
                doubled up to represent a single double-quote in the string.) 
                <code lang="VB">
            Dim MyAngle As New Angle("123°45'67.8""")
                </code>
            	<code lang="CS">
            Angle MyAngle = new Angle("123°45'67.8\"");
                </code>
            </example>
            <returns>An <strong>Angle</strong> containing the specified value.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
        </member>
        <member name="M:GeoFramework.Angle.#ctor(System.String,System.Globalization.CultureInfo)">
            <remarks>
            This constructor parses the specified string into an <strong>Angle</strong>
            object using a specific culture. This constructor can parse any strings created via the
            <strong>ToString</strong> method.
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
            <summary>
            Creates a new instance by converting the specified string using the specified
            culture.
            </summary>
            <param name="value">
            A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.
            </param>
            <param name="culture">
            A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.
            </param>
        </member>
        <member name="M:GeoFramework.Angle.LesserOf(GeoFramework.Angle)">
            <summary>Returns the object with the smallest value.</summary>
            <returns>The <strong>Angle</strong> containing the smallest value.</returns>
            <param name="value">An <strong>Angle</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.GreaterOf(GeoFramework.Angle)">
            <returns>An <strong>Angle</strong> containing the largest value.</returns>
            <summary>Returns the object with the largest value.</summary>
            <param name="value">An <strong>Angle</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.CompareTo(GeoFramework.Angle)">
            <summary>Returns a value indicating the relative order of two objects.</summary>
            <returns>A value of -1, 0, or 1 as documented by the IComparable interface.</returns>
            <remarks>
            	This method allows collections of <strong>Angle</strong> objects to be sorted.
            	The <see cref="P:GeoFramework.Angle.DecimalDegrees">DecimalDegrees</see> property of each instance is compared.
            </remarks>
            <param name="value">An <strong>Angle</strong> object to compare with.</param>
        </member>
        <member name="M:GeoFramework.Angle.Mirror">
            <summary>Returns an angle opposite of the current instance.</summary>
            <returns>An <strong>Angle</strong> representing the mirrored value.</returns>
            <remarks>
            This method returns the "opposite" of the current instance. The opposite is
            defined as the point on the other side of an imaginary circle. For example, if an angle
            is 0°, at the top of a circle, this method returns 180°, at the bottom of the
            circle.
            </remarks>
            <example>
                This example creates a new <strong>Angle</strong> of 45° then calculates its mirror
                of 225°. (45 + 180) 
                <code lang="VB" title="[New Example]">
            Dim Angle1 As New Angle(45)
            Dim Angle2 As Angle = Angle1.Mirror()
            Debug.WriteLine(Angle2.ToString())
            ' Output: 225
                </code>
            	<code lang="CS" title="[New Example]">
            Angle Angle1 = new Angle(45);
            Angle Angle2 = Angle1.Mirror();
            Console.WriteLine(Angle2.ToString());
            // Output: 225
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.ToRadians">
            <summary>Converts the current instance into radians.</summary>
            <returns>A <see cref="T:GeoFramework.Radian">Radian</see> object.</returns>
            <remarks>
            	<para>This function is typically used to convert an angular measurement into
             radians before performing a trigonometric function.
            		</para>
            </remarks>
            <seealso cref="T:GeoFramework.Radian">Radian Class</seealso>
            <overloads>Converts an angular measurement into radians before further processing.</overloads>
            <example>
                This example converts a measurement of 90° into radians. 
                <code lang="VB">
            Dim MyAngle As New Angle(90)
            Dim MyRadians As Radian = MyAngle.ToRadians()
                </code>
            	<code lang="CS">
            Angle MyAngle = new Angle(90);
            Radian MyRadians = MyAngle.ToRadians();
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.ToRadians(System.Double)">
            <remarks>
            	<para>This function is typically used to convert an angular measurement into
             radians before performing a trigonometric function.</para>
            </remarks>
            <returns>A <see cref="T:GeoFramework.Radian"><strong>Radian</strong></see> object.</returns>
            <summary>Converts an angular measurement into radians.</summary>
            <example>
                This example shows a quick way to convert an angle of 90° into radians. 
                <code lang="VB">
            Dim MyRadian As Radian = Angle.ToRadians(90)
                </code>
            	<code lang="CS">
            Radian MyRadian = Angle.ToRadians(90);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.FromRadians(GeoFramework.Radian)">
            <summary>Converts a value in radians into an angular measurement.</summary>
            <remarks>
            	This function is typically used in conjunction with the
            	<see cref="M:GeoFramework.Angle.ToRadians">ToRadians</see>
            	method after a trigonometric function has completed. The converted value is stored in
            	the <see cref="P:GeoFramework.Angle.DecimalDegrees">DecimalDegrees</see> property.
            </remarks>
            <seealso cref="M:GeoFramework.Angle.ToRadians">ToRadians</seealso>
            <seealso cref="T:GeoFramework.Radian">Radian Class</seealso>
            <example>
                This example uses the <strong>FromRadians</strong> method to convert a value of one
                radian into an <strong>Angle</strong> of 57°. 
                <code lang="VB">
            ' Create a new angle equal to one radian
            Dim MyRadians As New Radian(1)
            Dim MyAngle As Angle = Angle.FromRadians(MyRadians)
            Debug.WriteLine(MyAngle.ToString())
            ' Output: 57°
                </code>
            	<code lang="CS">
            // Create a new angle equal to one radian
            Radian MyRadians = new Radian(1);
            Angle MyAngle = Angle.FromRadians(MyRadians);
            Console.WriteLine(MyAngle.ToString());
            // Output: 57°
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.Equals(GeoFramework.Angle)">
            <summary>Compares the current value to another Angle's value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the
            <strong>DecimalDegrees</strong> property of the current instance matches the specified
            instance's <strong>DecimalDegrees</strong> property.
            </returns>
            <remarks>
            	<para>This method compares the <strong>DecimalDegrees</strong> properties of both
                objects to determine if they are the same. For comparisons requiring more or less
                precision, refer to the
                <see cref="M:GeoFramework.Angle.Equals(GeoFramework.Angle,System.Int32)">Equals(Angle, int)</see>
                method.</para>
            	<para><em>NOTE: This method compares objects by value, not by
                reference.</em></para>
            </remarks>
            <seealso cref="M:GeoFramework.Angle.Equals(System.Object)">Equals Method</seealso>
            <example>
                This example compares two Angle objects. 
                <code lang="VB" title="[New Example]">
            ' Equals will return False
            Dim Angle1 As New Angle(90);
            Dim Angle2 As New Angle(45);
            If Angle1.Equals(Angle2) Then
                 Debug.WriteLine("The values are the same");
            End If
             
            ' Equals will return True
            Dim Angle1 As New Angle(90);
            Dim Angle2 As New Angle(90);
            If Angle1.Equals(Angle2) Then
                 Debug.WriteLine("The values are the same");
            End If
                </code>
            	<code lang="CS" title="[New Example]">
            // Equals will return False
            Angle Angle1 = new Angle(90);
            Angle Angle2 = new Angle(45);
            if(Angle1.Equals(Angle2))
                 Console.WriteLine("The values are the same");
             
            // Equals will return True
            Angle Angle1 = new Angle(90);
            Angle Angle2 = new Angle(90);
            if(Angle1.Equals(Angle2))
                 Console.WriteLine("The values are the same");
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.Equals(GeoFramework.Angle,System.Int32)">
            <summary>
            Compares the current instance to another instance using the specified
            precision.
            </summary>
            <returns>
            	<para>A <strong>Boolean</strong>, <strong>True</strong> if the
                <strong>DecimalDegrees</strong> property of the current instance matches the
                specified instance's <strong>DecimalDegrees</strong> property.</para>
            </returns>
            <remarks>
            	<para>This is typically used in cases where precision is only significant for a few
                digits and exact comparison is not necessary.</para>
            	<para><em>NOTE: This method compares objects by value, not by
                reference.</em></para>
            </remarks>
            <seealso cref="M:GeoFramework.Angle.Equals(GeoFramework.Angle)">Equals Method</seealso>
            <example>
                These examples compare two fractional values using specific numbers of digits for
                comparison. 
                <code lang="VB" title="[New Example]">
            ' Equals will return False
            Dim Angle1 As New Angle(90.15);
            Dim Angle2 As New Angle(90.12);
            If Angle1.Equals(Angle2, 2) Then
                 Debug.WriteLine("The values are the same to two digits of precision.");
             
            ' Equals will return True
            Dim Angle1 As New Angle(90.15);
            Dim Angle2 As New Angle(90.12);
            If Angle1.Equals(Angle2, 1) Then
                 Debug.WriteLine("The values are the same to one digit of precision.");
                </code>
            	<code lang="CS" title="[New Example]">
            // Equals will return False
            Angle Angle1 = new Angle(90.15);
            Angle Angle2 = new Angle(90.12);
            if(Angle1.Equals(Angle2, 2))
                 Console.WriteLine("The values are the same to two digits of precision.");
             
            // Equals will return True
            Angle Angle1 = new Angle(90.15);
            Angle Angle2 = new Angle(90.12);
            if(Angle1.Equals(Angle2, 1))
                 Console.WriteLine("The values are the same to one digits of precision.");
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.Equals(System.Object)">
            <summary>Compares the current instance to another instance.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the object's DecimalDegrees
            properties match.
            </returns>
            <param name="obj">
            An <strong>Angle</strong>, <strong>Double</strong>, or <strong>Integer</strong>
            to compare with.
            </param>
        </member>
        <member name="M:GeoFramework.Angle.GetHashCode">
            <summary>Returns a unique code for this instance.</summary>
            <remarks>
            Since the <strong>Angle</strong> class is immutable, this property may be used
            safely with hash tables.
            </remarks>
            <returns>
            An <strong>Integer</strong> representing a unique code for the current
            instance.
            </returns>
        </member>
        <member name="M:GeoFramework.Angle.Increment">
            <summary>Returns the current instance increased by one.</summary>
            <returns>An <strong>Angle</strong> object.</returns>
            <remarks>
            	<para>This method increases the <strong>DecimalDegrees</strong> property by 1.0,
                returned as a new instance.</para>
            	<para><font color="red">Since the <strong>Angle</strong> class is immutable, this
                method cannot be used to modify an existing instance.</font></para>
            </remarks>
            <example>
                This example uses the <strong>Increment</strong> method to increase an angle's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Increment</strong> is called while ignoring the return value.
                <code lang="VB" title="[New Example]">
            ' Correct use of Increment
            Dim Angle1 As New Angle(89)
            Angle1 = Angle1.Increment()
             
            ' Incorrect use of Increment
            Dim Angle1 = New Angle(89)
            Angle1.Increment()
            ' NOTE: Angle1 will still be 89°!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Increment
            Angle Angle1 = new Angle(89);
            Angle1 = Angle1.Increment();
             
            // Incorrect use of Increment
            Angle Angle1 = new Angle(89);
            Angle1.Increment();
            // NOTE: Angle1 will still be 89°!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.Add(System.Double)">
            <summary>Increases the current instance by the specified value.</summary>
            <returns>A new <strong>Angle</strong> containing the summed values.</returns>
            <example>
                This example adds 45° to the current instance of 45°, returning 90°. 
                <code lang="VB" title="[New Example]">
            Dim Angle1 As New Angle(45)
            Angle1 = Angle1.Add(45)
                </code>
            	<code lang="CS" title="[New Example]">
            Angle Angle1 = new Angle(45);
            Angle1 = Angle1.Add(45);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to add to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.Decrement">
            <summary>Returns the current instance decreased by one.</summary>
            <returns>An <strong>Angle</strong> object.</returns>
            <remarks>
            	<para>This method decreases the <strong>DecimalDegrees</strong> property by 1.0,
                returned as a new instance.</para>
            	<para><font color="red">Since the <strong>Angle</strong> class is immutable, this
                method cannot be used to modify an existing instance.</font></para>
            </remarks>
            <example>
                This example uses the <strong>Decrement</strong> method to decrease an angle's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Decrement</strong> is called while ignoring the return value.
                <code lang="VB" title="[New Example]">
            ' Correct use of Decrement
            Dim Angle1 As New Angle(91)
            Angle1 = Angle1.Decrement()
             
            ' Incorrect use of Decrement
            Dim Angle1 = New Angle(91)
            Angle1.Increment()
            ' NOTE: Angle1 will still be 91°!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Decrement
            Angle Angle1 = new Angle(91);
            Angle1 = Angle1.Decrement();
             
            // Incorrect use of Decrement
            Angle Angle1 = new Angle(91);
            Angle1.Decrement();
            // NOTE: Angle1 will still be 91°!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.Subtract(System.Double)">
            <summary>Decreases the current instance by the specified value.</summary>
            <returns>A new <strong>Angle</strong> containing the new value.</returns>
            <example>
                This example subtracts 30° from the current instance of 90°, returning 60°. 
                <code lang="VB" title="[New Example]">
            Dim Angle1 As New Angle(90)
            Angle1 = Angle1.Subtract(30)
                </code>
            	<code lang="CS" title="[New Example]">
            Angle Angle1 = new Angle(90);
            Angle1 = Angle1.Subtract(30);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to subtract from the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.Multiply(System.Double)">
            <summary>Multiplies the current instance by the specified value.</summary>
            <returns>A new <strong>Angle</strong> containing the product of the two numbers.</returns>
            <example>
                This example multiplies 30° with three, returning 90°. 
                <code lang="VB" title="[New Example]">
            Dim Angle1 As New Angle(30)
            Angle1 = Angle1.Multiply(3)
                </code>
            	<code lang="CS" title="[New Example]">
            Angle Angle1 = new Angle(30);
            Angle1 = Angle1.Multiply(3);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to multiply with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.Divide(System.Double)">
            <summary>Divides the current instance by the specified value.</summary>
            <returns>An <strong>Angle</strong> containing the new value.</returns>
            <example>
                This example divides 90° by three, returning 30°. 
                <code lang="VB" title="[New Example]">
            Dim Angle1 As New Angle(90)
            Angle1 = Angle1.Divide(3)
                </code>
            	<code lang="CS" title="[New Example]">
            Angle Angle1 = new Angle(90);
            Angle1 = Angle1.Divide(3);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> representing a denominator to divide by.</param>
        </member>
        <member name="M:GeoFramework.Angle.IsLessThan(System.Double)">
            <summary>Indicates if the current instance is smaller than the specified value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than the specified value.
            </returns>
            <param name="value">A <strong>Double</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.IsLessThanOrEqualTo(System.Double)">
            <remarks>
            This method compares the <strong>DecimalDegrees</strong> property with the
            specified value. This method is the same as the "&lt;=" operator.
            </remarks>
            <summary>
            Indicates if the current instance is smaller than or equal to the specified
            value.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than or equal to the specified value.
            </returns>
            <param name="value">A <strong>Double</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.IsGreaterThan(System.Double)">
            <summary>Indicates if the current instance is larger than the specified value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than the specified value.
            </returns>
            <param name="value">A <strong>Double</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.IsGreaterThanOrEqualTo(System.Double)">
            <summary>
            Indicates if the current instance is larger than or equal to the specified
            value.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            greater than or equal to the specified value.
            </returns>
            <param name="value">A <strong>Double</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Angle.Parse(System.String)">
            <summary>Converts the specified string into an Angle object.</summary>
            <returns>
            	A new <strong>Angle</strong> object populated with the specified 
            	values.
            </returns>
            <remarks>
            	<para>This method parses the specified string into an <strong>Angle</strong> object
                using the current culture. This constructor can parse any strings created via the
                <strong>ToString</strong> method.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Angle.ToString">ToString Method</seealso>
            <example>
                This example creates a new angular measurement using the <strong>Parse</strong>
                method. 
                <code lang="VB">
            Dim NewAngle As Angle = Angle.Parse("123.45°")
                </code>
            	<code lang="CS">
            Angle NewAngle = Angle.Parse("123.45°");
                </code>
            </example>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Only the right-most portion of a sexagesimal measurement can be a fractional value.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">The specified text was not fully understood as an angular measurement.</exception>
        </member>
        <member name="M:GeoFramework.Angle.Parse(System.String,System.Globalization.CultureInfo)">
            <remarks>
            	<para>This powerful method is typically used to process data from a data store or a
                value input by the user in any culture. This function can accept any format which
                can be output by the ToString method.</para>
            </remarks>
            <returns>A new <strong>Angle</strong> object equivalent to the specified string.</returns>
            <summary>
            Converts the specified string into an <strong>Angle</strong> object using the
            specified culture.
            </summary>
            <param name="value">
            A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.
            </param>
            <param name="culture">
            A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.
            </param>
        </member>
        <member name="M:GeoFramework.Angle.ToString">
            <summary>Outputs the angle as a string using the default format.</summary>
            <returns><para>A <strong>String</strong> created using the default format.</para></returns>
            <remarks>
            	<para>This method formats the current instance using the default format of
                "d.dddd°." Any string output by this method can be converted back into an Angle
                object using the <strong>Parse</strong> method or <strong>Angle(string)</strong>
                constructor.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Angle.Parse(System.String)">Parse Method</seealso>
            <example>
                This example outputs a value of 90 degrees in the default format of ###.#°. 
                <code lang="VB">
            Dim MyAngle As New Angle(90)
            Debug.WriteLine(MyAngle.ToString)
            ' Output: "90°"
                </code>
            	<code lang="CS">
            Angle MyAngle = new Angle(90);
            Debug.WriteLine(MyAngle.ToString());
            // Output: "90°"
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.ToString(System.String)">
            <summary>Outputs the angle as a string using the specified format.</summary>
            <returns>A <strong>String</strong> in the specified format.</returns>
            <remarks>
            	<para>This method returns the current instance output in a specific format. If no
                value for the format is specified, a default format of "d.dddd°" is used. Any
                string output by this method can be converted back into an Angle object using the
                <strong>Parse</strong> method or <strong>Angle(string)</strong> constructor.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Angle.ToString">ToString Method</seealso>
            <seealso cref="M:GeoFramework.Angle.Parse(System.String)">Parse Method</seealso>
            <example>
                This example uses the <strong>ToString</strong> method to output an angle in a
                custom format. The " <strong>h°</strong> " code represents hours along with a
                degree symbol (Alt+0176 on the keypad), and " <strong>m.mm</strong> " represents
                the minutes out to two decimals. Mmm. 
                <code lang="VB">
            Dim MyAngle As New Angle(45, 16.772)
            Debug.WriteLine(MyAngle.ToString("h°m.mm"))
            ' Output: 45°16.78
                </code>
            	<code lang="CS">
            Dim MyAngle As New Angle(45, 16.772);
            Debug.WriteLine(MyAngle.ToString("h°m.mm"));
            // Output: 45°16.78
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.ToString(System.String,System.IFormatProvider)">
            <summary>Outputs the angle as a string using the specified format.</summary>
            <returns>A <strong>String</strong> in the specified format.</returns>
            <remarks>
            	<para>This method returns the current instance output in a specific format. If no
                value for the format is specified, a default format of "d.dddd" is used. Any string
                output by this method can be converted back into an Angle object using the
                <strong>Parse</strong> method or <strong>Angle(string)</strong> constructor.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Angle.ToString">ToString Method</seealso>
            <seealso cref="M:GeoFramework.Angle.Parse(System.String)">Parse Method</seealso>
            <example>
                This example uses the <strong>ToString</strong> method to output an angle in a
                custom format. The " <strong>h°</strong> " code represents hours along with a
                degree symbol (Alt+0176 on the keypad), and " <strong>m.mm</strong> " represents
                the minutes out to two decimals. Mmm. 
                <code lang="VB">
            Dim MyAngle As New Angle(45, 16.772)
            Debug.WriteLine(MyAngle.ToString("h°m.mm", CultureInfo.CurrentCulture))
            ' Output: 45°16.78
                </code>
            	<code lang="CS">
            Dim MyAngle As New Angle(45, 16.772);
            Debug.WriteLine(MyAngle.ToString("h°m.mm", CultureInfo.CurrentCulture));
            // Output: 45°16.78
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.Ceiling">
            <summary>Returns the smallest integer greater than the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Angle.Floor">
            <summary>Returns the largest integer which is smaller than the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Angle.Random">
            <summary>Returns a random angle between 0° and 360°.</summary>
            <returns>An <strong>Angle</strong> containing a random value.</returns>
        </member>
        <member name="M:GeoFramework.Angle.Random(System.Int32)">
            <summary>
            Returns a random Angle between 0° and 360° using the specified random number
            seed.
            </summary>
            <returns>An <strong>Angle</strong> containing a random value.</returns>
            <param name="seed">
            An <strong>Integer</strong> passed to the <strong>Random</strong> class as a
            random number seed.
            </param>
        </member>
        <member name="M:GeoFramework.Angle.RoundSeconds">
            <summary>Returns a new instance whose Seconds property is evenly divisible by 15.</summary>
            <returns>An <strong>Angle</strong> containing the rounded value.</returns>
            <remarks>
            This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.
            </remarks>
        </member>
        <member name="M:GeoFramework.Angle.RoundSeconds(System.Double)">
            <summary>
            Returns a new angle whose Seconds property is evenly divisible by the specified amount.
            </summary>
            <returns>An <strong>Angle</strong> containing the rounded value.</returns>
            <remarks>
            This method is used to align or "snap" an angle to a regular interval. For
            example, a grid might be easier to read if it were drawn at 30-second intervals instead
            of 24.198-second intervals.
            </remarks>
            <param name="interval">
            A <strong>Double</strong> between 0 and 60 indicating the interval to round
            to.
            </param>
        </member>
        <member name="M:GeoFramework.Angle.ToDecimalDegrees(System.Int32,System.Int32,System.Double)">
            <summary>Converts arbitrary hour, minute and seconds into decimal degrees.</summary>
            <returns>
            A <strong>Double</strong> containing the decimal degree version of the specified
            values.
            </returns>
            <remarks>
            This function is used to convert three-part measurements into a single value. The
            result of this method is typically assigned to the
            <see cref="P:GeoFramework.Angle.DecimalDegrees">
            DecimalDegrees</see> property. The resulting value will be
            <see cref="M:GeoFramework.Angle.Normalize">normalized</see>
            to be between 0° and 360° if necessary.
            </remarks>
            <seealso cref="P:GeoFramework.Angle.DecimalDegrees">DecimalDegrees Property</seealso>
            <seealso cref="M:GeoFramework.Angle.Normalize">Normalize Method</seealso>
            <example>
                This example converts a value of 10°30'0" into decimal degrees (10.5). 
                <code lang="VB" title="ToDecimalDegrees Example (VB)">
            Dim MyValue As Double = Angle.ToDecimalDegrees(10, 30, 0)
                </code>
            	<code lang="CS" title="ToDecimalDegrees Example (C#)">
            double MyValue = Angle.ToDecimalDegrees(10, 30, 0);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Angle.Clone">
            <summary>Creates a copy of the current instance.</summary>
            <returns>An <strong>Angle</strong> of the same value as the current instance.</returns>
        </member>
        <member name="P:GeoFramework.Angle.DecimalDegrees">
            <summary>Returns the value of the angle as decimal degrees.</summary>
            <value>A <strong>Double</strong> value.</value>
            <remarks>This property returns the value of the angle as a single number.</remarks>
            <seealso cref="P:GeoFramework.Angle.Hours">Hours Property</seealso>
            <seealso cref="P:GeoFramework.Angle.Minutes">Minutes Property</seealso>
            <seealso cref="P:GeoFramework.Angle.Seconds">Seconds Property</seealso>
            <example>
                This example demonstrates how the
                <see cref="P:GeoFramework.Angle.DecimalDegrees"><strong>DecimalDegrees</strong></see> property is
                calculated automatically when creating an angle using hours, minutes and seconds. 
                <code lang="VB">
            ' Create an angle of 20°30'
            Dim MyAngle As New Angle(20, 30)
            ' Setting the DecimalMinutes recalculated other properties 
            Debug.WriteLine(MyAngle.DecimalDegrees)
            ' Output: "20.5"  the same as 20°30'
                </code>
            	<code lang="CS">
            // Create an angle of 20°30'
            Angle MyAngle = New Angle(20, 30);
            // Setting the DecimalMinutes recalculated other properties 
            Console.WriteLine(MyAngle.DecimalDegrees)
            // Output: "20.5"  the same as 20°30'
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Angle.DecimalMinutes">
            <summary>Returns the minutes and seconds as a single numeric value.</summary>
            <seealso cref="P:GeoFramework.Angle.Minutes">Minutes Property</seealso>
            <seealso cref="P:GeoFramework.Angle.DecimalDegrees">DecimalDegrees Property</seealso>
            <value>A <strong>Double</strong> value.</value>
            <remarks>
            This property is used when minutes and seconds are represented as a single
            decimal value.
            </remarks>
            <example>
                This example demonstrates how the <strong>DecimalMinutes</strong> property is
                automatically calculated when creating a new angle. 
                <code lang="VB">
            ' Create an angle of 20°10'30"
            Dim MyAngle As New Angle(20, 10, 30)
            ' The DecimalMinutes property is automatically calculated
            Debug.WriteLine(MyAngle.DecimalMinutes)
            ' Output: "10.5"
                </code>
            	<code lang="CS">
            // Create an angle of 20°10'30"
            Angle MyAngle = new Angle(20, 10, 30);
            // The DecimalMinutes property is automatically calculated
            Console.WriteLine(MyAngle.DecimalMinutes)
            // Output: "10.5"
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Angle.Hours">
            <summary>Returns the integer hours (degrees) portion of an angular 
            measurement.</summary>
            <seealso cref="P:GeoFramework.Angle.Minutes">Minutes Property</seealso>
            <seealso cref="P:GeoFramework.Angle.Seconds">Seconds Property</seealso>
            <value>An <strong>Integer</strong> value.</value>
            <remarks>
            This property is used in conjunction with the <see cref="P:GeoFramework.Angle.Minutes">Minutes</see>
            and <see cref="P:GeoFramework.Angle.Seconds">Seconds</see> properties to create a full angular measurement.
            This property is the same as <strong>DecimalDegrees</strong> without any fractional
            value.
            </remarks>
            <example>
                This example creates an angle of 60.5° then outputs the value of the
                <strong>Hours</strong> property, 60. 
                <code lang="VB">
            Dim MyAngle As New Angle(60.5)
            Debug.WriteLine(MyAngle.Hours)
            ' Output: 60
                </code>
            	<code lang="CS">
            Angle MyAngle = new Angle(60.5);
            Console.WriteLine(MyAngle.Hours);
            // Output: 60
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Angle.Minutes">
            <summary>Returns the integer minutes portion of an angular measurement.</summary>
            <seealso cref="P:GeoFramework.Angle.Hours">Hours Property</seealso>
            <seealso cref="P:GeoFramework.Angle.Seconds">Seconds Property</seealso>
            <remarks>
            This property is used in conjunction with the <see cref="P:GeoFramework.Angle.Hours">Hours</see> and
            <see cref="P:GeoFramework.Angle.Seconds">Seconds</see> properties to create a sexagesimal
            measurement.
            </remarks>
            <value>An <strong>Integer</strong>.</value>
            <example>
                This example creates an angle of 45.5° then outputs the value of the
                <strong>Minutes</strong> property, 30. 
                <code lang="VB">
            Dim MyAngle As New Angle(45.5)
            Debug.WriteLine(MyAngle.Minutes)
            ' Output: 30
                </code>
            	<code lang="CS">
            Angle MyAngle = new Angle(45.5);
            Console.WriteLine(MyAngle.Minutes);
            // Output: 30
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Angle.Seconds">
            <summary>Returns the seconds minutes portion of an angular measurement.</summary>
            <remarks>
            This property is used in conjunction with the <see cref="P:GeoFramework.Angle.Hours">Hours</see> and
            <see cref="P:GeoFramework.Angle.Minutes">Minutes</see> properties to create a sexagesimal
            measurement.
            </remarks>
            <seealso cref="P:GeoFramework.Angle.Hours">Hours Property</seealso>
            <seealso cref="P:GeoFramework.Angle.Minutes">Minutes Property</seealso>
            <value>A <strong>Double</strong> value.</value>
            <example>
                This example creates an angle of 45°10.5' then outputs the value of the
                <strong>Seconds</strong> property, 30. 
                <code lang="VB">
            Dim MyAngle As New Angle(45, 10.5)
            Debug.WriteLine(MyAngle.Seconds)
            ' Output: 30
                </code>
            	<code lang="CS">
            Dim MyAngle As New Angle(45, 10.5);
            Console.WriteLine(MyAngle.Seconds);
            // Output: 30
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Angle.IsEmpty">
            <summary>Indicates if the current instance has a non-zero value.</summary>
            <value>
            A <strong>Boolean</strong>, <strong>True</strong> if the
            <strong>DecimalDegrees</strong> property is zero.
            </value>
            <seealso cref="F:GeoFramework.Angle.Empty">Empty Field</seealso>
        </member>
        <member name="P:GeoFramework.Angle.IsInfinity">
            <summary>Indicates if the current instance represents an infinite value.</summary>
        </member>
        <member name="T:GeoFramework.AngleEventArgs">
            <summary>Represents information about an angle when an angle-related event is raised.</summary>
            <remarks>
            This class is used for events which use an <strong>Angle</strong> as a
            parameter.
            </remarks>
            <example>
                This example demonstrates how to use <strong>AngleEventArgs</strong> when raising
                an event. 
                <code lang="VB">
            ' Declare a new event
            Dim MyAngleEvent As AngleEventHandler
             
            Sub Main()
                ' Create an angle of 90°
                Dim MyAngle As New Angle(90);
                ' Raise our custom Event
                RaiseEvent MyAngleEvent(Me, New AngleEventArgs(MyAngle));
            End Sub
                </code>
            	<code lang="CS">
            // Declare a new event
            AngleEventHandler MyAngleEvent;
             
            void Main()
            {
                // Create an angle of 90°
                Angle MyAngle = new Angle(90);
                // Raise our custom event
                if(MyAngleEvent != null)
                    MyAngleEvent(this, new AngleEventArgs(MyAngle));
            }
                </code>
            </example>
            <seealso cref="P:GeoFramework.AngleEventArgs.Angle">Angle Class</seealso>
            <seealso cref="T:GeoFramework.AngleEventHandler">AngleEventHandler Delegate</seealso>
        </member>
        <member name="F:GeoFramework.AngleEventArgs.Empty">
            <summary>Represents an instance containing a null value.</summary>
        </member>
        <member name="M:GeoFramework.AngleEventArgs.#ctor(GeoFramework.Angle)">
            <summary>
            Creates a new instance containing the specified Angle object.
            </summary>
        </member>
        <member name="P:GeoFramework.AngleEventArgs.Angle">
            <summary>
            Represents information about an angular measurement when an angle-related event is raised.
            </summary>
            <value>An <strong>Angle</strong> object containing a property which has changed.</value>
            <remarks>This class is used by the <see cref="P:GeoFramework.AngleEventArgs.Angle">Angle</see> class to provide notification when hours, minutes, or seconds properties have changed.</remarks>
            <seealso cref="P:GeoFramework.AngleEventArgs.Angle">Angle Class</seealso>
        </member>
        <member name="T:GeoFramework.AngleEventHandler">
            <summary>
            Facilitates events and asynchronous calls which use an <strong>Angle</strong>
            object as a parameter.
            </summary>
            <example>
                This example declares a custom event using this delegate.
                <code lang="VB" title="[New Example]">
            ' Declare a new event
            Dim MyAzimuthEvent As AzimuthEventHandler
             
            Sub Main()
                ' Create an Azimuth of 90°
                Dim MyAzimuth As New Azimuth(90)
                ' Raise our custom event
                RaiseEvent MyAzimuthEvent(Me, New AzimuthEventArgs(MyAzimuth))
            End Sub
                </code>
            	<code lang="CS" title="[New Example]">
            // Declare a new event
            AzimuthEventHandler MyAzimuthEvent;
             
            void Main()
            {
                // Create an Azimuth of 90°
                Azimuth MyAzimuth = new Azimuth(90);
                // Raise our custom event
                if(MyAzimuthEvent != null)
                    MyAzimuthEvent(this, new AzimuthEventArgs(MyAzimuth));
            }
                </code>
            </example>
            <param name="sender">An <strong>Object</strong> which initiated the call to the delegate.</param>
            <param name="e">
            An <strong>AngleEventArgs</strong> object containing an <strong>Azimuth</strong>
            involved in the event.
            </param>
        </member>
        <member name="T:GeoFramework.AngleComparer">
            <summary>Compares two <strong>Angle</strong> objects for the purposes of sorting.</summary>
            <remarks>
            	<para>This class is typically used by the <strong>Sort</strong> method of
                collections to organize several <strong>Angle</strong> objects. The
                <strong>DecimalDegrees</strong> property of two objects are compared to determine
                their relative order.</para>
            	<para>This class can also be used to sort collections of objects descended from
                <strong>Angle</strong>, such as <strong>Elevation</strong>,
                <strong>Latitude</strong> or <strong>Longitude</strong> objects.</para>
            </remarks>
            <example>
                This example uses the <strong>AngleComparer</strong> class to sort an array of
                <strong>Angle</strong> objects.
                <code lang="VB">
            ' Populate an array of angles
            Dim MyArray As New ArrayList()
            MyArray.Add(New Angle(40))
            MyArray.Add(New Angle(80))
            MyArray.Add(New Angle(240))
            ' Now sort the array
            MyArray.Sort(New AngleComparer())
            </code>
            	<code lang="CS">
            // Populate an array of angles
            ArrayList MyArray = new ArrayList();
            MyArray.Add(new Angle(40));
            MyArray.Add(new Angle(80));
            MyArray.Add(new Angle(240));
            // Now sort the array
            MyArray.Sort(new AngleComparer());
                </code>
            </example>
            <seealso cref="T:GeoFramework.AngleEventArgs">AngleEventArgs Class</seealso>
            <seealso cref="T:GeoFramework.Angle">Angle Class</seealso>
            <summary>
            Compares two Angle objects for the purposes of sorting.
            </summary>
        </member>
        <member name="M:GeoFramework.AngleComparer.Compare(GeoFramework.Angle,GeoFramework.Angle)">
            <summary>Compares the two angular measurements.</summary>
            <returns>
            An <strong>Integer</strong>: 0 if the objects are equivalent, -1 if the value of
            <strong>X</strong> is less than <strong>Y</strong>, or 1 if the value of
            <strong>X</strong> is greater than <strong>Y</strong>.
            </returns>
            <param name="x">The first <strong>Angle</strong> object to compare.</param>
            <param name="y">The second <strong>Angle</strong> object to compare.</param>
        </member>
        <member name="T:GeoFramework.Area">
            <summary>
            Represents the measurement of surface area of a polygon on Earth's
            surface.
            </summary>
            <remarks>
            	<para>This structure is used to represent measurements of arbitrary polygons on
                Earth's surface. Measurements can be converted to different unit types, such as
                acres, square kilometers, and square miles.</para>
            	<para>Instances of this structure are guaranteed to be thread-safe because they are
                immutable (properties can only be modified via constructors).</para>
            </remarks>
            <example>
                This example demonstrates how to create an <strong>Area</strong> structure and
                convert it to another unit type.
                <code lang="VB">
            ' Declare a Area of 50 meters
            Dim Area1 As New Area(50, AreaUnit.SquareMeters)
            ' Convert it into acres
            Dim Area2 As Area = Area2.ToAcres()
                </code>
            	<code lang="CS">
            // Declare a Area of 50 meters
            Area Area1 = new Area(50, AreaUnit.SquareMeters);
            // Convert it into acres
            Area Area2 = Area2.ToAcres();
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Area.Empty">
            <summary>Represents an area with no value.</summary>
        </member>
        <member name="F:GeoFramework.Area.Infinity">
            <summary>Represents an area of infinite value.</summary>
            <remarks>
            In some rare cases, the result of a mathematical formula might be infinity. This
            field is used to represent such values when they exist.
            </remarks>
        </member>
        <member name="F:GeoFramework.Area.Maximum">
            <summary>Represents the largest possible area which can be stored.</summary>
        </member>
        <member name="F:GeoFramework.Area.Minimum">
            <summary>Represents the smallest possible area which can be stored.</summary>
        </member>
        <member name="M:GeoFramework.Area.#ctor(System.Double,GeoFramework.AreaUnit)">
            <summary>Creates a new instance using the specified value and unit type.</summary>
            <example>
                This example uses a constructor to create a new <strong>Area</strong> of fifty
                square kilometers. 
                <code lang="VB">
            Dim MyArea As New Area(50, AreaUnit.SquareKilometers)
                </code>
            	<code lang="CS">
            Area MyArea = new Area(50, AreaUnit.SquareKilometers);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.#ctor(System.String)">
            <summary>Creates a new instance using the specified string.</summary>
            <remarks>
            This powerful constructor is used to convert an area measurement in the form of a
            string into an object, such as one entered by a user or read from a file. This
            constructor can accept any output created via the <see cref="M:GeoFramework.Area.ToString">ToString</see>
            method.
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Parse method requires a valid Area measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">1. The numeric portion of the Area measurement was not recognized.<br/>
            2. The Area unit type was not recognized or not specified.</exception>
            <example>
                This example demonstrates how the to use this constructor. 
                <code lang="VB">
            Dim MyArea As Area
            ' Create a Area of 50 square kilometers
            MyArea = New Area("50 sq. km")
            ' Create a Area of 14,387 miles, then convert it into square inches
            MyArea = New Area("14,387 sq. statute miles").ToSquareInches()
            ' Create a Area of 50 square feet
            MyArea = New Area("    50 sq '       ")
                </code>
            	<code lang="CS">
            Area MyArea;
            ' Create a Area of 50 square kilometers
            MyArea = new Area("50 sq. km");
            ' Create a Area of 14,387 miles, then convert it into square inches
            MyArea = new Area("14,387 sq. statute miles").ToSquareInches();
            ' Create a Area of 50 square feet
            MyArea = new Area("    50 sq '       ");
                </code>
            </example>
            <returns>An <strong>Area</strong> object.</returns>
            <seealso cref="M:GeoFramework.Area.Parse(System.String)">Parse(string) Method</seealso>
        </member>
        <member name="M:GeoFramework.Area.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>Creates a new instance using the specified string and culture.</summary>
            <remarks>
            This powerful constructor is used to convert an area measurement in the form of a
            string into an object, such as one entered by a user or read from a file. This
            constructor can accept any output created via the <see cref="M:GeoFramework.Area.ToString">ToString</see>
            method.
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Parse method requires a valid Area measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">1. The numeric portion of the Area measurement was not recognized.<br/>
            2. The Area unit type was not recognized or not specified.</exception>
            <example>
                This example demonstrates how the to use this constructor. 
                <code lang="VB">
            Dim MyArea As Area
            ' Create a Area of 50 square kilometers
            MyArea = New Area("50 sq. km", CultureInfo.CurrentCulture)
            ' Create a Area of 14,387 miles, then convert it into square inches
            MyArea = New Area("14,387 sq. statute miles", CultureInfo.CurrentCulture).ToSquareInches()
            ' Create a Area of 50 square feet
            MyArea = New Area("    50 sq '       ", CultureInfo.CurrentCulture)
                </code>
            	<code lang="CS">
            Area MyArea;
            ' Create a Area of 50 square kilometers
            MyArea = new Area("50 sq. km", CultureInfo.CurrentCulture);
            ' Create a Area of 14,387 miles, then convert it into square inches
            MyArea = new Area("14,387 sq. statute miles", CultureInfo.CurrentCulture).ToSquareInches();
            ' Create a Area of 50 square feet
            MyArea = new Area("    50 sq '       ", CultureInfo.CurrentCulture);
                </code>
            </example>
            <returns>An <strong>Area</strong> object.</returns>
            <seealso cref="M:GeoFramework.Area.Parse(System.String)">Parse(string) Method</seealso>
        </member>
        <member name="M:GeoFramework.Area.Add(GeoFramework.Area)">
            <summary>Adds the specified area to the current instance.</summary>
            <returns>A new <strong>Area</strong> structure containing the summed values.</returns>
            <remarks>
            This method can add any <strong>Area</strong> object to the current instance. If
            the unit type of the <strong>Value</strong> parameter does not match that of the
            current instance, the value is converted to the unit type of the current instance
            before adding.
            </remarks>
            <example>
                This example demonstrates how two areas of different unit types can be safely added
                together. A value of 144 square inches (which is the same as one square foot) is
                added to one square foot, producing two square feet. 
                <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(1, AreaUnit.SquareFeet)
            Dim Area2 As New Area(144, AreaUnit.SquareInches)
            Dim Area3 As Area = Area1.Add(Area2)
            Debug.WriteLine(Area3.ToString())
            ' Output: 2 square feet
                </code>
            	<code lang="CS" title="[New Example]">
            Area Area1 = new Area(1, AreaUnit.SquareFeet);
            Area Area2 = new Area(144, AreaUnit.SquareInches);
            Area Area3 = Area1.Add(Area2);
            Console.WriteLine(Area3.ToString());
            // Output: 2 square feet
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.Subtract(GeoFramework.Area)">
            <summary>Subtracts the specified area from the current instance.</summary>
            <returns>A new <strong>Area</strong> structure containing the new value.</returns>
            <remarks>
            This method will subtract any <strong>Area</strong> object from the current
            instance. If the unit type of the <strong>Value</strong> parameter does not match that
            of the current instance, the value is converted to the unit type of the current
            instance before subtracting.
            </remarks>
            <example>
                This example demonstrates how two areas of different unit types can be safely
                subtracted. A value of 144 square inches (which is the same as one square foot) is
                subtracted from one square foot, producing a result of zero. 
                <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(1, AreaUnit.SquareFeet)
            Dim Area2 As New Area(144, AreaUnit.SquareInches)
            Dim Area3 As Area = Area1.Subtract(Area2)
            Debug.WriteLine(Area3.ToString())
            ' Output: 0 square feet
                </code>
            	<code lang="CS" title="[New Example]">
            Area Area1 = new Area(1, AreaUnit.SquareFeet);
            Area Area2 = new Area(144, AreaUnit.SquareInches);
            Area Area3 = Area1.Subtract(Area2);
            Console.WriteLine(Area3.ToString());
            // Output: 0 square feet
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.Multiply(GeoFramework.Area)">
            <remarks>
            This method will multiply any <strong>Area</strong> object from the current
            instance. If the unit type of the <strong>Value</strong> parameter does not match that
            of the current instance, the value is converted to the unit type of the current
            instance before multiplication.
            </remarks>
            <summary>Multiplies the specified area with the current instance.</summary>
            <returns>
            A new <strong>Area</strong> structure containing the product of the two
            values.
            </returns>
            <example>
                This example demonstrates how two areas can be multiplied together. A value of 50
                square inches is multiplied by two square inches, producing a result of 100 square
                inches. 
                <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(50, AreaUnit.SquareInches)
            Dim Area2 As New Area(2, AreaUnit.SquareInches)
            Dim Area3 As Area = Area1.Multiply(Area2)
            Debug.WriteLine(Area3.ToString())
            ' Output: 100 square inches
                </code>
            	<code lang="CS" title="[New Example]">
            Area Area1 = new Area(50, AreaUnit.SquareInches);
            Area Area2 = new Area(2, AreaUnit.SquareInches);
            Area Area3 = Area1.Multiply(Area2);
            Console.WriteLine(Area3.ToString());
            // Output: 100 square inches
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.Divide(GeoFramework.Area)">
            <remarks>
            This method will devide the current instance by any <strong>Area</strong> object.
            If the unit type of the <strong>Value</strong> parameter does not match that of the
            current instance, the value is converted to the unit type of the current instance
            before devision.
            </remarks>
            <summary>Divides the current instance by the specified area.</summary>
            <returns>A new <strong>Area</strong> structure containing the new value.</returns>
            <example>
                This example demonstrates how two areas can be divided. A value of 100 square
                inches is divided by two square inches, producing a result of 50 square inches. 
                <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(100, AreaUnit.SquareInches)
            Dim Area2 As New Area(2, AreaUnit.SquareInches)
            Dim Area3 As Area = Area1.Divide(Area2)
            Debug.WriteLine(Area3.ToString())
            ' Output: 50 square inches
                </code>
            	<code lang="CS" title="[New Example]">
            Area Area1 = new Area(100, AreaUnit.SquareInches);
            Area Area2 = new Area(2, AreaUnit.SquareInches);
            Area Area3 = Area1.Divide(Area2);
            Debug.WriteLine(Area3.ToString());
            // Output: 50 square inches
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.Increment">
            <summary>Returns the current instance increased by one.</summary>
            <remarks>
            	<para>This method increases the <strong>Value</strong> property by 1.0, returned as
                a new instance. The <strong>Units</strong> property is preserved.</para>
            	<para><font color="red"><font color="red">NOTE: Since the <strong>Area</strong>
                class is immutable, this method will not modify the current
                instance.</font></font></para>
            </remarks>
            <returns>A new <strong>Area</strong> structure containing the new value.</returns>
            <example>
                This example uses the <strong>Increment</strong> method to increase an area's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Increment</strong> is called while ignoring the return value. 
                <code lang="VB" title="[New Example]">
            ' Correct use of Increment
            Dim Area1 As New Area(1, AreaUnit.SquareMeters)
            Area1 = Area1.Increment()
             
            ' Incorrect use of Increment
            Dim Area1 As New Area(1, AreaUnit.SquareMeters)
            Area1.Increment()
            ' NOTE: Area1 will still be 1 square meter, not 2!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Increment
            Area Area1 = new Area(1, AreaUnit.SquareMeters);
            Area1 = Area1.Increment();
             
            // Incorrect use of Increment
            Area Area1 = new Area(1, AreaUnit.SquareMeters);
            Area1.Increment();
            // NOTE: Area1 will still be 1 square meter, not 2!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.Decrement">
            <remarks>
            	<para>This method decreases the <strong>Value</strong> property by 1.0, returned as
                a new instance. The <strong>Units</strong> property is preserved.</para>
            	<para><font color="red">NOTE: Since the <strong>Area</strong> class is immutable,
                this method will not modify the current instance.</font></para>
            </remarks>
            <summary>Returns the current instance decreased by one.</summary>
            <returns>A new <strong>Area</strong> structure containing the new value.</returns>
            <example>
                This example uses the <strong>Decrement</strong> method to decrease an area's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Decrement</strong> is called while ignoring the return value. 
                <code lang="VB" title="[New Example]">
            ' Correct use of Increment
            Dim Area1 As New Area(1, AreaUnit.SquareMeters)
            Area1 = Area1.Increment()
             
            ' Incorrect use of Increment
            Dim Area1 As New Area(1, AreaUnit.SquareMeters)
            Area1.Increment()
            ' NOTE: Area1 will still be 1 square meter, not 0!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Increment
            Area Area1 = new Area(1, AreaUnit.SquareMeters);
            Area1 = Area1.Decrement();
             
            // Incorrect use of Increment
            Area Area1 = new Area(1, AreaUnit.SquareMeters);
            Area1.Decrement();
            // NOTE: Area1 will still be 1 square meter, not 0!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.IsLessThan(GeoFramework.Area)">
            <summary>Indicates if the current instance is smaller than the specified value.</summary>
            <remarks>
            If the <strong>Value</strong> parameter's unit type does not match the current
            instance, it will be converted to the current instance's unit type before performing
            the comparison.
            </remarks>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than the <strong>Value</strong> parameter.
            </returns>
            <param name="value">An <strong>Area</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Area.IsLessThanOrEqualTo(GeoFramework.Area)">
            <summary>
            Indicates if the current instance is smaller than or equal to the specified
            value.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            smaller than or equal to the <strong>Value</strong> parameter.
            </returns>
            <remarks>
            If the <strong>Value</strong> parameter's unit type does not match the current
            instance, it will be converted to the current instance's unit type before performing
            the comparison.
            </remarks>
            <param name="value">An <strong>Area</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Area.IsGreaterThan(GeoFramework.Area)">
            <summary>Indicates if the current instance is larger than the specified value.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            larger than the <strong>Value</strong> parameter.
            </returns>
            <remarks>
            If the <strong>Value</strong> parameter's unit type does not match the current
            instance, it will be converted to the current instance's unit type before performing
            the comparison.
            </remarks>
            <param name="value">An <strong>Area</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Area.IsGreaterThanOrEqualTo(GeoFramework.Area)">
            <summary>
            Indicates if the current instance is larger than or equal to the specified
            value.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance is
            larger than or equal to the <strong>Value</strong> parameter.
            </returns>
            <remarks>
            If the <strong>Value</strong> parameter's unit type does not match the current
            instance, it will be converted to the current instance's unit type before performing
            the comparison.
            </remarks>
            <param name="value">An <strong>Area</strong> to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Area.Equals(GeoFramework.Area)">
            <summary>
            Compares the current instance to the specified <strong>Area</strong>
            object.
            </summary>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
            <remarks>
            	<para>This method will compare the <em>value</em> of the current instance against
                the <strong>Value</strong> parameter. If the <strong>Value</strong> parameter's
                unit type does not match the current instance, it will be converted to the current
                instance's unit type before performing the comparison.</para>
            	<para><em>NOTE: This method compares objects by value, not by
                reference.</em></para>
            </remarks>
            <param name="value">A <strong>Area</strong> object to compare with.</param>
        </member>
        <member name="M:GeoFramework.Area.Equals(System.Object)">
            <summary>Compares the current instance with the specified object.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the two objects have the
            same value.
            </returns>
            <param name="obj">An <strong>Area</strong> object to compare with.</param>
        </member>
        <member name="M:GeoFramework.Area.Equals(GeoFramework.Area,System.Int32)">
            <summary>
            Compares the current instance to another instance using the specified
            precision.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the two objects have the
            same value.
            </returns>
            <remarks>This method compares the current instance to the specified object at up to the specified number of digits of precision.</remarks>
            <param name="value">A <strong>Area</strong> object to compare with.</param>
            <param name="decimals">
            An <strong>Integer</strong> specifying the number of digits to include during
            comparison.
            </param>
        </member>
        <member name="M:GeoFramework.Area.FromRectangle(GeoFramework.GeographicRectangle)">
            <summary>Returns the area of the specified geographic rectangle.</summary>
            <returns>
            An <strong>Area</strong> structure indicating the area of the specified
            rectangle.
            </returns>
            <param name="rectangle">A <strong>GeographicRectangle</strong> to use during calculation.</param>
        </member>
        <member name="M:GeoFramework.Area.GetHashCode">
            <summary>Returns a unique code for the current instance.</summary>
            <returns>
            An <strong>Integer</strong> representing a unique code for the current
            instance.
            </returns>
            <remarks>
            Since the <strong>Area</strong> class is immutable, this property may be used
            safely with hash tables.
            </remarks>
        </member>
        <member name="M:GeoFramework.Area.Parse(System.String)">
            <summary>Creates a new instance using the specified string.</summary>
            <remarks>
            This powerful method is typically used to convert a string-based Area
            measurement, such as one entered by a user or read from a file, into a
            <strong>Area</strong> object. This method will accept any output created via the
            <see cref="M:GeoFramework.Area.ToString">ToString</see> method.
            </remarks>
            <returns>
            A new Area object containing the parsed <see cref="P:GeoFramework.Area.Value">value</see> and
            <see cref="P:GeoFramework.Area.Units">unit</see> type.
            </returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Parse method requires a valid Area measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">1. The numeric portion of the Area measurement was not recognized.<br/>
            2. The Area unit type was not recognized or not specified.</exception>
            <example>
                This example demonstrates how the Parse method can convert several string formats
                into a Area object. 
                <code lang="VB">
            Dim NewArea As Area
            ' Create a Area of 50 kilometers
            NewArea = Area.Parse("50 km")
            ' Create a Area of 14,387 miles, then convert it into square inches
            NewArea = Area.Parse("14,387 statute miles").ToSquareInches()
            ' Parse an untrimmed measurement into 50 feet
            NewArea = Area.Parse("    50 '       ")
                </code>
            	<code lang="CS">
            Area NewArea;
            // Create a Area of 50 kilometers
            NewArea = Area.Parse("50 km");
            // Create a Area of 14,387 miles, then convert it into square inches
            NewArea = Area.Parse("14,387 statute miles").ToInches();
            // Parse an untrimmed measurement into 50 feet
            NewArea = Area.Parse("    50 '       ");
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>Creates a new instance using the specified string and culture.</summary>
            <remarks>
            This powerful method is typically used to convert a string-based Area
            measurement, such as one entered by a user or read from a file, into a
            <strong>Area</strong> object. This method will accept any output created via the
            <see cref="M:GeoFramework.Area.ToString">ToString</see> method.
            </remarks>
            <example>
            	<code lang="VB" title="[New Example]">
            Dim NewArea As Area
            ' Create a Area of 50 kilometers
            NewArea = Area.Parse("50 km", CultureInfo.CurrentCulture)
            ' Create a Area of 14,387 miles, then convert it into inches
            NewArea = Area.Parse("14,387 statute miles", CultureInfo.CurrentCulture).ToSquareInches()
            ' Parse an untrimmed measurement into 50 feet
            NewArea = Area.Parse("    50 '       ", CultureInfo.CurrentCulture)
                </code>
            	<code lang="CS" title="[New Example]">
            Area NewArea;
            // Create a Area of 50 kilometers
            NewArea = Area.Parse("50 km", CultureInfo.CurrentCulture);
            // Create a Area of 14,387 miles, then convert it into square inches
            NewArea = Area.Parse("14,387 statute miles", CultureInfo.CurrentCulture).ToInches();
            // Parse an untrimmed measurement into 50 feet
            NewArea = Area.Parse("    50 '       ", CultureInfo.CurrentCulture);
                </code>
            </example>
            <param name="value">A <strong>String</strong> describing an area measurement.</param>
            <param name="culture">
            	<div class="dxEditTable" style="PADDING-RIGHT: 3px; MARGIN-TOP: -13px; PADDING-LEFT: 3px; FONT-SIZE: 7pt; FLOAT: right; MARGIN-RIGHT: -1px; BACKGROUND-COLOR: #e0e0e0">
                Summary
                </div>
            	<div>
            		<span id="TaggedComment|GeoFramework 1.0~GeoFramework.Area~Area(string, System.Globalization.CultureInfo):culture|##PARAM" contenteditable="true" style="WIDTH: 100%">A <strong>CultureInfo</strong>
                         object specifying which numeric and text formats to use during
                         parsing.</span>
            	</div>
            </param>
        </member>
        <member name="M:GeoFramework.Area.ToSquareFeet">
            <summary>Converts the current measurement into square feet.</summary>
            <returns>A new <strong>Area</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion regardless of the current unit type. You
            may convert from any unit type to any other unit type.
            </remarks>
            <seealso cref="M:GeoFramework.Area.ToSquareInches">ToSquareInches Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareKilometers">ToSquareKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareMeters">ToSquareMeters Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareNauticalMiles">ToSquareNauticalMiles Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareStatuteMiles">ToSquareStatuteMiles Method</seealso>
            <example>
                This example converts various three <strong>Area</strong> objects, each with a
                different unit type, into square feet.
                <code lang="VB">
            ' Create Areas of different unit types
            Dim Area1 As New Area(10, AreaUnit.SquareInches)
            Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
            Dim Area3 As New Area(50, AreaUnit.SquareKilometers)
            ' Convert the Area measurements to square feet and output the result 
            Debug.WriteLine(Area1.ToSquareFeet().ToString())
            Debug.WriteLine(Area2.ToSquareFeet().ToString())
            Debug.WriteLine(Area3.ToSquareFeet().ToString())
                </code>
            	<code lang="CS">
            // Create Areas of different unit types
            Area Area1 = new Area(10, AreaUnit.SquareInches);
            Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
            Area Area3 = new Area(50, AreaUnit.SquareKilometers);
            // Convert the Area measurements to square feet and output the result 
            Console.WriteLine(Area1.ToSquareFeet().ToString());
            Console.WriteLine(Area2.ToSquareFeet().ToString());
            Console.WriteLine(Area3.ToSquareFeet().ToString());
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.ToSquareInches">
            <summary>Converts the current measurement into square inches.</summary>
            <returns>A new <strong>Area</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion regardless of the current unit type. You
            may convert from any unit type to any other unit type.
            </remarks>
            <example>
                This example converts various three <strong>Area</strong> objects, each with a
                different unit type, into square inches.
                <code lang="VB">
            ' Create Areas of different unit types
            Dim Area1 As New Area(10, AreaUnit.SquareFeet)
            Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
            Dim Area3 As New Area(50, AreaUnit.SquareKilometers)
            ' Convert the Area measurements to square inches and output the result 
            Debug.WriteLine(Area1.ToSquareInches().ToString())
            Debug.WriteLine(Area2.ToSquareInches().ToString())
            Debug.WriteLine(Area3.ToSquareInches().ToString())
                </code>
            	<code lang="CS">
            // Create Areas of different unit types
            Area Area1 = new Area(10, AreaUnit.SquareFeet);
            Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
            Area Area3 = new Area(50, AreaUnit.SquareKilometers);
            // Convert the Area measurements to square inches and output the result 
            Console.WriteLine(Area1.ToSquareInches().ToString());
            Console.WriteLine(Area2.ToSquareInches().ToString());
            Console.WriteLine(Area3.ToSquareInches().ToString());
                </code>
            </example>
            <seealso cref="M:GeoFramework.Area.ToSquareFeet">ToSquareFeet Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareKilometers">ToSquareKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareMeters">ToSquareMeters Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareNauticalMiles">ToSquareNauticalMiles Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareStatuteMiles">ToSquareStatuteMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Area.ToSquareKilometers">
            <returns>A new <strong>Area</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion regardless of the current unit type. You
            may convert from any unit type to any other unit type.
            </remarks>
            <summary>Converts the current measurement into square kilometers.</summary>
            <example>
                This example converts various three <strong>Area</strong> objects, each with a
                different unit type, into square kilometers.
                <code lang="VB">
            ' Create Areas of different unit types
            Dim Area1 As New Area(10, AreaUnit.SquareFeet)
            Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
            Dim Area3 As New Area(50, AreaUnit.SquareInches)
            ' Convert the Area measurements to square kilometers and output the result 
            Debug.WriteLine(Area1.ToSquareKilometers().ToString())
            Debug.WriteLine(Area2.ToSquareKilometers().ToString())
            Debug.WriteLine(Area3.ToSquareKilometers().ToString())
                </code>
            	<code lang="CS">
            // Create Areas of different unit types
            Area Area1 = new Area(10, AreaUnit.SquareFeet);
            Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
            Area Area3 = new Area(50, AreaUnit.SquareInches);
            // Convert the Area measurements to square kilometers and output the result 
            Console.WriteLine(Area1.ToSquareKilometers().ToString());
            Console.WriteLine(Area2.ToSquareKilometers().ToString());
            Console.WriteLine(Area3.ToSquareKilometers().ToString());
                </code>
            </example>
            <seealso cref="M:GeoFramework.Area.ToSquareFeet">ToSquareFeet Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareInches">ToSquareInches Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareMeters">ToSquareMeters Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareNauticalMiles">ToSquareNauticalMiles Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareStatuteMiles">ToSquareStatuteMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Area.ToSquareMeters">
            <returns>A new <strong>Area</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion regardless of the current unit type. You
            may convert from any unit type to any other unit type.
            </remarks>
            <summary>Converts the current measurement into square meters.</summary>
            <example>
                This example converts various three <strong>Area</strong> objects, each with a
                different unit type, into square meters.
                <code lang="VB">
            ' Create Areas of different unit types
            Dim Area1 As New Area(10, AreaUnit.SquareFeet)
            Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
            Dim Area3 As New Area(50, AreaUnit.SquareInches)
            ' Convert the Area measurements to square meters and output the result 
            Debug.WriteLine(Area1.ToSquareMeters().ToString())
            Debug.WriteLine(Area2.ToSquareMeters().ToString())
            Debug.WriteLine(Area3.ToSquareMeters().ToString())
                </code>
            	<code lang="CS">
            // Create Areas of different unit types
            Area Area1 = new Area(10, AreaUnit.SquareFeet);
            Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
            Area Area3 = new Area(50, AreaUnit.SquareInches);
            // Convert the Area measurements to square meters and output the result 
            Console.WriteLine(Area1.ToSquareMeters().ToString());
            Console.WriteLine(Area2.ToSquareMeters().ToString());
            Console.WriteLine(Area3.ToSquareMeters().ToString());
                </code>
            </example>
            <seealso cref="M:GeoFramework.Area.ToSquareFeet">ToSquareFeet Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareInches">ToSquareInches Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareKilometers">ToSquareKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareNauticalMiles">ToSquareNauticalMiles Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareStatuteMiles">ToSquareStatuteMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Area.ToSquareNauticalMiles">
            <returns>A new <strong>Area</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion regardless of the current unit type. You
            may convert from any unit type to any other unit type.
            </remarks>
            <summary>Converts the current measurement into square nautical miles.</summary>
            <example>
                This example converts various three <strong>Area</strong> objects, each with a
                different unit type, into square nautical miles.
                <code lang="VB">
            ' Create Areas of different unit types
            Dim Area1 As New Area(10, AreaUnit.SquareFeet)
            Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
            Dim Area3 As New Area(50, AreaUnit.SquareInches)
            ' Convert the Area measurements to square nautical miles and output the result 
            Debug.WriteLine(Area1.ToSquareNauticalMiles().ToString())
            Debug.WriteLine(Area2.ToSquareNauticalMiles().ToString())
            Debug.WriteLine(Area3.ToSquareNauticalMiles().ToString())
                </code>
            	<code lang="CS">
            // Create Areas of different unit types
            Area Area1 = new Area(10, AreaUnit.SquareFeet);
            Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
            Area Area3 = new Area(50, AreaUnit.SquareInches);
            // Convert the Area measurements to square nautical miles and output the result 
            Console.WriteLine(Area1.ToSquareNauticalMiles().ToString());
            Console.WriteLine(Area2.ToSquareNauticalMiles().ToString());
            Console.WriteLine(Area3.ToSquareNauticalMiles().ToString());
                </code>
            </example>
            <seealso cref="M:GeoFramework.Area.ToSquareFeet">ToSquareFeet Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareInches">ToSquareInches Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareKilometers">ToSquareKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareMeters">ToSquareMeters Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareStatuteMiles">ToSquareStatuteMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Area.ToSquareStatuteMiles">
            <returns>A new <strong>Area</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion regardless of the current unit type. A
            "statute mile" is frequently referred to as "mile" by itself.
            </remarks>
            <summary>Converts the current measurement into square miles.</summary>
            <example>
                This example converts various three <strong>Area</strong> objects, each with a
                different unit type, into square miles.
                <code lang="VB">
            ' Create Areas of different unit types
            Dim Area1 As New Area(10, AreaUnit.SquareFeet)
            Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
            Dim Area3 As New Area(50, AreaUnit.SquareInches)
            ' Convert the Area measurements to square statute miles and output the result 
            Debug.WriteLine(Area1.ToSquareStatuteMiles().ToString())
            Debug.WriteLine(Area2.ToSquareStatuteMiles().ToString())
            Debug.WriteLine(Area3.ToSquareStatuteMiles().ToString())
                </code>
            	<code lang="CS">
            // Create Areas of different unit types
            Area Area1 = new Area(10, AreaUnit.SquareFeet);
            Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
            Area Area3 = new Area(50, AreaUnit.SquareInches);
            // Convert the Area measurements to square statute miles and output the result 
            Console.WriteLine(Area1.ToSquareStatuteMiles().ToString());
            Console.WriteLine(Area2.ToSquareStatuteMiles().ToString());
            Console.WriteLine(Area3.ToSquareStatuteMiles().ToString());
                </code>
            </example>
            <seealso cref="M:GeoFramework.Area.ToSquareFeet">ToSquareFeet Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareInches">ToSquareInches Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareKilometers">ToSquareKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareMeters">ToSquareMeters Method</seealso>
            <seealso cref="M:GeoFramework.Area.ToSquareNauticalMiles">ToSquareNauticalMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Area.ToAcres">
            <summary>Converts the current measurement into acres.</summary>
            <example>
                This example converts various three <strong>Area</strong> objects, each with a
                different unit type, into acres. 
                <code lang="VB" title="[New Example]">
            ' Create Areas of different unit types
            Dim Area1 As New Area(10, AreaUnit.SquareFeet)
            Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
            Dim Area3 As New Area(50, AreaUnit.SquareInches)
            ' Convert the Area measurements to acres and output the result 
            Debug.WriteLine(Area1.ToAcres().ToString())
            Debug.WriteLine(Area2.ToAcres().ToString())
            Debug.WriteLine(Area3.ToAcres().ToString())
                </code>
            	<code lang="CS" title="[New Example]">
            // Create Areas of different unit types
            Area Area1 = new Area(10, AreaUnit.SquareFeet);
            Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
            Area Area3 = new Area(50, AreaUnit.SquareInches);
            // Convert the Area measurements to acres and output the result 
            Console.WriteLine(Area1.ToAcres().ToString());
            Console.WriteLine(Area2.ToAcres().ToString());
            Console.WriteLine(Area3.ToAcres().ToString());
                </code>
            </example>
            <returns>A new <strong>Area</strong> object containing the converted value.</returns>
            <remarks>This method will perform a conversion regardless of the current unit type.</remarks>
        </member>
        <member name="M:GeoFramework.Area.ToSquareCentimeters">
            <summary>Converts the current measurement into square centimeters.</summary>
            <example>
                This example converts various three <strong>Area</strong> objects, each with a
                different unit type, into square centimeters. 
                <code lang="VB" title="[New Example]">
            ' Create Areas of different unit types
            Dim Area1 As New Area(10, AreaUnit.SquareFeet)
            Dim Area2 As New Area(20, AreaUnit.SquareStatuteMiles)
            Dim Area3 As New Area(50, AreaUnit.SquareInches)
            ' Convert the Area measurements to square centimeters and output the result 
            Debug.WriteLine(Area1.ToSquareCentimeters().ToString())
            Debug.WriteLine(Area2.ToSquareCentimeters().ToString())
            Debug.WriteLine(Area3.ToSquareCentimeters().ToString())
                </code>
            	<code lang="CS" title="[New Example]">
            // Create Areas of different unit types
            Area Area1 = new Area(10, AreaUnit.SquareFeet);
            Area Area2 = new Area(20, AreaUnit.SquareStatuteMiles);
            Area Area3 = new Area(50, AreaUnit.SquareInches);
            // Convert the Area measurements to square centimeters and output the result 
            Console.WriteLine(Area1.ToSquareCentimeters().ToString());
            Console.WriteLine(Area2.ToSquareCentimeters().ToString());
            Console.WriteLine(Area3.ToSquareCentimeters().ToString());
                </code>
            </example>
            <returns>A new <strong>Area</strong> object containing the converted value.</returns>
            <remarks>This method will perform a conversion regardless of the current unit type.</remarks>
        </member>
        <member name="M:GeoFramework.Area.ToImperialUnitType">
            <summary>
            Converts the current instance to an Imperial unit type which minimizes numeric
            value.
            </summary>
            <returns>
            An <strong>Area</strong> converted to Imperial units. (i.e. feet, inches,
            miles)
            </returns>
            <remarks>
            	<para>This method is used to make an area measurement easier to read by choosing
                another unit type. For example, "27,878,400 square feet" would be easier to
                understand as "1 square statute mile." This method converts the current instance to
                Metric unit which brings the <strong>Value</strong> closest to 1, then returns the
                new value. This method will perform a conversion regardless of the current unit
                type.</para>
            </remarks>
            <example>
                This example converts a measurement of 10560 feet into 1 square statute mile using
                the <strong>ToMetricUnitType</strong> method. 
                <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(27878400, AreaUnit.SquareFeet)
            Dim Area2 As Area = Area1.ToImperialUnitType()
            Debug.WriteLine(Area2.ToString())
            ' Output: 1 square statute mile
                </code>
            	<code lang="CS" title="[New Example]">
            Area Area1 = new Area(27878400, AreaUnit.SquareFeet);
            Area Area2 = Area1.ToImperialUnitType();
            Console.WriteLine(Area2.ToString());
            // Output: 1 square statute mile
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.ToMetricUnitType">
            <summary>
            Converts the current instance to a Metric unit type which minimizes numeric
            value.
            </summary>
            <returns>
            An <strong>Area</strong> converted to Metric units. (i.e. centimeter, meter,
            kilometer)
            </returns>
            <remarks>
            This method is used to make an area measurement easier to read by choosing
            another unit type. For example, "0.0002 kilometers" would be easier to read as "2
            meters." This method converts the current instance to Metric unit which brings the
            <strong>Value</strong> closest to 1, then returns the new value. This method will
            perform a conversion regardless of the current unit type.
            </remarks>
            <example>
                This example converts a measurement of 0.0001 kilometers into 1 meter using the
                <strong>ToMetricUnitType</strong> method. 
                <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(0.0001, AreaUnit.SquareKilometers)
            Dim Area2 As Area = Area1.ToMetricUnitType()
            Debug.WriteLine(Area2.ToString())
            ' Output: 1 square meter
                </code>
            	<code lang="CS" title="[New Example]">
            Area Area1 = new Area(0.0001, AreaUnit.SquareKilometers);
            Area Area2 = Area1.ToMetricUnitType();
            Console.WriteLine(Area2.ToString());
            // Output: 1 square meter
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.ToLocalUnitType">
            <summary>
            Converts the current instance to a Metric or Imperial unit type depending on the
            local culture.
            </summary>
            <returns>
            An <strong>Area</strong> converted to Metric or Imperial units, depending on the
            local culture.
            </returns>
            <remarks>
            This method is used to make an area measurement easier to read by choosing
            another unit type. For example, "0.0002 kilometers" would be easier to read as "2
            meters." This method converts the current instance to either a Metric or an Imperial
            unit (depending on the local culture) which brings the <strong>Value</strong> closest
            to 1. This method will perform a conversion regardless of the current unit type.
            </remarks>
            <example>
            See
            <see cref="M:GeoFramework.Area.ToImperialUnitType"><strong>ToImperialUnitType</strong></see> and
            <see cref="M:GeoFramework.Area.ToMetricUnitType"><strong>ToMetricUnitType</strong></see> methods
            for examples.
            </example>
        </member>
        <member name="M:GeoFramework.Area.ToUnitType(GeoFramework.AreaUnit)">
            <summary>Converts the current instance into the specified unit type.</summary>
            <returns>A new <strong>Area</strong> object containing the converted value.</returns>
            <remarks>This method will perform a conversion regardless of the current unit type.</remarks>
            <example>
                This example uses the <strong>ToUnitType</strong> method to convert an area
                measurement of 27,878,400 square feet into 1 square statute mile.
                <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(27878400, AreaUnit.SquareFeet)
            Dim Area2 As Area = Area1.ToUnitType(AreaUnit.SquareStatuteMiles)
            Debug.WriteLine(Area2.ToString())
            ' Output: 1 square statute mile
                </code>
            	<code lang="CS" title="[New Example]">
            Area Area1 As New Area(27878400, AreaUnit.SquareFeet);
            Area Area2 As Area = Area1.ToUnitType(AreaUnit.SquareStatuteMiles);
            Console.WriteLine(Area2.ToString());
            // Output: 1 square statute mile
                </code>
            </example>
            <param name="value">An <strong>AreaUnit</strong> value specifying the unit type to convert to.</param>
        </member>
        <member name="M:GeoFramework.Area.ToString">
            <summary>
            Outputs the current instance as a string using the default format.
            </summary>
            <returns>A <strong>String</strong> containing the current Area in the default format.</returns>
            <remarks>
            The default format used is "<strong>v uu</strong>" where <strong>v</strong>
            represents the numerical portion of the area and <strong>uu</strong> is the unit
            type.
            </remarks>
            <example>
                This example uses the ToString method to populate a TextBox with a Area
                measurement. 
                <code lang="VB">
            ' Declare a area of 75 square statute miles
            Dim MyArea As New Area(75, AreaUnit.SquareStatuteMiles)
            ' Output the result using the default format
            Debug.WriteLine(MyArea.ToString())
            ' Output: 75 sq. statute miles
                </code>
            	<code lang="CS">
            // Declare a area of 75 square statute miles
            Area MyArea = nre Area(75, AreaUnit.SquareStatuteMiles);
            // Output the result using the default format
            Console.WriteLine(MyArea.ToString());
            // Output: 75 sq. statute miles
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.ToString(System.String)">
            <summary>
            Outputs the current instance as a string using the specified format.
            </summary>
            <returns>A <strong>String</strong> containing the Area in the specified format.</returns>
            <remarks>This method allows a custom format to be applied to the ToString method.  Numeric formats
            will be adjusted to the machine's local UI culture.</remarks>
            <example>
                This example uses the ToString method to populate a TextBox with a Area measurement
                using a custom format. 
                <code lang="VB">
            ' Declare a area of 75 square statute miles
            Dim MyArea As New Area(75, AreaUnit.SquareStatuteMiles)
            ' Output the result using the default format
            Debug.WriteLine(MyArea.ToString("v.v uuu"))
            ' Output: 75.0 square statute miles
                </code>
            	<code lang="CS">
            // Declare a area of 75 square statute miles
            Area MyArea As New Area(75, AreaUnit.SquareStatuteMiles);
            // Output the result using the default format
            Console.WriteLine(MyArea.ToString("v.v uuu"));
            // Output: 75.0 square statute miles
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the current instance as a string using the specified format and local culture.
            </summary>
            <returns>A <strong>String</strong> containing the Area in the specified format.</returns>
            <remarks>This method allows a custom format to be applied to the ToString method.  Numeric formats
            will be adjusted to the machine's local UI culture.</remarks>
            <example>
                This example uses the ToString method to populate a TextBox with a Area measurement
                using a custom format and culture information. 
                <code lang="VB">
            ' Declare a area of 75 square statute miles
            Dim MyArea As New Area(75, AreaUnit.SquareStatuteMiles)
            ' Output the result using the default format
            Debug.WriteLine(MyArea.ToString("v.v uuu", CultureInfo.CurrentCulture))
            ' Output: 75.0 square statute miles
                </code>
            	<code lang="CS">
            // Declare a area of 75 square statute miles
            Area MyArea As New Area(75, AreaUnit.SquareStatuteMiles);
            // Output the result using the default format
            Console.WriteLine(MyArea.ToString("v.v uuu", CultureInfo.CurrentCulture));
            // Output: 75.0 square statute miles
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Area.CompareTo(GeoFramework.Area)">
            <summary>Compares the current instance to the specified area.</summary>
            <returns>
            An <strong>Integer</strong>: 0 if the object's values are equivalent, -1 if the
            current instance is smaller, or 1 if the current instance is larger.
            </returns>
            <remarks>
            If the <strong>Value</strong> parameter's unit type does not match the current
            instance, it will be converted to the current instance's unit type before performing
            the comparison.
            </remarks>
            <param name="value">An <strong>Area</strong> object to compare with.</param>
        </member>
        <member name="P:GeoFramework.Area.Units">
            <summary>Returns the units portion of an area measurement.</summary>
            <value>An <strong>AreaUnit</strong> value. Default is <strong>Meters</strong>.</value>
            <remarks>
            	<para>Each area measurement consists of a numeric value paired with a unit type
                describing the value. It is not possible to create an area measurement without also
                specifying a value.</para>
            </remarks>
            <seealso cref="P:GeoFramework.Area.Value">Value Property</seealso>
        </member>
        <member name="P:GeoFramework.Area.Value">
            <summary>Returns the numeric portion of an area measurement.</summary>
            <value>A <strong>Double</strong> value.</value>
            <remarks>
            This property is paired with the <strong>Units</strong> property to form a
            complete area measurement.
            </remarks>
            <seealso cref="P:GeoFramework.Area.Units">Units Property</seealso>
        </member>
        <member name="P:GeoFramework.Area.IsEmpty">
            <summary>Indicates if the value of the current instance is zero.</summary>
            <value>
            A <strong>Boolean</strong>, <strong>True</strong> if the <strong>Value</strong>
            property is zero.
            </value>
        </member>
        <member name="P:GeoFramework.Area.IsMetric">
            <summary>Indicates if the current instance is using a Metric unit.</summary>
            <value>
            A <strong>Boolean</strong>, <strong>True</strong> if the <strong>Units</strong>
            property is <strong>SquareCentimeters</strong>, <strong>SquareMeters</strong> or
            <strong>SquareKilometers</strong>.
            </value>
            <remarks>
            This property is typically used to see if an area measurement is in a unit type
            used by a specific culture. Area measurements can be adjusted to either Metric or
            Imperial units using the <strong>ToMetricUnitType</strong> and
            <strong>ToImperialUnitType</strong> methods.
            </remarks>
        </member>
        <member name="P:GeoFramework.Area.IsInfinity">
            <summary>Indicates if the current instance represents an infinite value.</summary>
            <value>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance
            represents an infinite value.
            </value>
        </member>
        <member name="T:GeoFramework.AreaUnit">
            <summary>Indicates the unit of measure for area measurements.</summary>
            <remarks>
            This enumeration is most frequently used by the Units property of the Area
            structure to describe an area measurement.
            </remarks>
            <seealso cref="P:GeoFramework.Area.Value">Value Property (Area Class)</seealso>
            <seealso cref="P:GeoFramework.Area.Units">Units Property (Area Class)</seealso>
            <example>
                This example uses the <strong>AreaUnit</strong> enumeration to create a new
                <strong>Area</strong> object.
                <code lang="VB" title="[New Example]">
            Dim Area1 As New Area(1, AreaUnit.SquareKilometers)
                </code>
            	<code lang="CS" title="[New Example]">
            Area Area1 = new Area(1, AreaUnit.SquareKilometers);
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.AreaUnit.SquareKilometers">
            <summary>Metric System. Kilometers (thousands of meters).</summary>
        </member>
        <member name="F:GeoFramework.AreaUnit.SquareMeters">
            <summary>Metric System. 1/1000th of a square kilometer.</summary>
        </member>
        <member name="F:GeoFramework.AreaUnit.SquareCentimeters">
            <summary>Metric System. 1/100th of a square meter.</summary>
        </member>
        <member name="F:GeoFramework.AreaUnit.SquareStatuteMiles">
            <summary>Imperial System. A statute mile, most often referred to just as "mile."</summary>
        </member>
        <member name="F:GeoFramework.AreaUnit.SquareNauticalMiles">
            <summary>Nautical miles, also known as "sea miles".</summary>
        </member>
        <member name="F:GeoFramework.AreaUnit.SquareFeet">
            <summary>Imperial System. Feet.</summary>
        </member>
        <member name="F:GeoFramework.AreaUnit.SquareInches">
            <summary>Imperial System. Inches.</summary>
        </member>
        <member name="F:GeoFramework.AreaUnit.Acres">
            <summary>Imperial System. Inches.</summary>
        </member>
        <member name="T:GeoFramework.AreaEventArgs">
            <summary>Represents information about a area when an area-related event is raised.</summary>
            <example>
                This example demonstrates how to use the <strong>AreaEventArgs</strong> class when
                raising an event.
                <code lang="VB">
            ' Declare a new event
            Dim MyAreaEvent As AreaEventHandler
             
            Sub Main()
                ' Create a Area of 125 kilometers
                Dim MyArea As New Area(125, AreaUnit.SquareKilometers)
                ' Raise our custom event
                RaiseEvent MyAreaEvent(Me, New AreaEventArgs(MyArea))
            End Sub
                </code>
            	<code lang="CS">
            // Declare a new event
            AreaEventHandler MyAreaEvent;
             
            void Main()
            {
                // Create a Area of 125 kilometers
                Area MyArea = new Area(125, AreaUnit.SquareKilometers);
                // Raise our custom event
                if(MyAreaEvent != null)
                    MyAreaEvent(this, New AreaEventArgs(MyArea));
            }
                </code>
            </example>
            <seealso cref="P:GeoFramework.AreaEventArgs.Area">Area Class</seealso>
            <seealso cref="T:GeoFramework.AreaEventHandler">AreaEventHandler Delegate</seealso>
        </member>
        <member name="M:GeoFramework.AreaEventArgs.#ctor(GeoFramework.Area)">
            <summary>
            Creates a new instance containing the specified Area object.
            </summary>
        </member>
        <member name="P:GeoFramework.AreaEventArgs.Area">
            <summary>
            Represents information about a Area measurement when an Area-related event is raised.
            </summary>
            <value>A <strong>Area</strong> object containing a property which has changed.</value>
            <remarks>This class is used by the <see cref="P:GeoFramework.AreaEventArgs.Area">Area</see> class to provide notification 
            when hours, minutes, or seconds properties have changed.</remarks>
            <seealso cref="P:GeoFramework.AreaEventArgs.Area">Area Class</seealso>
        </member>
        <member name="T:GeoFramework.AreaEventHandler">
            <summary>
            Facilitates events and asynchronous calls which use an <strong>Area</strong>
            object as a parameter.
            </summary>
            <example>
                This example declares a custom event using this delegate. 
                <code lang="VB">
            Dim MyAreaEvent As AreaEventHandler
                </code>
            	<code lang="CS">
            AreaEventHandler MyAreaEvent;
                </code>
            </example>
            <param name="sender">The object which initiated the call to the delegate.</param>
            <param name="e">
            An <strong>AreaEventArgs</strong> object containing an <strong>Area</strong>
            object involved with the event.
            </param>
        </member>
        <member name="T:GeoFramework.Azimuth">
            <summary>Represents an angular measurement around the horizon between 0° and 
            360°.</summary>
            <remarks>
            	<para>This class is used to indicate a horizontal direction of travel, such as the
                bearing from one point on Earth to another. This class can also be combined with an
                Elevation object to form a three-dimensional direction towards an object in space,
                such as a GPS satellite.</para>
            </remarks>
            <example>
                These examples create new instances of an Azimuth object using different
                techniques.
                <code lang="VB" description="Create a new instance of 45° (northeast).">
            Dim MyAzimuth As New Azimuth(45)
                </code>
            	<code lang="CS" description="Create a new instance of 45° (northeast).">
            Azimuth MyAzimuth = new Azimuth(45);
                </code>
            	<code lang="VB" description="Create a new instance of 45°30'15.">
            Dim MyAzimuth As New Azimuth(45, 30, 15)
                </code>
            	<code lang="CS" description="Create a new instance of 45°30'15.">
            Azimuth MyAzimuth = new Azimuth(45, 30, 15);
                </code>
            	<code lang="VB" description="Create a new instance equal to a known compass direction.">
            Dim MyAzimuth As Azimuth = Azimuth.NorthNorthwest
                </code>
            	<code lang="CS" description="Create a new instance equal to a known compass direction.">
            Azimuth MyAzimuth = Azimuth.NorthNorthwest;
                </code>
            </example>
            <remarks>
            This class is used to indicate a horizontal direction of travel. In most
            situations, instances of this object identify one object's position relative to
            another, though an <strong>Azimuth</strong> can also be combined with an
            <strong>Elevation</strong> object (which measures a vertical direction), to create a
            three-dimensional direction towards an object in space, such as a GPS satellite.
            </remarks>
        </member>
        <member name="F:GeoFramework.Azimuth.Minimum">
            <summary>Represents the smallest possible azimuth of 0°.</summary>
        </member>
        <member name="F:GeoFramework.Azimuth.Empty">
            <summary>Represents an azimuth with no value.</summary>
        </member>
        <member name="F:GeoFramework.Azimuth.Maximum">
            <summary>Represents the largest possible azimuth of 359.999999°.</summary>
        </member>
        <member name="F:GeoFramework.Azimuth.North">
            <summary>Represents a direction of travel of 0°.</summary>
            <example>
                This example creates an Azimuth representing North. 
                <code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.North
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.North;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.NorthNortheast">
            <summary>Represents a direction of travel of 22.5°, between north and northeast.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.NorthNortheast
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.NorthNortheast;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.Northeast">
            <summary>Represents a direction of travel of 45°.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.Northeast
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.Northeast;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.EastNortheast">
            <summary>Represents a direction of travel of 67.5°.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.EastNortheast
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.EastNortheast;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.East">
            <summary>Represents a direction of travel of 90°.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.East
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.East;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.EastSoutheast">
            <summary>Represents a direction of travel of 112.5°, between east and southeast.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.EastSoutheast
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.EastSoutheast;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.Southeast">
            <summary>Represents a direction of travel of 135°.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.Southeast
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.Southeast;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.SouthSoutheast">
            <summary>Represents a direction of travel of 157.5°, between south and southeast.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.SouthSoutheast
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.SouthSoutheast;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.South">
            <summary>Represents a direction of travel of 180°.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.South
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.South;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.SouthSouthwest">
            <summary>Represents a direction of travel of 202.5°, between south and southwest.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.SouthSouthwest
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.SouthSouthwest;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.Southwest">
            <summary>Represents a direction of travel of 225°.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.Southwest
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.Southwest;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.WestSouthwest">
            <summary>Represents a direction of travel of 247.5°, between west and southwest.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.WestSouthwest
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.WestSouthwest;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.West">
            <summary>Represents a direction of travel of 270°.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.West
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.West;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.WestNorthwest">
            <summary>Represents a direction of travel of 292.5°, between west and northwest.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.WestNorthwest
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.WestNorthwest;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.Northwest">
            <summary>Represents a direction of travel of 315°.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.Northwest
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.Northwest;
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Azimuth.NorthNorthwest">
            <summary>Represents a direction of travel of 337.5°, between north and northwest.</summary>
            <example>
            	<code lang="VB">
            Dim MyAzimuth As Azimuth = Azimuth.NorthNorthwest
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = Azimuth.NorthNorthwest;
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Azimuth.FromDirection(GeoFramework.Direction)">
            <summary>
            Converts a <strong>Direction</strong> value into an <strong>Azimuth</strong>
            object.
            </summary>
            <returns>An <strong>Azimuth</strong> equivalent to the specified direction.</returns>
            <param name="direction">A value from the <strong>Direction</strong> enumeration to convert.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.#ctor">
            <summary>Creates a new instance.</summary>
            <example>
                This example creates a new azimuth with a default value of 0°. 
                <code lang="VB">
            Dim MyAzimuth As New Azimuth()
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = new Azimuth();
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Azimuth.#ctor(System.Double)">
            <summary>Creates a new instance with the specified decimal degrees.</summary>
        </member>
        <member name="M:GeoFramework.Azimuth.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>Creates a new instance using the specified hours, minutes and seconds.</summary>
            <param name="hours">
            An <strong>Integer</strong> indicating the amount of hours, typically between 0
            and 360.
            </param>
            <param name="minutes">
            An <strong>Integer</strong> indicating the amount of minutes, always between 0
            and 60.
            </param>
            <param name="seconds">
            A <strong>Double</strong> indicating the amount of minutes, always between 0.0
            and 60.0.
            </param>
        </member>
        <member name="M:GeoFramework.Azimuth.#ctor(System.Int32,System.Double)">
            <summary>Creates a new instance with the specified hours and decimal minutes.</summary>
            <param name="hours">
            An <strong>Integer</strong> indicating the amount of hours, typically between 0
            and 360.
            </param>
            <param name="decimalMinutes">A <strong>Double</strong> indicating the number of minutes and seconds.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.#ctor(System.String)">
            <summary>Creates a new instance by converting the specified string.</summary>
            <remarks>
            	<para>This constructor parses the specified string into an <strong>Angle</strong>
                object using the current culture. This constructor can parse any strings created
                via the <strong>ToString</strong> method.</para>
            </remarks>
            <example>
                This example creates a new <strong>Azimuth</strong> object by converting the string
                "NW," short for Northwest. or 315°.
                <code lang="VB" title="[New Example]">
            Dim NewAzimuth As New Azimuth("NW")
                </code>
            	<code lang="CS" title="[New Example]">
            Azimuth NewAzimuth = new Azimuth("NW");
                </code>
            </example>
            <param name="value">
            	<para>A <strong>String</strong> describing an angle in the form of decimal degrees
                or a sexagesimal.</para>
            </param>
        </member>
        <member name="M:GeoFramework.Azimuth.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance by converting the specified string using the specified
            culture.
            </summary>
            <remarks>
            This constructor parses the specified string into an <strong>Angle</strong>
            object using the specified culture. This constructor can parse any strings created via
            the <strong>ToString</strong> method.
            </remarks>
            <example>
                This example creates a new <strong>Azimuth</strong> object by converting the string
                "NW," short for Northwest. or 315°.
                <code lang="VB" title="[New Example]">
            Dim NewAzimuth As New Azimuth("NW", CultureInfo.CurrentCulture)
                </code>
            	<code lang="CS" title="[New Example]">
            Azimuth NewAzimuth = new Azimuth("NW", CultureInfo.CurrentCulture);
                </code>
            </example>
            <param name="value">
            A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.
            </param>
            <param name="culture">
            A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.
            </param>
        </member>
        <member name="M:GeoFramework.Azimuth.Parse(System.String)">
            <summary>Converts the specified string into an <strong>Azimuth</strong> object.</summary>
            <returns>A new <strong>Azimuth</strong> object equivalent to the specified string.</returns>
            <remarks>
            	<para>This method parses the specified string into an <strong>Azimuth</strong>
                object using the current culture. This method can parse any string created via the
                <strong>ToString</strong> method.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal or sexagesimal measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">1. Only the right-most portion of a sexagesimal measurement can be a fractional value.
            2. Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.
            3. The specified text was not fully understood as an angular measurement.</exception>
            <seealso cref="M:GeoFramework.Angle.ToString">ToString Method</seealso>
            <example>
                This example creates a new <strong>Azimuth</strong> object by converting the string
                "NW," short for Northwest. or 315°.
                <code lang="VB">
            Dim NewAzimuth As Azimuth = Azimuth.Parse("NW")
                </code>
            	<code lang="CS">
            Azimuth NewAzimuth = Azimuth.Parse("NW");
                </code>
            </example>
            <param name="value">
            A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.
            </param>
        </member>
        <member name="M:GeoFramework.Azimuth.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified string into an <strong>Azimuth</strong> object using the
            specified culture.
            </summary>
            <returns>A new <strong>Azimuth</strong> object equivalent to the specified string.</returns>
            <remarks>
            	<para>This method parses the specified string into an <strong>Azimuth</strong>
                object using the specified culture. This method can parse any string created via
                the <strong>ToString</strong> method.</para>
            </remarks>
            <example>
                This example creates a new <strong>Azimuth</strong> object by converting the string
                "NW," short for Northwest. or 315°.
                <code lang="VB" title="[New Example]">
            Dim NewAzimuth As Azimuth = Azimuth.Parse("NW", CultureInfo.CurrentCulture)
                </code>
            	<code lang="CS" title="[New Example]">
            Azimuth NewAzimuth = Azimuth.Parse("NW", CultureInfo.CurrentCulture);
                </code>
            </example>
            <param name="value">
            A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.
            </param>
            <param name="culture">
            A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.
            </param>
        </member>
        <member name="M:GeoFramework.Azimuth.Random">
            <summary>Returns a random azimuth between 0° and 360°.</summary>
            <returns>An <strong>Angle</strong> containing a random value.</returns>
        </member>
        <member name="M:GeoFramework.Azimuth.Random(System.Int32)">
            <summary>
            Returns a random Angle between 0° and 360° using the specified random number
            seed.
            </summary>
            <returns>An <strong>Angle</strong> containing a random value.</returns>
            <param name="seed">
            An <strong>Integer</strong> passed to the <strong>Random</strong> class as a
            random number seed.
            </param>
        </member>
        <member name="M:GeoFramework.Azimuth.Equals(GeoFramework.Direction)">
            <summary>
            Compares the current instance to the specified compass direction.
            </summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the current instance's
            Direction property matches the specified value.
            </returns>
            <remarks>
            This method is typically used to approximate if two directions are equivalent.
            For example, if two objects are traveling at a bearing of 41° and 46°, they both could
            be considered to be traveling Northeast even though their bearings are not precisely
            the same.
            </remarks>
            <param name="value">A <strong>Direction</strong> value to compare with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.Equals(System.Object)">
            <summary>Compares the current instance to another instance.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the
            <strong>DecimalDegrees</strong> property matches the specified value.
            </returns>
            <param name="obj">
            An <strong>Integer</strong>, <strong>Double</strong>, <strong>String</strong>, or
            <strong>Angle</strong> object to compare against.
            </param>
        </member>
        <member name="M:GeoFramework.Azimuth.GetHashCode">
            <summary>Returns a unique code for this instance.</summary>
            <remarks>
            Since the <strong>Angle</strong> class is immutable, this property may be used
            safely with hash tables.
            </remarks>
            <returns>
            An <strong>Integer</strong> representing a unique code for the current
            instance.
            </returns>
        </member>
        <member name="M:GeoFramework.Azimuth.Clone">
            <summary>Returns a copy of the current instance.</summary>
            <returns>
            An <strong>Azimuth</strong> whose <strong>DecimalDegrees</strong> property
            matches the current instance.
            </returns>
        </member>
        <member name="M:GeoFramework.Azimuth.ToString">
            <summary>Outputs the current instance as a string using the default format.</summary>
            <returns><para>A <strong>String</strong> representing the current instance.</para></returns>
            <remarks>
            This method formats the current instance using the default format of "cc." Any
            string output by this method can be converted back into an Angle object using the
            <strong>Parse</strong> method or <strong>Angle(string)</strong> constructor.
            </remarks>
            <seealso cref="M:GeoFramework.Azimuth.Parse(System.String)">Parse Method</seealso>
            <example>
                This example outputs a value of 90 degrees in the default format of ###.#°. 
                <code lang="VB">
            Dim MyAzimuth As New Azimuth(90)
            Debug.WriteLine(MyAzimuth.ToString)
            ' Output: "90°"
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = new Azimuth(90);
            Debug.WriteLine(MyAzimuth.ToString());
            // Output: "90°"
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Azimuth.ToString(System.String)">
            <summary>Outputs the azimuth as a string using the specified format.</summary>
            <returns>A <strong>String</strong> in the specified format.</returns>
            <remarks>
            	<para>This method returns the current instance output in a specific format. If no
                value for the format is specified, a default format of "cc" is used. Any string
                output by this method can be converted back into an Angle object using the
                <strong>Parse</strong> method or <strong>Azimuth(string)</strong>
                constructor.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Azimuth.ToString">ToString Method</seealso>
            <seealso cref="M:GeoFramework.Azimuth.Parse(System.String)">Parse Method</seealso>
            <example>
                This example uses the <strong>ToString</strong> method to output an azimuth in a
                custom format. The " <strong>d.dd</strong> " code represents decimal degrees
                rounded to two digits, and " <strong>cc</strong> " represents the direction in
                verbose form. 
                <code lang="VB">
            Dim MyAzimuth As New Azimuth(90.946)
            Debug.WriteLine(MyAzimuth.ToString("d.dd (cc)"))
            ' Output: 90.95 (East)
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = new Azimuth(90.946);
            Console.WriteLine(MyAzimuth.ToString("d.dd (cc)"));
            // Output: 90.95 (East)
                </code>
            </example>
            <param name="format">
            	<para>A <strong>String</strong> consisting of any number of the following
                codes:</para>
            	<para>
            		<list type="table">
            			<item>
            				<term><strong>c</strong></term>
            				<description>The object is output as an abbreviated direction.
                            <strong>N</strong>, <strong>NE</strong>,
                            <strong>NNW</strong></description>
            			</item>
            			<item>
            				<term><strong>cc</strong></term>
            				<description>The object is output as a full direction.
                            <strong>North</strong>, <strong>Northeast</strong>,
                            <strong>North-Northwest</strong></description>
            			</item>
            			<item>
            				<term><strong>d</strong></term>
            				<description>Represents one digit from the
                            <strong>DecimalDegrees</strong> property.</description>
            			</item>
            			<item>
            				<term><strong>h</strong></term>
            				<description>Represents one digit from the
                            <strong>Hours</strong> property.</description>
            			</item>
            			<item>
            				<term><strong>m</strong></term>
            				<description>Represents one digit from the <strong>Minutes</strong>
                            property.</description>
            			</item>
            			<item>
            				<term><strong>s</strong></term>
            				<description>Represents one digit from the <strong>Seconds</strong>
                            property.</description>
            			</item>
            		</list>
            	</para>
            </param>
        </member>
        <member name="M:GeoFramework.Azimuth.ToString(System.String,System.IFormatProvider)">
            <summary>Outputs the azimuth as a string using the specified format.</summary>
            <returns>A <strong>String</strong> in the specified format.</returns>
            <remarks>
            	<para>This method returns the current instance output in a specific format. If no
                value for the format is specified, a default format of "cc" is used. Any string
                output by this method can be converted back into an Angle object using the
                <strong>Parse</strong> method or <strong>Azimuth(string)</strong>
                constructor.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Azimuth.ToString">ToString Method</seealso>
            <seealso cref="M:GeoFramework.Azimuth.Parse(System.String)">Parse Method</seealso>
            <example>
                This example uses the <strong>ToString</strong> method to output an azimuth in a
                custom format. The " <strong>d.dd</strong> " code represents decimal degrees
                rounded to two digits, and " <strong>cc</strong> " represents the direction in
                verbose form. 
                <code lang="VB">
            Dim MyAzimuth As New Azimuth(90.946)
            Debug.WriteLine(MyAzimuth.ToString("d.dd (cc)", CultureInfo.CurrentCulture))
            ' Output: 90.95 (East)
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = new Azimuth(90.946);
            Console.WriteLine(MyAzimuth.ToString("d.dd (cc)", CultureInfo.CurrentCulture));
            // Output: 90.95 (East)
                </code>
            </example>
            <param name="format">
            	<para>A <strong>String</strong> consisting of any number of the following
                codes:</para>
            	<para>
            		<list type="table">
            			<item>
            				<term><strong>c</strong></term>
            				<description>The object is output as an abbreviated direction.
                            <strong>N</strong>, <strong>NE</strong>,
                            <strong>NNW</strong></description>
            			</item>
            			<item>
            				<term><strong>cc</strong></term>
            				<description>The object is output as a full direction.
                            <strong>North</strong>, <strong>Northeast</strong>,
                            <strong>North-Northwest</strong></description>
            			</item>
            			<item>
            				<term><strong>d</strong></term>
            				<description>Represents one digit from the
                            <strong>DecimalDegrees</strong> property.</description>
            			</item>
            			<item>
            				<term><strong>h</strong></term>
            				<description>Represents one digit from the
                            <strong>Hours</strong> property.</description>
            			</item>
            			<item>
            				<term><strong>m</strong></term>
            				<description>Represents one digit from the <strong>Minutes</strong>
                            property.</description>
            			</item>
            			<item>
            				<term><strong>s</strong></term>
            				<description>Represents one digit from the <strong>Seconds</strong>
                            property.</description>
            			</item>
            		</list>
            	</para>
            </param>
            <param name="formatProvider">
            A <strong>CultureInfo</strong> object used to properly format numeric
            information.
            </param>
        </member>
        <member name="M:GeoFramework.Azimuth.Normalize">
            <returns>An <strong>Azimuth</strong> containing the converted value.</returns>
            <remarks>
            This method converts a value so that it is between 0° and 360°. For example, an
            <strong>Azimuth</strong> of 720° would normalize to 0° since both numbers represent the
            same position on a circle.
            </remarks>
            <summary>Converts the current instance to its equivalent between 0° and 360°.</summary>
        </member>
        <member name="M:GeoFramework.Azimuth.Normalize(System.Double)">
            <summary>Converts the specified value to its equivalent between 0° and 360°.</summary>
            <param name="decimalDegrees">A <strong>Double</strong> value to be normalized.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.FromRadians(GeoFramework.Radian)">
            <summary>Converts a value expressed in radians into an azimuth.</summary>
            <remarks>
            This function is typically used at the end of trigonometric functions to convert
            a value from radians into an <strong>Azimuth</strong>, which is easier to read.
            </remarks>
            <seealso cref="M:GeoFramework.Angle.ToRadians">ToRadians</seealso>
            <seealso cref="T:GeoFramework.Radian">Radian Class</seealso>
            <example>
                This example uses the <strong>FromRadians</strong> method to convert a value of one
                radian into an <strong>Azimuth</strong> of 57°.
                <code lang="VB">
            ' Create a new angle equal to one radian
            Dim MyRadians As New Radian(1)
            Dim MyAzimuth As Azimuth = Azimuth.FromRadians(MyRadians)
            Debug.WriteLine(MyAzimuth.ToString())
            ' Output: 57°
                </code>
            	<code lang="CS">
            // Create a new angle equal to one radian
            Radian MyRadians = new Radian(1);
            Azimuth MyAzimuth = Azimuth.FromRadians(MyRadians);
            Console.WriteLine(MyAzimuth.ToString());
            // Output: 57°
                </code>
            </example>
            <returns>
            An <strong>Azimuth</strong> object equivalent to the specified
            <strong>Radian</strong> object.
            </returns>
            <param name="value">A <strong>Radian</strong> object to convert.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.Mirror">
            <summary>Returns an azimuth opposite to the current value.</summary>
            <returns>
            An <strong>Azimuth</strong> containing the opposite of the current
            instance.
            </returns>
            <remarks>
            This method returns the value representing the opposite of the current instance.
            The "opposite" is defined as the point on an imaginary circle 180° more than the
            current value. For example, if the current value is 0° (North), this method returns
            180° (South). If the value is 270° (West), 90° (East) is returned.
            </remarks>
            <example>
                This example creates a new <strong>Azimuth</strong> of 45° then calculates its
                mirror of 225°. (45 + 180)
                <code lang="VB" title="[New Example]">
            Dim Azimuth1 As New Azimuth(45)
            Dim Azimuth2 As Azimuth = Azimuth1.Mirror()
            Debug.WriteLine(Azimuth2.ToString("h"))
            ' Output: 225
                </code>
            	<code lang="CS" title="[New Example]">
            Azimuth Azimuth1 = new Azimuth(45);
            Azimuth Azimuth2 = Azimuth1.Mirror();
            Console.WriteLine(Azimuth2.ToString("h"));
            // Output: 225
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Azimuth.Increment">
            <summary>Returns the current instance increased by one.</summary>
            <remarks>
            	<para>This method increases the <strong>DecimalDegrees</strong> property by 1.0,
                returned as a new instance.</para>
            	<para><font color="red">Since the <strong>Azimuth</strong> class is immutable, this
                method cannot be used to modify an existing instance.</font></para>
            </remarks>
            <example>
                This example uses the <strong>Increment</strong> method to increase an azimuth's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Increment</strong> is called while ignoring the return value.
                <code lang="VB" title="[New Example]">
            ' Correct use of Increment
            Dim Azimuth1 As New Azimuth(89)
            Azimuth1 = Azimuth1.Increment()
             
            ' Incorrect use of Increment
            Dim Azimuth1 = New Azimuth(89)
            Azimuth1.Increment()
            ' NOTE: Azimuth1 will still be 89°!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Increment
            Azimuth Azimuth1 = new Azimuth(89);
            Azimuth1 = Azimuth1.Increment();
             
            // Incorrect use of Increment
            Azimuth Azimuth1 = new Azimuth(89);
            Azimuth1.Increment();
            // NOTE: Azimuth1 will still be 89°!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Azimuth.Add(GeoFramework.Angle)">
            <summary>Increases the current instance by the specified value.</summary>
            <returns>A new <strong>Azimuth</strong> containing the summed values.</returns>
            <example>
                This example adds 45° to the current instance of 45°, returning 90°.
                <code lang="VB" title="[New Example]">
            Dim Azimuth1 As New Azimuth(45)
            Azimuth1 = Azimuth1.Add(45)
                </code>
            	<code lang="CS" title="[New Example]">
            Azimuth Azimuth1 = new Azimuth(45);
            Azimuth1 = Azimuth1.Add(45);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to add to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.Decrement">
            <summary>Returns the current instance decreased by one.</summary>
            <returns>An <strong>Azimuth</strong> object.</returns>
            <remarks>
            	<para>This method decreases the <strong>DecimalDegrees</strong> property by 1.0,
                returned as a new instance.</para>
            	<para><font color="red">Since the <strong>Azimuth</strong> class is immutable, this
                method cannot be used to modify an existing instance.</font></para>
            </remarks>
            <example>
                This example uses the <strong>Decrement</strong> method to decrease an azimuth's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Decrement</strong> is called while ignoring the return value.
                <code lang="VB" title="[New Example]">
            ' Correct use of Decrement
            Dim Azimuth1 As New Azimuth(91)
            Azimuth1 = Azimuth1.Decrement()
             
            ' Incorrect use of Decrement
            Dim Azimuth1 = New Azimuth(91)
            Azimuth1.Decrement()
            ' NOTE: Azimuth1 will still be 91°!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Decrement
            Azimuth Azimuth1 = new Azimuth(91);
            Azimuth1 = Azimuth1.Decrement();
             
            // Incorrect use of Decrement
            Azimuth Azimuth1 = new Azimuth(91);
            Azimuth1.Decrement();
            // NOTE: Azimuth1 will still be 91°!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Azimuth.Subtract(GeoFramework.Angle)">
            <summary>Decreases the current instance by the specified value.</summary>
            <returns>A new <strong>Azimuth</strong> containing the new value.</returns>
            <example>
                This example subtracts 30° from the current instance of 90°, returning 60°. 
                <code lang="VB" title="[New Example]">
            Dim Azimuth1 As New Azimuth(90)
            Azimuth1 = Azimuth1.Subtract(30)
                </code>
            	<code lang="CS" title="[New Example]">
            Azimuth Azimuth1 = new Azimuth(90);
            Azimuth1 = Azimuth1.Subtract(30);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to subtract from the current instance.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.Multiply(GeoFramework.Angle)">
            <summary>Multiplies the current instance by the specified value.</summary>
            <returns>A new <strong>Azimuth</strong> containing the product of the two numbers.</returns>
            <example>
                This example multiplies 30° with three, returning 90°.
                <code lang="VB" title="[New Example]">
            Dim Azimuth1 As New Azimuth(30)
            Azimuth1 = Azimuth1.Multiply(3)
                </code>
            	<code title="[New Example]">
            Azimuth Azimuth1 = new Azimuth(30);
            Azimuth1 = Azimuth1.Multiply(3);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to multiply with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.Divide(GeoFramework.Angle)">
            <summary>Divides the current instance by the specified value.</summary>
            <returns>An <strong>Azimuth</strong> containing the new value.</returns>
            <example>
                This example divides 90° by three, returning 30°.
                <code lang="VB" title="[New Example]">
            Dim Azimuth1 As New Azimuth(90)
            Azimuth1 = Azimuth1.Divide(3)
                </code>
            	<code lang="CS" title="[New Example]">
            Azimuth Azimuth1 = new Azimuth(90);
            Azimuth1 = Azimuth1.Divide(3);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> representing a denominator to divide by.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.LesserOf(GeoFramework.Azimuth)">
            <summary>Returns the object with the smallest value.</summary>
            <returns>The <strong>Angle</strong> containing the smallest value.</returns>
            <param name="value">An <strong>Azimuth</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Azimuth.GreaterOf(GeoFramework.Azimuth)">
            <summary>Returns the object with the largest value.</summary>
            <returns>The <strong>Angle</strong> containing the largest value.</returns>
            <param name="value">An <strong>Azimuth</strong> object to compare to the current instance.</param>
        </member>
        <member name="P:GeoFramework.Azimuth.Direction">
            <summary>Returns the current instance expressed as a compass direction.</summary>
            <remarks>
            This property converts an azimuth to the nearest of sixteen compass directions.
            For example, an azimuth of 89° points almost east, therefore a value of
            <strong>East</strong> would be returned. This property is typically used for user
            interfaces to express an azimuth in a form that is easy to understand.
            </remarks>
            <example>
                This example outputs the direction associated 272°, which is <strong>West</strong>.
                <code lang="VB">
            Dim MyAzimuth As New Azimuth(272)
            Debug.WriteLine(MyAzimuth.Direction.ToString())
            ' Output: West
                </code>
            	<code lang="CS">
            Azimuth MyAzimuth = new Azimuth(272);
            Console.WriteLine(MyAzimuth.Direction.ToString());
            // Output: West
                </code>
            </example>
            <value>A <strong>Direction</strong> value.</value>
        </member>
        <member name="T:GeoFramework.AzimuthEventArgs">
            <summary>Represents information about an azimuth when an azimuth-related event is raised.</summary>
            <remarks>
            This class is used for events which use an <strong>Azimuth</strong> as a
            parameter.
            </remarks>
            <example>
                This example demonstrates how to use a custom event which involves an
                <strong>Azimuth</strong>.
                <code lang="VB">
            ' Declare a new event
            Dim MyAzimuthEvent As AzimuthEventHandler
             
            Sub Main()
                ' Create an Azimuth of 90°
                Dim MyAzimuth As New Azimuth(90)
                ' Raise our custom event
                RaiseEvent MyAzimuthEvent(Me, New AzimuthEventArgs(MyAzimuth))
            End Sub
                </code>
            	<code lang="CS">
            // Declare a new event
            AzimuthEventHandler MyAzimuthEvent;
             
            void Main()
            {
                // Create an Azimuth of 90°
                Azimuth MyAzimuth = new Azimuth(90);
                // Raise our custom event
                if(MyAzimuthEvent != null)
                    MyAzimuthEvent(this, new AzimuthEventArgs(MyAzimuth));
            }
                </code>
            </example>
            <seealso cref="P:GeoFramework.AzimuthEventArgs.Azimuth">Azimuth Class</seealso>
            <seealso cref="T:GeoFramework.AzimuthEventHandler">AzimuthEventHandler Delegate</seealso>
        </member>
        <member name="M:GeoFramework.AzimuthEventArgs.#ctor(GeoFramework.Azimuth)">
            <summary>
            Creates a new instance containing the specified Azimuth object.
            </summary>
            <param name="azimuth">An Azimuth object to use in an Azimuth-related event.</param>
        </member>
        <member name="P:GeoFramework.AzimuthEventArgs.Azimuth">
            <summary>
            Represents information about an angle around the horizon when an azimuth-related event is raised.
            </summary>
            <value>An <strong>Azimuth</strong> object containing a property which has changed.</value>
            <remarks>This class is used by the <see cref="P:GeoFramework.AzimuthEventArgs.Azimuth">Azimuth</see> class to provide notification when hours, minutes, or seconds properties have changed.</remarks>
            <seealso cref="P:GeoFramework.AzimuthEventArgs.Azimuth">Azimuth Class</seealso>
        </member>
        <member name="T:GeoFramework.Direction">
            <summary>Represents an approximate direction of motion.</summary>
            <remarks>
            This enumeration is used primarily by the <strong>Azimuth</strong> class when
            converting a numeric angle measurement into a compass direction.
            </remarks>
            <example>
                This example outputs the direction associated 272Â°, which is <strong>West</strong>
                . 
                <code lang="VB" title="[New Example]">
            Dim MyAzimuth As New Azimuth(272)
            Debug.WriteLine(MyAzimuth.Direction.ToString())
            ' Output: West
                </code>
            	<code lang="CS" title="[New Example]">
            Azimuth MyAzimuth = new Azimuth(272);
            Console.WriteLine(MyAzimuth.Direction.ToString());
            // Output: West
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Direction.North">
            <summary>An azimuth of approximately 0°</summary>
        </member>
        <member name="F:GeoFramework.Direction.NorthNortheast">
            <summary>Between north and northeast</summary>
        </member>
        <member name="F:GeoFramework.Direction.Northeast">
            <summary>Between north and east</summary>
        </member>
        <member name="F:GeoFramework.Direction.EastNortheast">
            <summary>Between east and northeast</summary>
        </member>
        <member name="F:GeoFramework.Direction.East">
            <summary>An azimuth of approximately 90°</summary>
        </member>
        <member name="F:GeoFramework.Direction.EastSoutheast">
            <summary>Between east and southeast</summary>
        </member>
        <member name="F:GeoFramework.Direction.Southeast">
            <summary>Between south and east</summary>
        </member>
        <member name="F:GeoFramework.Direction.SouthSoutheast">
            <summary>Between south and southeast</summary>
        </member>
        <member name="F:GeoFramework.Direction.South">
            <summary>An azimuth of approximately 180°</summary>
        </member>
        <member name="F:GeoFramework.Direction.SouthSouthwest">
            <summary>Between south and southwest</summary>
        </member>
        <member name="F:GeoFramework.Direction.Southwest">
            <summary>Between south and west</summary>
        </member>
        <member name="F:GeoFramework.Direction.WestSouthwest">
            <summary>Between west and southwest</summary>
        </member>
        <member name="F:GeoFramework.Direction.West">
            <summary>An azimuth of approximately 270°</summary>
        </member>
        <member name="F:GeoFramework.Direction.WestNorthwest">
            <summary>Between west and northwest</summary>
        </member>
        <member name="F:GeoFramework.Direction.Northwest">
            <summary>Between north and west</summary>
        </member>
        <member name="F:GeoFramework.Direction.NorthNorthwest">
            <summary>Between north and northwest</summary>
        </member>
        <member name="T:GeoFramework.AzimuthEventHandler">
            <summary>
            Facilitates events and asynchronous calls which use an <strong>Azimuth</strong>
            object as a parameter.
            </summary>
            <example>
                This example declares a custom event using the <strong>AzimuthEventHandler</strong>
                delegate.
                <code lang="VB">
            ' Declare a new event
            Dim MyAzimuthEvent As AzimuthEventHandler
             
            Sub Main()
                ' Create an Azimuth of 90°
                Dim MyAzimuth As New Azimuth(90)
                ' Raise our custom event
                RaiseEvent MyAzimuthEvent(Me, New AzimuthEventArgs(MyAzimuth))
            End Sub
                </code>
            	<code lang="CS">
            // Declare a new event
            AzimuthEventHandler MyAzimuthEvent;
             
            void Main()
            {
                // Create an Azimuth of 90°
                Azimuth MyAzimuth = new Azimuth(90);
                // Raise our custom event
                if(MyAzimuthEvent != null)
                    MyAzimuthEvent(this, new AzimuthEventArgs(MyAzimuth));
            }
                </code>
            </example>
            <seealso cref="T:GeoFramework.AzimuthEventArgs">AzimuthEventArgs Class</seealso>
            <seealso cref="T:GeoFramework.Azimuth">Azimuth Class</seealso>
            <param name="sender">An <strong>Object</strong> which initiated the call to the delegate.</param>
            <param name="e">
            An <strong>AzimuthEventArgs</strong> object containing an
            <strong>Azimuth</strong> involved in the event.
            </param>
        </member>
        <member name="T:GeoFramework.ByteArrayEventArgs">
            <summary>
            Represents information about a byte array when a byte array-related event is
            raised.
            </summary>
            <remarks>This class is used for events which use a byte array as a parameter.</remarks>
            <example>
                This example demonstrates how to use <strong>ByteArrayEventArgs</strong> when
                raising an event.
                <code lang="VB" title="[New Example]">
            ' Declare a new event
            Dim MyByteArrayEvent As ByteArrayEventHandler
             
            Sub Main()
                ' Create a byte array
                Dim MyArray As New Byte(50);
                ' Raise our custom Event
                RaiseEvent MyByteArrayEvent(Me, New ByteArrayEventArgs(MyByteArray));
            End Sub
                </code>
            	<code lang="CS" title="[New Example]">
            // Declare a new event
            ByteArrayEventHandler MyByteArrayEvent;
             
            void Main()
            {
                // Create a byte array
                byte[] MyByteArray = new byte(90);
                // Raise our custom event
                if(MyByteArrayEvent != null)
                    MyByteArrayEvent(this, new ByteArrayEventArgs(MyByteArray));
            }
                </code>
            </example>
        </member>
        <member name="T:GeoFramework.ByteArrayEventHandler">
            <example>
                This example demonstrates how to use <strong>ByteArrayEventArgs</strong> when
                raising an event. 
                <code lang="VB" title="[New Example]">
            ' Declare a new event
            Dim MyByteArrayEvent As ByteArrayEventHandler
             
            Sub Main()
                ' Create a byte array
                Dim MyArray As New Byte(50);
                ' Raise our custom Event
                RaiseEvent MyByteArrayEvent(Me, New ByteArrayEventArgs(MyByteArray));
            End Sub
                </code>
            	<code lang="CS" title="[New Example]">
            // Declare a new event
            ByteArrayEventHandler MyByteArrayEvent;
             
            void Main()
            {
                // Create a byte array
                byte[] MyByteArray = new byte(90);
                // Raise our custom event
                if(MyByteArrayEvent != null)
                    MyByteArrayEvent(this, new ByteArrayEventArgs(MyByteArray));
            }
                </code>
            </example>
            <summary>
            Facilitates events and asynchronous calls which use a byte array object as a
            parameter.
            </summary>
            <param name="sender">An <strong>Object</strong> which initiated the call to the delegate.</param>
            <param name="e">
            A <strong>ByteArrayEventArgs</strong> object containing a byte array involved in
            the event.
            </param>
        </member>
        <member name="T:GeoFramework.ColorInterpolator">
            <summary>Calculates intermediate colors between two other colors.</summary>
            <remarks>
            	<para>This class is used to create a smooth transition from one color to another.
                After specifying a start color, end color, and number of intervals, the indexer
                will return a calculated <strong>Color</strong>. Specifying a greater number of
                intervals creates a smoother color gradient.</para>
            	<para>Instances of this class are guaranteed to be thread-safe because the class
                uses thread synchronization.</para>
            	<para>On the .NET Compact Framework, the alpha channel is not supported.</para>
            </remarks>
            <example>
                This example uses a <strong>ColorInterpolator</strong> to calculate ten colors
                between (and including) <strong>Blue</strong> and <strong>Red</strong> . 
                <code lang="VB" title="[New Example]">
            ' Create a New color interpolator
            Dim Interpolator As New ColorInterpolator(Color.Blue, Color.Red, 10)
            ' Output Each calculated color
            Dim i As Integer
            For i = 0 To 9
                ' Get the Next color In the sequence
                Dim NewColor As Color = Interpolator(i)
                ' Output RGB values of this color
                Debug.Write(NewColor.R.ToString() + ",")
                Debug.Write(NewColor.G.ToString() + ",")
                Debug.WriteLine(NewColor.B.ToString())
            Next i
                </code>
            	<code lang="CS" title="[New Example]">
            // Create a new color interpolator
            ColorInterpolator Interpolator = new ColorInterpolator(Color.Blue, Color.Red, 10);
            // Output each calculated color
            for(int i = 0; i &lt; 10; i++)
            {
                // Get the next color in the sequence
                Color NewColor = Interpolator[i];
                // Output RGB values of this color
                Console.Write(NewColor.R.ToString() + ",");
                Console.Write(NewColor.G.ToString() + ",");
                Console.WriteLine(NewColor.B.ToString());
            }
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.ColorInterpolator.#ctor(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>Creates a new instance.</summary>
            <param name="startColor">A <strong>Color</strong> at the start of the sequence.</param>
            <param name="endColor">A <strong>Color</strong> at the end of the sequence.</param>
            <param name="count">
            The total number of colors in the sequence, including the start and end
            colors.
            </param>
        </member>
        <member name="P:GeoFramework.ColorInterpolator.Item(System.Int32)">
            <summary>Returns a calculated color in the sequence.</summary>
            <value>A <strong>Color</strong> value representing a calculated color.</value>
            <example>
                This example creates a new color interpolator between blue and red, then accesses
                the sixth item in the sequence. 
                <code lang="VB" title="[New Example]">
            ' Create a New color interpolator
            Dim Interpolator As New ColorInterpolator(Color.Blue, Color.Red, 10)
            ' Access the sixth item
            Color CalculatedColor = Interpolator(5);
                </code>
            	<code lang="CS" title="[New Example]">
            // Create a New color interpolator
            ColorInterpolator Interpolator = new ColorInterpolator(Color.Blue, Color.Red, 10);
            // Access the sixth item
            Color CalculatedColor = Interpolator[5];
                </code>
            </example>
            <param name="index">
            An <strong>Integer</strong> between 0 and <strong>Count</strong> minus
            one.
            </param>
        </member>
        <member name="P:GeoFramework.ColorInterpolator.InterpolationMethod">
            <summary>
            Controls the interpolation technique used to calculate intermediate
            colors.
            </summary>
            <value>
            An <strong>InterpolationMethod</strong> value indicating the interpolation
            technique. Default is <strong>Linear</strong>.
            </value>
            <remarks>
            This property controls the rate at which the start color transitions to the end
            color. Values other than Linear can "accelerate" and/or "decelerate" towards the end
            color.
            </remarks>
        </member>
        <member name="P:GeoFramework.ColorInterpolator.StartColor">
            <summary>Controls the first color in the sequence.</summary>
            <value>
            A <strong>Color</strong> object representing the first color in the
            sequence.
            </value>
            <remarks>Changing this property causes the entire sequence to be recalculated.</remarks>
            <example>
            This example changes the start color from Green to Orange.
            </example>
        </member>
        <member name="P:GeoFramework.ColorInterpolator.EndColor">
            <value>
            A <strong>Color</strong> object representing the last color in the
            sequence.
            </value>
            <summary>Controls the last color in the sequence.</summary>
            <remarks>Changing this property causes the entire sequence to be recalculated.</remarks>
        </member>
        <member name="P:GeoFramework.ColorInterpolator.Count">
            <summary>Controls the number of colors in the sequence.</summary>
            <remarks>Changing this property causes the entire sequence to be recalculated.</remarks>
            <value>
            An <strong>Integer</strong> indicating the total number of colors, including the
            start and end colors.
            </value>
        </member>
        <member name="T:GeoFramework.Datum">
            <summary>Represents a coordinate system based on interpretations of the Earth's shape and size.</summary>
            <remarks>
            	<para>Over the course of history, advances in technology have given people the
                ability to more accurately measure the shape and size of the Earth. Since countries
                have built significant infrastructure based upon older coordinate systems, they
                cannot immediately abandon them in favor of new ones. As a result, there are now
                over fifty interpretations of Earth's shape and size in use all over the
                world.</para>
            	<para>Some datums, such as World Geodetic System 1984 (or WGS84 for short) are
                becoming more widely used throughout the world, and this datum is used by nearly
                all GPS devices. However, while the world is slowly standardizing its datums, some
                datums will not be abandoned because they remain quite accurate for a specific,
                local area.</para>
            	<para>A datum on its own is nothing more than a more granular interpretation of an
                ellipsoid. Typically, more specific coordinate transformation information is
                further associated with a datum to produce meaningful information. For example,
                Helmert and Molodensky coordinate conversion formulas use several local conversion
                parameters for each datum.</para>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (its properties can only be set via constructors).</para>
            </remarks>
            <seealso cref="P:GeoFramework.Datum.Ellipsoid">Ellipsoid Class</seealso>
        </member>
        <member name="M:GeoFramework.Datum.#ctor(System.String,GeoFramework.Ellipsoid)">
            <summary>Creates a new instance using the specified name and reference ellipsoid.</summary>
            <param name="name">A <strong>String</strong> containing the user-friendly name for the 
            datum.</param>
            <param name="ellipsoid">
            An <strong>Ellipsoid</strong> describing the shape of the Earth, used as a basis
            for the datum.
            </param>
        </member>
        <member name="F:GeoFramework.Datum.Adindan">
            <summary>Represents the Adindan datum.</summary>
            <remarks>This datum is used primarily in African countries.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Afgooye">
            <summary>Represents the Afgooye datum.</summary>
            <remarks>This datum is used primarily in Somalia and uses the Krassovsky ellipsoid of 1940.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.AinelAbd1970">
            <summary>Represents the Ain el Abd 1970 datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.AmericanSamoa1962">
            <summary>Represents the American Samoa datum of 1962.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1866.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Anna1Astro1965">
            <summary>Represents the Anna 1 Astro datum of 1965.</summary>
        </member>
        <member name="F:GeoFramework.Datum.AntiguaIslandAstro1943">
            <summary>Represents the Antigua Island Astro datum of 1943.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Arc1950">
            <summary>Represents the Arc datum of 1950.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Arc1960">
            <summary>Represents the Arc datum of 1960.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.AscensionIsland1958">
            <summary>Represents the Ascension Island datum of 1958.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.AstroBeaconE1945">
            <summary>Represents the Astro Beacon "E" datum of 1945.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.AstroDos714">
            <summary>Represents the Astro DOS 71/4 datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.AstroTernIslandFrig1961">
            <summary>Represents the Astro Tern Island (Frig) datum of 1961.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.AstronomicalStation1952">
            <summary>Represents the Astronomical Station datum of 1952.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.AustralianGeodetic1966">
            <summary>Represents the Australian Geodetic datum of 1966.</summary>
        </member>
        <member name="F:GeoFramework.Datum.AustralianGeodetic1984">
            <summary>Represents the Australian Geodetic datum of 1984.</summary>
        </member>
        <member name="F:GeoFramework.Datum.AyabelleLighthouse">
            <summary>Represents the Ayabelle Lighthouse datum.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.BellevueIgn">
            <summary>Represents the Bellevue (IGN) datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Bermuda1957">
            <summary>Represents the Bermuda datum of 1957.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1866.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Bissau">
            <summary>Represents the Bissau datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.BogotaObservatory">
            <summary>Represents the Bogota Observatory datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.BukitRimpah">
            <summary>Represents the Bukit Rimpah datum.</summary>
        </member>
        <member name="F:GeoFramework.Datum.CampAreaAstro">
            <summary>Represents the Camp Area Astro datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.CampoInchauspe">
            <summary>Represents the Campo Inchauspe datum of 1969.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.CantonAstro1966">
            <summary>Represents the Canton Astro datum of 1966.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Cape">
            <summary>Represents the Cape datum.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.CapeCanaveral">
            <summary>Represents the Cape Canaveral datum.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1866.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Carthage">
            <summary>Represents the Carthage datum.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.ChathamIslandAstro1971">
            <summary>Represents the Chatham Island Astro datum of 1971.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.ChuaAstro">
            <summary>Represents the Chua Astro datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.CorregoAlegre">
            <summary>Represents the CorregoAlegre datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Dabola">
            <summary>Represents the Dabola datum.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.DeceptionIsland">
            <summary>Represents the Deception Island datum.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.DjakartaBatavia">
            <summary>Represents the Djakarta (Batavia) datum.</summary>
        </member>
        <member name="F:GeoFramework.Datum.Dos1968">
            <summary>Represents the DOS datum of 1968.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.EasterIsland1967">
            <summary>Represents the Easter Island datum of 1967.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.EstoniaLocalDatum1937">
            <summary>Represents the Estonia Coordinate System datum of 1937.</summary>
        </member>
        <member name="F:GeoFramework.Datum.European1950">
            <summary>Represents the European datum of 1950.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.European1979">
            <summary>Represents the European datum of 1979.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.FortThomas1955">
            <summary>Represents the Fort Thomas datum of 1955.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Gan1970">
            <summary>Represents the GAN datum of 1970.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.GeodeticDatum1949">
            <summary>Represents the Geodetic Datum of 1949.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.GraciosaBaseSW1948">
            <summary>Represents the Graciosa Base SW datum of 1948.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Guam1963">
            <summary>Represents the Guam 1963 datum.</summary>
        </member>
        <member name="F:GeoFramework.Datum.GunungSegara">
            <summary>Represents the Gunung Segara datum.</summary>
        </member>
        <member name="F:GeoFramework.Datum.Gux1Astro">
            <summary>Represents the GUX 1 Astro datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.HeratNorth">
            <summary>Represents the Herat North datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.HermannskogelDatum">
            <summary>Represents the Hermannskogel datum.</summary>
        </member>
        <member name="F:GeoFramework.Datum.Hjorsey1955">
            <summary>Represents the Hjorsey datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.HongKong1963">
            <summary>Represents the Hong Kong datum of 1963.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.HuTzuShan">
            <summary>Represents the Hu-Tzu-Shan datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Indian">
            <summary>Represents the Indian datum.</summary>
        </member>
        <member name="F:GeoFramework.Datum.Indian1954">
            <summary>Represents the Indian datum of 1954.</summary>
        </member>
        <member name="F:GeoFramework.Datum.Indian1960">
            <summary>Represents the Indian datum of 1960.</summary>
        </member>
        <member name="F:GeoFramework.Datum.Indian1975">
            <summary>Represents the Indian datum of 1975.</summary>
        </member>
        <member name="F:GeoFramework.Datum.Indonesian1974">
            <summary>Represents the Indonesian datum of 1974.</summary>
        </member>
        <member name="F:GeoFramework.Datum.Ireland1965">
            <summary>Represents the Ireland datum of 1965.</summary>
        </member>
        <member name="F:GeoFramework.Datum.Ists061Astro1968">
            <summary>Represents the ISTS 061 Astro datum of 1968.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Ists073Astro1969">
            <summary>Represents the ISTS 073 Astro datum of 1969.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.JohnstonIsland1961">
            <summary>Represents the Johnston Island datum of 1961.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Kandawala">
            <summary>Represents the Kandawala datum.</summary>
        </member>
        <member name="F:GeoFramework.Datum.KerguelenIsland1949">
            <summary>Represents the Kerguelen Island datum of 1949.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Kertau1948">
            <summary>Represents the Kertau datum of 1948.</summary>
        </member>
        <member name="F:GeoFramework.Datum.KusaieAstro1951">
            <summary>Represents the Kusaie Astro datum of 1951.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.LC5Astro1961">
            <summary>Represents the L. C. 5 Astro datum of 1961.</summary>
        </member>
        <member name="F:GeoFramework.Datum.Leigon">
            <summary>Represents the Leigon datum.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Liberia1964">
            <summary>Represents the Liberia datum of 1964.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Luzon">
            <summary>Represents the Luzon datum.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1866.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.MPoraloko">
            <summary>Represents the M'Poraloko datum.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Mahe1971">
            <summary>Represents the Mahe datum of 1971.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Massawa">
            <summary>Represents the Massawa datum.</summary>
        </member>
        <member name="F:GeoFramework.Datum.Merchich">
            <summary>Represents the Merchich datum.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.MidwayAstro1961">
            <summary>Represents the Midway Astro datum of 1961.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Minna">
            <summary>Represents the Minna datum.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.MontserratIslandAstro1958">
            <summary>Represents the Montserrat Island Astro datum of 1958.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Nahrwan">
            <summary>Represents the Nahrwan datum.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.NaparimaBwi">
            <summary>Represents the Naparima, BWI datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.NorthAmerican1927">
            <summary>Represents the North American 1927 (NAD27) datum.</summary>
        </member>
        <member name="F:GeoFramework.Datum.NorthAmerican1983">
            <summary>Represents the North American 1983 (NAD83) datum.</summary>
        </member>
        <member name="F:GeoFramework.Datum.NorthSahara1959">
            <summary>Represents the North Sahara datum of 1959.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.ObservatorioMeteorologico1939">
            <summary>Represents the Observatorio Meteorologico datum of 1939.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.OldEgyptian1907">
            <summary>Represents the Old Egyptian datum of 1907.</summary>
        </member>
        <member name="F:GeoFramework.Datum.OldHawaiian">
            <summary>Represents the Old Hawaiian datum.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1866.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Oman">
            <summary>Represents the Oman datum.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.OrdnanceSurveyGreatBritain1936">
            <summary>Represents the Ordnance Survey of Great Britain datum of 1936.</summary>
        </member>
        <member name="F:GeoFramework.Datum.PicodelasNieves">
            <summary>Represents the Pico de las Nieves datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.PitcairnAstro1967">
            <summary>Represents the Pitcairn Astro datum of 1967.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Point58">
            <summary>Represents the Point 58 datum.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.PointeNoire1948">
            <summary>Represents the Pointe Noire datum.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.PortoSanto1936">
            <summary>Represents the Porto Santo datum of 1936.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.ProvisionalSouthAmerican1956">
            <summary>Represents the Provisional South American datum of 1956.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.ProvisionalSouthChilean1963">
            <summary>Represents the Provisional South Chilean datum of 1963.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.PuertoRico">
            <summary>Represents the Puerto Rico datum.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1866.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.S42Pulkovo1942">
            <summary>Represents the S-42 (Pulkovo 1942) datum.</summary>
        </member>
        <member name="F:GeoFramework.Datum.QatarNational">
            <summary>Represents the Qatar National datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Qornoq">
            <summary>Represents the Qornoq datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Reunion">
            <summary>Represents the Reunion datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Rome1940">
            <summary>Represents the Rome datum of 1940.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Sjtsk">
            <summary>Represents the S-JTSK datum.</summary>
        </member>
        <member name="F:GeoFramework.Datum.SantoDos1965">
            <summary>Represents the Santo (DOS) datum of 1965.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.SaoBraz">
            <summary>Represents the Sao Braz datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.SapperHill1943">
            <summary>Represents the Sapper Hill datum of 1943.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Schwarzeck">
            <summary>Represents the Schwarzeck datum.</summary>
        </member>
        <member name="F:GeoFramework.Datum.SelvagemGrande1938">
            <summary>Represents the Selvagem Grande datum of 1938.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.SierraLeone1960">
            <summary>Represents the Sierra Leone datum of 1960.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.SouthAmerican1969">
            <summary>Represents the South American datum of 1969.</summary>
        </member>
        <member name="F:GeoFramework.Datum.SouthAsia">
            <summary>Represents the South Asia datum.</summary>
        </member>
        <member name="F:GeoFramework.Datum.TananariveObservatory1925">
            <summary>Represents the Tarnanarive Observatory datum of 1925.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Timbalai1948">
            <summary>Represents the Timbalai datum of 1948.</summary>
        </member>
        <member name="F:GeoFramework.Datum.Tokyo">
            <summary>Represents the Tokyo datum.</summary>
        </member>
        <member name="F:GeoFramework.Datum.TristanAstro1968">
            <summary>Represents the Tristan Astro datum of 1968.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.VitiLevu1916">
            <summary>Represents the Viti Levu datum of 1916.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Voirol1960">
            <summary>Represents the Voirol datum of 1960.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Voirol1874">
            <summary>Represents the Voirol datum of 1880.</summary>
            <remarks>This datum uses the Clarke ellipsoid of 1880.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.WakeIslandAstro1952">
            <summary>Represents the Wake Island Astro datum of 1952.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.WakeEniwetok1960">
            <summary>Represents the Wake Eniwetok datum of 1960.</summary>
        </member>
        <member name="F:GeoFramework.Datum.Wgs1972">
            <summary>Represents the World Geodetic System datum of 1972.</summary>
            <remarks>This datum uses the World Geodetic System ellipsoid of 1972.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Wgs1984">
            <summary>Represents the World Geodetic System datum of 1984.</summary>
            <remarks>
            This datum is probably the most frequently used datum in the world. It is the
            datum used by almost all GPS devices for transmitting coordinate information.
            This datum uses the World Geodetic System ellipsoid of 1984.
            </remarks>
        </member>
        <member name="F:GeoFramework.Datum.Yacare">
            <summary>Represents the datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Zanderij">
            <summary>Represents the datum.</summary>
            <remarks>This datum uses the International ellipsoid of 1924.</remarks>
        </member>
        <member name="F:GeoFramework.Datum.Default">
            <summary>Represents the default datum used by the GeoFramework, WGS1984.</summary>
        </member>
        <member name="M:GeoFramework.Datum.Equals(GeoFramework.Datum)">
            <summary>
            Compares the current instance to the specified datum object.
            </summary>
        </member>
        <member name="P:GeoFramework.Datum.Ellipsoid">
            <summary>Returns the interpretation of Earth's shape associated with a datum.</summary>
            <value>
            Read only. An
            <see cref="P:GeoFramework.Datum.Ellipsoid">Ellipsoid</see>
            object.
            </value>
            <remarks>Each datum is associated with an ellipsoid, which is an interpretation of Earth's shape and 
            size.</remarks>
            <example>
                This example gets information on the ellipsoid associated with the WGS84 datum. 
                <code lang="VB">
            ' Get information about the NAD1983 datum
            Dim MyDatum As Datum = Geodesy.GetDatum(DatumType.NorthAmerican1983)
            ' Get the ellipsoid associated with this datum
            Dim MyEllipsoid As Ellipsoid = MyDatum.Ellipsoid
            ' Write the semi-major axis of the ellipsoid
            Debug.WriteLine(MyEllipsoid.SemiMajorAxis.ToString())
                </code>
            	<code lang="CS">
            // Get information about the NAD1983 datum
            Datum MyDatum = Geodesy.GetDatum(DatumType.NorthAmerican1983);
            // Get the ellipsoid associated with this datum
            Ellipsoid MyEllipsoid = MyDatum.Ellipsoid;
            // Write the semi-major axis of the ellipsoid
            Debug.WriteLine(MyEllipsoid.SemiMajorAxis.ToString());
                </code>
            </example>
            <seealso cref="P:GeoFramework.Datum.Ellipsoid">Ellipsoid Class</seealso>
        </member>
        <member name="T:GeoFramework.DateTimeEventHandler">
            <summary>
            Facilitates events and asynchronous calls which use a <strong>DateTime</strong>
            object as a parameter.
            </summary>
            <example>
            This example declares a custom event using this delegate.
            <code lang="VB">
            Dim MyDateTimeEvent As DateTimeEventHandler
            </code>
            <code lang="C#">
            DateTimeEventHandler MyDateTimeEvent;
            </code>
            </example>
            <param name="sender">The object which initiated the call to the delegate.</param>
            <param name="e">A <see cref="T:GeoFramework.DateTimeEventArgs">DateTimeEventArgs</see> object containing an <see cref="T:System.DateTime">DateTime</see> involved in the event.</param>
        </member>
        <member name="T:GeoFramework.ExceptionEventHandler">
            <summary>
            Facilitates events and asynchronous calls which use a
            <strong>GeoException</strong> object as a parameter.
            </summary>
            <example>
            This example declares a custom event using this delegate.
            <code lang="VB">
            Dim MyErrorEvent As ExceptionEventHandler
            </code>
            <code lang="C#">
            ExceptionEventHandler MyErrorEvent;
            </code>
            </example>
            <param name="sender">The object which initiated the call to the delegate.</param>
            <param name="e">A <see cref="T:GeoFramework.ExceptionEventArgs">ExceptionEventArgs</see> object containing an exception involved in the event.</param>
        </member>
        <member name="T:GeoFramework.ProgressEventHandler">
            <summary>
            Facilitates events and asynchronous calls which report updates during an
            iterative task.
            </summary>
            <example>
            This example declares a custom event using this delegate.
            <code lang="VB">
            Dim MyProgressEvent As ProgressEventHandler
            </code>
            <code lang="C#">
            ProgressEventHandler MyProgressEvent;
            </code>
            </example>
            <param name="e">A <see cref="T:GeoFramework.ProgressEventArgs">ProgressEventArgs</see> object containing information describing the minimum, maximum and value for a <see cref="T:System.Windows.Forms.ProgressBar">ProgressBar</see> control.</param>
            <param name="sender">The object which initiated the call to the delegate.</param>
        </member>
        <member name="T:GeoFramework.TimeSpanEventHandler">
            <summary>
            Facilitates events and asynchronous calls which use an <strong>TimeSpan</strong>
            object as a parameter.
            </summary>
            <example>
            This example declares a custom event using this delegate.
            <code lang="VB">
            Dim MyTimeSpanEvent As TimeSpanEventHandler
            </code>
            <code lang="C#">
            TimeSpanEventHandler MyTimeSpanEvent;
            </code>
            </example>
            <param name="e">A <see cref="T:GeoFramework.TimeSpanEventArgs">TimeSpanEventArgs</see> object containing a <see cref="T:System.TimeSpan">TimeSpan</see> object involved with the event.</param>
            <param name="sender">The object which initiated the call to the delegate.</param>
        </member>
        <member name="T:GeoFramework.Distance">
            <summary>
            Represents the measurement of a straight line between between two points on
            Earth's surface.
            </summary>
        </member>
        <member name="F:GeoFramework.Distance.EarthsEquatorialRadiusWgs1984">
            <summary>
            Returns the distance from the center of the Earth to the equator according to the
            WGS1984 ellipsoid.
            </summary>
            <seealso cref="F:GeoFramework.Distance.EarthsPolarRadiusWgs1984">EarthsPolarRadiusWgs1984 
            Field</seealso>
            <seealso cref="F:GeoFramework.Distance.EarthsAverageRadius">EarthsAverageRadius Field</seealso>
        </member>
        <member name="F:GeoFramework.Distance.Infinity">
            <summary>
            Represents an infinite distance.
            </summary>
            <remarks>This field is typically used to indicate the absence of a distance limit.  For example,
            the Layer class of GIS.NET uses Infinity to indicate that the layer is drawn no matter how far
            out the user zooms away from it.  </remarks>
        </member>
        <member name="F:GeoFramework.Distance.EarthsPolarRadiusWgs1984">
            <summary>
            Returns the distance from the center of the Earth to a pole according to the
            WGS1984 ellipsoid.
            </summary>
            <seealso cref="F:GeoFramework.Distance.EarthsEquatorialRadiusWgs1984">EarthsEquatorialRadiusWgs1984 Field</seealso>
            <seealso cref="F:GeoFramework.Distance.EarthsAverageRadius">EarthsAverageRadius Field</seealso>
        </member>
        <member name="F:GeoFramework.Distance.EarthsAverageRadius">
            <summary>Returns the average radius of the Earth.</summary>
            <seealso cref="F:GeoFramework.Distance.EarthsEquatorialRadiusWgs1984">EarthsEquatorialRadiusWgs1984 Field</seealso>
            <seealso cref="F:GeoFramework.Distance.EarthsPolarRadiusWgs1984">EarthsPolarRadiusWgs1984 Field</seealso>
        </member>
        <member name="M:GeoFramework.Distance.ToSpeed(System.TimeSpan)">
            <summary>
            Returns the distance traveled at the current speed for the specified time.
            </summary>
            <param name="time">A length of time to travel.</param>
            <returns>A <strong>Distance</strong> representing the distance travelled at
            the current speed for the specified length of time.</returns>
        </member>
        <member name="M:GeoFramework.Distance.#ctor(System.Double,GeoFramework.DistanceUnit)">
            <summary>Creates a new instance using the specified value and unit type.</summary>
            <example>
            This example uses a constructor to create a new distance of 50km.
            <code lang="VB">
            Dim MyDistance As New Distance(50, DistanceUnit.Kilometers)
            </code>
            <code lang="C#">
            Distance MyDistance = new Distance(50, DistanceUnit.Kilometers);
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Distance.#ctor(System.String)">
            <summary>Creates a new instance from the the specified string.</summary>
            <param name="value">
             <para>A <strong>String</strong> in any format accepted by the
             <see cref="M:GeoFramework.Distance.Parse(System.String)">Parse</see>
             method.</para>
            </param>
            <remarks>
            This powerful constructor is typically used to initialize an instance with a
            string-based distance measurement, such as one entered by a user or read from a file.
            This constructor can accept any output created via the
            <see cref="M:GeoFramework.Distance.ToString">ToString</see> method.
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Parse method requires a valid distance measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">1. The numeric portion of the distance measurement was not recognized.<br/>
            2. The distance unit type was not recognized or not specified.</exception>
            <example>
            This example demonstrates how the to use this constructor.
            <code lang="VB">
            Dim MyDistance As Distance
            ' Create a distance of 50 kilometers
            MyDistance = New Distance("50 km")
            ' Create a distance of 14,387 miles, then convert it into inches
            MyDistance = New Distance("14,387 statute miles").ToInches
            ' Parse an untrimmed measurement into 50 feet
            MyDistance = New Distance("	50 '	   ")
            </code>
            <code lang="C#">
            Distance MyDistance;
            // Create a distance of 50 kilometers
            MyDistance = new Distance("50 km");
            // Create a distance of 14,387 miles, then convert it into inches
            MyDistance = new Distance("14,387 statute miles").ToInches;
            // Parse an untrimmed measurement into 50 feet
            MyDistance = new Distance("	50 '	   ");
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Distance.Equals(GeoFramework.Distance)">
            <summary>
            Compares the current instance to the specified distance object.
            </summary>
            <param name="value">A <strong>Distance</strong> object to compare with.</param>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
            <remarks>This method compares the current instance to the specified object up to four digits of precision.</remarks>
        </member>
        <member name="M:GeoFramework.Distance.Equals(GeoFramework.Distance,System.Int32)">
            <summary>
            Compares the current instance to the specified value, distance units, and precision.
            </summary>
            <param name="value">A <strong>Distance</strong> object to compare with.</param>
            <param name="decimals">An <strong>Integer</strong> specifying the number of digits to compare with.</param>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
            <remarks>This method compares the current instance to the specified object at up to the specified number of digits of precision.</remarks>
        </member>
        <member name="M:GeoFramework.Distance.Equals(System.Double,GeoFramework.DistanceUnit)">
            <summary>
            Compares the current instance to the specified value and distance units.
            </summary>
            <param name="value">A <strong>Double</strong> containing a value to compare.</param>
            <param name="units">A value from the <strong>DistanceUnit</strong> enumeration.</param>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
            <remarks>This method compares the current instance to the specified value at up to four digits of precision.</remarks>
        </member>
        <member name="M:GeoFramework.Distance.Equals(System.Double,GeoFramework.DistanceUnit,System.Int32)">
            <summary>
            Compares the current instance to the specified value, distance units, and precision.
            </summary>
            <param name="value">A <strong>Double</strong> containing a value to compare.</param>
            <param name="decimals">A value from the <strong>DistanceUnit</strong> enumeration.</param>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
            <remarks>This method compares the current instance to the specified value at up to the specified number of digits of precision.</remarks>
        </member>
        <member name="M:GeoFramework.Distance.Equals(System.Object)">
            <summary>
            Compares the current instance to the specified object.
            </summary>
            <param name="obj">An <strong>Object</strong> to compare with.</param>
            <returns>A <strong>Boolean</strong>, True if the values are equivalent.</returns>
        </member>
        <member name="M:GeoFramework.Distance.FromPixels(System.Double)">
            <summary>
            Returns a distance, in inches, matching the specified distance in pixels.
            </summary>
            <param name="pixels"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Distance.GetMinimumTravelTime(GeoFramework.Speed)">
            <summary>
            Returns the time required to travel the entire distance at the specified speed.
            </summary>
            <param name="speed">A <strong>Speed</strong> object representing a travel speed.</param>
            <returns>A <strong>TimeSpan</strong> object representing the total time required to travel the entire distance.</returns>
        </member>
        <member name="M:GeoFramework.Distance.GetMinimumTravelSpeed(System.TimeSpan)">
            <summary>
            Returns the speed required to travel the entire distance in the specified time.
            </summary>
            <param name="time">A <strong>TimeSpan</strong> object representing the time to travel the entire distance.</param>
            <returns>A <strong>Speed</strong> object representing the speed required to travel the distance in exactly the time specified.</returns>
        </member>
        <member name="M:GeoFramework.Distance.Parse(System.String)">
            <summary>Converts a string-based distance measurement into a Distance object.</summary>
            <remarks>
            This powerful constructor is typically used to convert a string-based distance
            measurement, such as one entered by a user or read from a file, into a
            <strong>Distance</strong> object. This method will accept any output created via the
            <see cref="M:GeoFramework.Distance.ToString">ToString</see> method.
            </remarks>
            <param name="value">
             <para>A <strong>String</strong> describing a case-insensitive distance measurement,
             in any of the following formats, where <strong>N</strong> represents a numeric
             value:</para>
            
             <list type="bullet">
            	 <item>N m</item>
            	 <item>N meters</item>
            	 <item>N meter</item>
            	 <item>N metre</item>
            	 <item>N metres</item>
            	 <item>N km</item>
            	 <item>N kilometers</item>
            	 <item>N kilometer</item>
            	 <item>N kilometre</item>
            	 <item>N kilometres</item>
            	 <item>N ft</item>
            	 <item>N'</item>
            	 <item>N foot</item>
            	 <item>N feet</item>
            	 <item>N in</item>
            	 <item>N"</item>
            	 <item>N inch</item>
            	 <item>N inches</item>
            	 <item>N mi</item>
            	 <item>N mile</item>
            	 <item>N miles</item>
            	 <item>N nm</item>
            	 <item>N nautical mile</item>
            	 <item>N nautical miles</item>
             </list>
            </param>
            <returns>
            A new Distance object containing the parsed <see cref="P:GeoFramework.Distance.Value">value</see> and
            <see cref="P:GeoFramework.Distance.Units">unit</see> type.
            </returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Parse method requires a valid distance measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">1. The numeric portion of the distance measurement was not recognized.<br/>
            2. The distance unit type was not recognized or not specified.</exception>
            <example>
            This example demonstrates how the Parse method can convert several string formats into a Distance object.
            <code lang="VB">
            Dim NewDistance As Distance
            ' Create a distance of 50 kilometers
            NewDistance = Distance.Parse("50 km")
            ' Create a distance of 14,387 miles, then convert it into inches
            NewDistance = Distance.Parse("14,387 statute miles").ToInches
            ' Parse an untrimmed measurement into 50 feet
            NewDistance = Distance.Parse("	50 '	   ")
            </code>
            <code lang="C#">
            Distance NewDistance;
            // Create a distance of 50 kilometers
            NewDistance = Distance.Parse("50 km");
            // Create a distance of 14,387 miles, then convert it into inches
            NewDistance = Distance.Parse("14,387 statute miles").ToInches;
            // Parse an untrimmed measurement into 50 feet
            NewDistance = Distance.Parse("	50 '	   ");
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Distance.ToFeet">
            <summary>Converts the current measurement into feet.</summary>
            <returns>A new <strong>Distance</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion into feet regardless of the current unit
            type. You may convert from any unit type to any unit type.
            </remarks>
            <seealso cref="M:GeoFramework.Distance.ToInches">ToInches Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToKilometers">ToKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToMeters">ToMeters Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToNauticalMiles">ToNauticalMiles Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToStatuteMiles">ToStatuteMiles Method</seealso>
            <example>
            This example converts various distances into feet.  Note that the ToFeet method converts distances
            from any source type.
            <code lang="VB">
            ' Create distances of different unit types
            Dim Distance1 As New Distance(10, DistanceUnit.Inches)
            Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
            Dim Distance3 As New Distance(50, DistanceUnit.Kilometers)
            ' Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToFeet.ToString)
            Debug.WriteLine(Distance2.ToFeet.ToString)
            Debug.WriteLine(Distance3.ToFeet.ToString)
            </code>
            <code lang="C#">
            // Create distances of different unit types
            Distance Distance1 = new Distance(10, DistanceUnit.Inches);
            Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
            Distance Distance3 = new Distance(50, DistanceUnit.Kilometers);
            // Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToFeet().ToString());
            Debug.WriteLine(Distance2.ToFeet().ToString());
            Debug.WriteLine(Distance3.ToFeet().ToString());
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Distance.ToInches">
            <summary>Converts the current measurement into inches.</summary>
            <returns>A new <strong>Distance</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion into feet regardless of the current unit
            type. You may convert from any unit type to any unit type.
            </remarks>
            <example>
            This example converts various distances into inches.  Note that the ToInches method converts distances
            from any source type.
            <code lang="VB">
            ' Create distances of different unit types
            Dim Distance1 As New Distance(10, DistanceUnit.Feet)
            Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
            Dim Distance3 As New Distance(50, DistanceUnit.Kilometers)
            ' Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToInches.ToString)
            Debug.WriteLine(Distance2.ToInches.ToString)
            Debug.WriteLine(Distance3.ToInches.ToString)
            </code>
            <code lang="C#">
            // Create distances of different unit types
            Distance Distance1 = new Distance(10, DistanceUnit.Feet);
            Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
            Distance Distance3 = new Distance(50, DistanceUnit.Kilometers);
            // Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToInches().ToString());
            Debug.WriteLine(Distance2.ToInches().ToString());
            Debug.WriteLine(Distance3.ToInches().ToString());
            </code>
            </example>
            <seealso cref="M:GeoFramework.Distance.ToFeet">ToFeet Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToKilometers">ToKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToMeters">ToMeters Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToNauticalMiles">ToNauticalMiles Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToStatuteMiles">ToStatuteMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Distance.ToKilometers">
            <returns>A new <strong>Distance</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion into feet regardless of the current unit
            type. You may convert from any unit type to any unit type.
            </remarks>
            <summary>Converts the current measurement into kilometers.</summary>
            <example>
            This example converts various distances into kilometers.  Note that the ToKilometers method converts 
            distances from any source type.
            <code lang="VB">
            ' Create distances of different unit types
            Dim Distance1 As New Distance(10, DistanceUnit.Feet)
            Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
            Dim Distance3 As New Distance(50, DistanceUnit.Inches)
            ' Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToKilometers.ToString)
            Debug.WriteLine(Distance2.ToKilometers.ToString)
            Debug.WriteLine(Distance3.ToKilometers.ToString)
            </code>
            <code lang="C#">
            // Create distances of different unit types
            Distance Distance1 = new Distance(10, DistanceUnit.Feet);
            Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
            Distance Distance3 = new Distance(50, DistanceUnit.Inches);
            // Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToKilometers().ToString());
            Debug.WriteLine(Distance2.ToKilometers().ToString());
            Debug.WriteLine(Distance3.ToKilometers().ToString());
            </code>
            </example>
            <seealso cref="M:GeoFramework.Distance.ToFeet">ToFeet Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToInches">ToInches Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToMeters">ToMeters Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToNauticalMiles">ToNauticalMiles Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToStatuteMiles">ToStatuteMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Distance.ToMeters">
            <returns>A new <strong>Distance</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion into feet regardless of the current unit
            type. You may convert from any unit type to any unit type.
            </remarks>
            <summary>Converts the current measurement into meters.</summary>
            <example>
            This example converts various distances into meters.  Note that the ToMeters method converts distances
            from any source type.
            <code lang="VB">
            ' Create distances of different unit types
            Dim Distance1 As New Distance(10, DistanceUnit.Feet)
            Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
            Dim Distance3 As New Distance(50, DistanceUnit.Inches)
            ' Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToMeters().ToString)
            Debug.WriteLine(Distance2.ToMeters().ToString)
            Debug.WriteLine(Distance3.ToMeters().ToString)
            </code>
            <code lang="C#">
            // Create distances of different unit types
            Distance Distance1 = new Distance(10, DistanceUnit.Feet);
            Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
            Distance Distance3 = new Distance(50, DistanceUnit.Inches);
            // Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToMeters().ToString());
            Debug.WriteLine(Distance2.ToMeters().ToString());
            Debug.WriteLine(Distance3.ToMeters().ToString());
            </code>
            </example>
            <seealso cref="M:GeoFramework.Distance.ToFeet">ToFeet Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToInches">ToInches Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToKilometers">ToKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToNauticalMiles">ToNauticalMiles Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToStatuteMiles">ToStatuteMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Distance.ToCentimeters">
            <returns>A new <strong>Distance</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion into feet regardless of the current unit
            type. You may convert from any unit type to any unit type.
            </remarks>
            <summary>Converts the current measurement into meters.</summary>
            <example>
            This example converts various distances into meters.  Note that the ToMeters method converts distances
            from any source type.
            <code lang="VB">
            ' Create distances of different unit types
            Dim Distance1 As New Distance(10, DistanceUnit.Feet)
            Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
            Dim Distance3 As New Distance(50, DistanceUnit.Inches)
            ' Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToMeters().ToString)
            Debug.WriteLine(Distance2.ToMeters().ToString)
            Debug.WriteLine(Distance3.ToMeters().ToString)
            </code>
            <code lang="C#">
            // Create distances of different unit types
            Distance Distance1 = new Distance(10, DistanceUnit.Feet);
            Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
            Distance Distance3 = new Distance(50, DistanceUnit.Inches);
            // Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToMeters().ToString());
            Debug.WriteLine(Distance2.ToMeters().ToString());
            Debug.WriteLine(Distance3.ToMeters().ToString());
            </code>
            </example>
            <seealso cref="M:GeoFramework.Distance.ToFeet">ToFeet Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToInches">ToInches Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToKilometers">ToKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToNauticalMiles">ToNauticalMiles Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToStatuteMiles">ToStatuteMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Distance.ToNauticalMiles">
            <returns>A new <strong>Distance</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion into feet regardless of the current unit
            type. You may convert from any unit type to any unit type.
            </remarks>
            <summary>Converts the current measurement into nautical miles.</summary>
            <example>
            This example converts various distances into nautical miles.  Note that the ToNauticalMiles method 
            converts distances from any source type.
            <code lang="VB">
            ' Create distances of different unit types
            Dim Distance1 As New Distance(10, DistanceUnit.Feet)
            Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
            Dim Distance3 As New Distance(50, DistanceUnit.Inches)
            ' Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToNauticalMiles.ToString)
            Debug.WriteLine(Distance2.ToNauticalMiles.ToString)
            Debug.WriteLine(Distance3.ToNauticalMiles.ToString)
            </code>
            <code lang="C#">
            // Create distances of different unit types
            Distance Distance1 = new Distance(10, DistanceUnit.Feet);
            Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
            Distance Distance3 = new Distance(50, DistanceUnit.Inches);
            // Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToNauticalMiles().ToString());
            Debug.WriteLine(Distance2.ToNauticalMiles().ToString());
            Debug.WriteLine(Distance3.ToNauticalMiles().ToString());
            </code>
            </example>
            <seealso cref="M:GeoFramework.Distance.ToFeet">ToFeet Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToInches">ToInches Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToKilometers">ToKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToMeters">ToMeters Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToStatuteMiles">ToStatuteMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Distance.ToStatuteMiles">
            <returns>A new <strong>Distance</strong> object containing the converted 
            value.</returns>
            <remarks>
            This method will perform a conversion into feet regardless of the current unit
            type. You may convert from any unit type to any unit type.
            </remarks>
            <summary>Converts the current measurement into miles.</summary>
            <example>
            This example converts various distances into statute miles.  Note that the ToStatuteMiles method 
            converts distances from any source type.
            <code lang="VB">
            ' Create distances of different unit types
            Dim Distance1 As New Distance(10, DistanceUnit.Feet)
            Dim Distance2 As New Distance(20, DistanceUnit.StatuteMiles)
            Dim Distance3 As New Distance(50, DistanceUnit.Inches)
            ' Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToStatuteMiles.ToString)
            Debug.WriteLine(Distance2.ToStatuteMiles.ToString)
            Debug.WriteLine(Distance3.ToStatuteMiles.ToString)
            </code>
            <code lang="C#">
            // Create distances of different unit types
            Distance Distance1 = new Distance(10, DistanceUnit.Feet);
            Distance Distance2 = new Distance(20, DistanceUnit.StatuteMiles);
            Distance Distance3 = new Distance(50, DistanceUnit.Inches);
            // Convert the distance measurements to feet and output the result 
            Debug.WriteLine(Distance1.ToStatuteMiles().ToString());
            Debug.WriteLine(Distance2.ToStatuteMiles().ToString());
            Debug.WriteLine(Distance3.ToStatuteMiles().ToString());
            </code>
            </example>
            <seealso cref="M:GeoFramework.Distance.ToFeet">ToFeet Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToInches">ToInches Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToKilometers">ToKilometers Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToMeters">ToMeters Method</seealso>
            <seealso cref="M:GeoFramework.Distance.ToNauticalMiles">ToNauticalMiles Method</seealso>
        </member>
        <member name="M:GeoFramework.Distance.ToImperialUnitType">
            <summary>
            Attempts to adjust the unit type to keep the value above 1 and uses the local region measurement system.
            </summary>
            <returns>A <strong>Distance</strong> converted to the chosen unit type.</returns>
            <remarks>When a distance becomes smaller, it may make more sense to the 
            user to be expressed in a smaller unit type.  For example, a distance of
            0.001 kilometers might be better expressed as 1 meter.  This method will
            determine the smallest Imperial unit type.</remarks>
        </member>
        <member name="M:GeoFramework.Distance.ToMetricUnitType">
            <summary>
            Attempts to adjust the unit type to keep the value above 1 and uses the local region measurement system.
            </summary>
            <returns>A <strong>Distance</strong> converted to the chosen unit type.</returns>
            <remarks>When a distance becomes smaller, it may make more sense to the 
            user to be expressed in a smaller unit type.  For example, a distance of
            0.001 kilometers might be better expressed as 1 meter.  This method will
            determine the smallest metric unit type.</remarks>
        </member>
        <member name="M:GeoFramework.Distance.ToLocalUnitType">
            <summary>
            Attempts to adjust the unit type to keep the value above 1 and uses the local region measurement system.
            </summary>
            <returns>A <strong>Distance</strong> converted to the chosen unit type.</returns>
            <remarks>When a distance becomes smaller, it may make more sense to the 
            user to be expressed in a smaller unit type.  For example, a distance of
            0.001 kilometers might be better expressed as 1 meter.  This method will
            find the smallest unit type and convert the unit to the user's local
            numeric system (Imperial or Metric).</remarks>
        </member>
        <member name="M:GeoFramework.Distance.ToString">
            <summary>
            Outputs the current instance as a string using the default format.
            </summary>
            <returns>A <strong>String</strong> containing the current distance in the default format.</returns>
            <remarks>The default format used is "##0.## uu" where <strong>uu</strong> is the distance unit type.
            The numeric format may vary depending on the machine's local culture.</remarks>
            <example>
            This example uses the ToString method to populate a TextBox with a distance measurement.
            <code lang="VB">
            ' Declare a distance of 75 miles
            Dim MyDistance As New Distance(75, DistanceUnit.StatuteMiles)
            ' Set the text box to the distance, formatted as a string
            MyTextBox.Text = MyDistance.ToString
            </code>
            <code lang="C#">
            // Declare a distance of 75 miles
            Distance MyDistance = new Distance(75, DistanceUnit.StatuteMiles);
            // Set the text box to the distance, formatted as a string
            MyTextBox.Text = MyDistance.ToString();
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Distance.ToString(System.String)">
            <summary>
            Outputs the current instance as a string using the specified format.
            </summary>
            <returns>A <strong>String</strong> containing the distance in the specified format.</returns>
            <param name="format">
             <para>A combination of symbols, spaces, and any of the following case-insensitive
             letters: <strong>#</strong> or <strong>0</strong> for the value property, and <strong>U</strong> for
             distance units. Here are some examples:</para>
            
             <para>
            	 <table cellspacing="0" cols="3" cellpadding="2" width="100%">
            			 <tr>
            				 <td>##0.## uu</td>
            				 <td>## uuuu</td>
            				 <td># u</td>
            				 <td>###</td>
            			 </tr>
            	 </table>
             </para>
            </param>
            <remarks>This method allows a custom format to be applied to the ToString method.  Numeric formats
            will be adjusted to the machine's local UI culture.</remarks>
            <example>
            This example uses the ToString method to populate a TextBox with a distance measurement using a custom format.
            <code lang="VB">
            ' Declare a distance of 75 miles
            Dim MyDistance As New Distance(75, DistanceUnit.StatuteMiles)
            ' Set the text box to the distance, formatted as a string
            MyTextBox.Text = MyDistance.ToString("## uuu")
            </code>
            <code lang="C#">
            // Declare a distance of 75 miles
            Distance MyDistance = new Distance(75, DistanceUnit.StatuteMiles);
            // Set the text box to the distance, formatted as a string
            MyTextBox.Text = MyDistance.ToString("## uuu");
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Distance.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the current instance as a string using the specified format and local culture.
            </summary>
            <returns>A <strong>String</strong> containing the distance in the specified format.</returns>
            <param name="format">
             <para>A combination of symbols, spaces, and any of the following case-insensitive
             letters: <strong>#</strong> or <strong>0</strong> for the value property, and <strong>U</strong> for
             distance units. Here are some examples:</para>
            
             <para>
            	 <table cellspacing="0" cols="3" cellpadding="2" width="100%">
            			 <tr>
            				 <td>##0.## uu</td>
            				 <td>## uuuu</td>
            				 <td># u</td>
            				 <td>###</td>
            			 </tr>
            	 </table>
             </para>
            </param>
            <param name="formatProvider">
            Information about the culture to apply to the numeric format.
            </param>
            <remarks>This method allows a custom format to be applied to the ToString method.  Numeric formats
            will be adjusted to the machine's local UI culture.</remarks>
            <example>
            This example uses the ToString method to populate a TextBox with a distance measurement using a custom format and culture information.
            <code lang="VB">
            ' Declare a distance of 75 miles
            Dim MyDistance As New Distance(75, DistanceUnit.StatuteMiles)
            ' Set the text box to the distance, formatted as a string
            MyTextBox.Text = MyDistance.ToString("## uuu", CultureInfo.CurrentUICulture)
            </code>
            <code lang="C#">
            // Declare a distance of 75 miles
            Distance MyDistance = new Distance(75, DistanceUnit.StatuteMiles);
            // Set the text box to the distance, formatted as a string
            MyTextBox.Text = MyDistance.ToString("## uuu", CultureInfo.CurrentUICulture);
            </code>
            </example>
        </member>
        <member name="P:GeoFramework.Distance.Units">
            <summary>Describes the unit portion of a distance measurement.</summary>
            <value>
            A value from the <see cref="T:GeoFramework.DistanceUnit">DistanceUnit</see> enumeration. Default 
            is <strong>DistanceUnit.Meters</strong>.
            </value>
            <remarks>
            <para>Each distance measurement is comprised of a numeric <see cref="P:GeoFramework.Distance.Value">value</see>
            and a unit type.  This property describes the numeric value so that it may be
            explicitly identified. An instance of the <strong>Distance</strong> class may have a value 
            of zero, but it is impossible to have an unspecified unit type.</para>
            
            <para><img src="BestPractice.jpg"/></para><para><strong>Use conversion methods instead of setting the
            Units property</strong></para>
            
            <para>When the Units property is changed, no conversion is performed on the
            Value property. This could lead to mathematical errors which are difficult to debug. Use
            conversion methods such as ToFeet or ToMeters instead.</para>
            
            <para>
            This example demonstrates poor programming when trying to add 100 feet to 100 meters
            by changing the Units property of the Distance2 object.
            <code lang="VB">
            ' Declare two distances
            Dim Distance1 As New Distance(50, DistanceUnit.Meters)
            Dim Distance2 As New Distance(100, DistanceUnit.Feet)
            ' Store their sum in another variable
            Dim Distance3 As New Distance(0, DistanceUnit.Meters)
            ' INCORRECT: Changing Units property does not convert Distance2!
            Distance2.Units = DistanceUnit.Meters
            Distance3.Value = Distance1.Value + Distance2.Value
            </code>
            <code lang="C#">
            // Declare two distances
            Distance Distance1 = new Distance(50, DistanceUnit.Meters);
            Distance Distance2 = new Distance(100, DistanceUnit.Feet);
            // Store their sum in another variable
            Distance Distance3 = new Distance(0, DistanceUnit.Meters);
            // INCORRECT: Changing Units property does not convert Distance2!
            Distance2.Units = DistanceUnit.Meters;
            Distance3.Value = Distance1.Value + Distance2.Value;
            </code>
            The correct technique is to use a conversion method to change the unit type instead
            of modifying the Units property.
            <code lang="VB">
            ' Declare two distances
            Dim Distance1 As New Distance(50, DistanceUnit.Meters)
            Dim Distance2 As New Distance(100, DistanceUnit.Feet)
            ' Store their sum in another variable
            Dim Distance3 As New Distance(0, DistanceUnit.Meters)
            ' CORRECT: The ToMeters method is used to standardize unit types
            Distance3.Value = Distance1.ToMeters().Value + Distance2.ToMeters().Value
            </code>
            <code lang="C#">
            // Declare two distances
            Distance Distance1 = new Distance(50, DistanceUnit.Meters);
            Distance Distance2 = new Distance(100, DistanceUnit.Feet);
            // Store their sum in another variable
            Distance Distance3 = new Distance(0, DistanceUnit.Meters);
            // CORRECT: The ToMeters method is used to standardize unit types
            Distance3.Value = Distance1.ToMeters().Value + Distance2.ToMeters().Value;
            </code>
            </para>
            </remarks>
            <seealso cref="P:GeoFramework.Distance.Value">Value Property</seealso>
        </member>
        <member name="P:GeoFramework.Distance.Value">
            <summary>Returns the numeric portion of a distance measurement.</summary>
            <value>A <strong>Double</strong> value.</value>
            <remarks>
            This property is paired with the <see cref="P:GeoFramework.Distance.Units">Units</see> property to form a complete distance
            measurement.  
            </remarks>
            <example>
            This example demonstrates how to use the Value property to modify a distance object.  The object 
            is then converted to kilometers.
            <code lang="VB">
            ' Declare a distance of 0 mi.
            Dim MyDistance As New Distance(0, DistanceUnit.StatuteMiles)
            ' Change the distance to 100 mi.
            MyDistance.Value = 100
            ' Change the distance to 12.3456 mi.
            MyDistance.Value = 12.3456
            ' Convert the measurement into kilometers
            MyDistance = MyDistance.ToKilometers
            </code>
            <code lang="C#">
            // Declare a distance of 0 mi.
            Distance MyDistance = new Distance(0, DistanceUnit.StatuteMiles);
            // Change the distance to 100 mi.
            MyDistance.Value = 100;
            // Change the distance to 12.3456 mi.
            MyDistance.Value = 12.3456;
            // Convert the measurement into kilometers
            MyDistance = MyDistance.ToKilometers;
            </code>
            </example>
            <seealso cref="P:GeoFramework.Distance.Units">Units Property</seealso>
        </member>
        <member name="T:GeoFramework.DistanceUnit">
            <summary>Indicates the unit of measure for distance measurements.</summary>
            <remarks>
            This enumeration is most frequently used by the
            <see cref="P:GeoFramework.Distance.Units">Units</see> property of the
            <see cref="T:GeoFramework.Distance">Distance</see>
            class in conjunction with the <see cref="P:GeoFramework.Distance.Value">Value</see>
            property to describe a straight-line distance.
            </remarks>
            <seealso cref="P:GeoFramework.Distance.Value">Value Property (Distance Class)</seealso>
            <seealso cref="P:GeoFramework.Distance.Units">Units Property (Distance Class)</seealso>
        </member>
        <member name="F:GeoFramework.DistanceUnit.Kilometers">
            <summary>Metric System. Kilometers (thousands of meters).</summary>
        </member>
        <member name="F:GeoFramework.DistanceUnit.Meters">
            <summary>Metric System. 1/1000th of a kilometer.</summary>
        </member>
        <member name="F:GeoFramework.DistanceUnit.Centimeters">
            <summary>Metric System. 1/100th of a meter.</summary>
        </member>
        <member name="F:GeoFramework.DistanceUnit.NauticalMiles">
            <summary>Nautical miles, also known as "sea miles".</summary>
        </member>
        <member name="F:GeoFramework.DistanceUnit.StatuteMiles">
            <summary>Imperial System. A statute mile, most often referred to just as "mile."</summary>
        </member>
        <member name="F:GeoFramework.DistanceUnit.Feet">
            <summary>Imperial System. Feet.</summary>
        </member>
        <member name="F:GeoFramework.DistanceUnit.Inches">
            <summary>Imperial System. Inches.</summary>
        </member>
        <member name="T:GeoFramework.DistanceEventArgs">
            <summary>Represents information about a distance when an distance-related event is raised.</summary>
            <remarks>This class is typically used for events in the <see cref="P:GeoFramework.DistanceEventArgs.Distance">Distance</see> class to 
            provide notification when hours, minutes, decimal minutes or seconds properties have changed.</remarks>
            <example>This example demonstrates how to use this class when raising an event.
            <code lang="VB">
            ' Declare a new event
            Dim MyDistanceEvent As DistanceEventHandler
            ' Create a distance of 125 kilometers
            Dim MyDistance As New Distance(125, DistanceUnit.Kilometers)
            
            Sub Main()
              ' Raise our custom event
              RaiseEvent MyDistanceEvent(Me, New DistanceEventArgs(MyDistance))
            End Sub
            </code>
            <code lang="C#">
            // Declare a new event
            DistanceEventHandler MyDistanceEvent;
            // Create a distance of 125 kilometers
            Distance MyDistance = new Distance(125, DistanceUnit.Kilometers);
            
            void Main()
            {
              // Raise our custom event
              MyDistanceEvent(this, New DistanceEventArgs(MyDistance));
            }
            </code>
            </example>
            <seealso cref="P:GeoFramework.DistanceEventArgs.Distance">Distance Class</seealso>
            <seealso cref="T:GeoFramework.DistanceEventHandler">DistanceEventHandler Delegate</seealso>
        </member>
        <member name="M:GeoFramework.DistanceEventArgs.#ctor(GeoFramework.Distance)">
            <summary>
            Creates a new instance containing the specified Distance object.
            </summary>
        </member>
        <member name="P:GeoFramework.DistanceEventArgs.Distance">
            <summary>
            Represents information about a distance measurement when an distance-related event is raised.
            </summary>
            <value>A <strong>Distance</strong> object containing a property which has changed.</value>
            <remarks>This class is used by the <see cref="P:GeoFramework.DistanceEventArgs.Distance">Distance</see> class to provide notification 
            when hours, minutes, or seconds properties have changed.</remarks>
            <seealso cref="P:GeoFramework.DistanceEventArgs.Distance">Distance Class</seealso>
        </member>
        <member name="T:GeoFramework.DistanceEventHandler">
            <summary>
            Facilitates events and asynchronous calls which use an <strong>Distance</strong>
            object as a parameter.
            </summary>
            <example>
            This example declares a custom event using this delegate.
            <code lang="VB">
            Dim MyDistanceEvent As DistanceEventHandler
            </code>
            <code lang="C#">
            DistanceEventHandler MyDistanceEvent;
            </code>
            </example>
            <param name="sender">The object which initiated the call to the delegate.</param>
            <param name="e">A <see cref="T:GeoFramework.DistanceEventArgs">DistanceEventArgs</see> object containing a <see cref="T:GeoFramework.Distance">Distance</see> involved in the event.</param>
        </member>
        <member name="T:GeoFramework.Controls.DoubleBufferedControl">
            <summary>
            Represents a base class for designing flicker-free, multithreaded user
            controls.
            </summary>
            <remarks>
            	<para>This powerful and versatile class provides a framework upon which to create
                high-performance owner-drawn controls. Common rendering challenges such as
                multithreading, thread synchronization, double-buffering, performance tuning,
                platform tuning and animation are all handled by this class.</para>
            	<para>Controls which inherit from this class perform all paint operations by
                overriding the <strong>OnPaintOffScreen</strong> method, and optionally the
                <strong>OnPaintOffScreenBackground</strong> and
                <strong>OnPaintOffScreenAdornments</strong> methods. Controls which demand higher
                performance should perform all rendering on a separate thread. This is done by
                setting the <strong>IsPaintingOnSeparateThread</strong> property to
                <strong>True</strong>. Since the actual painting of the control is handled by this
                class, the <strong>OnPaint</strong> method should not be overridden.</para>
            	<para>When all off-screen paint operations have completed, this class will copy the
                contents of the off-screen bitmap to the on-screen bitmap which is visibly
                displayed on the control. By deferring all rendering operations to another thread,
                the user interface remains very responsive even during time-consuming paint
                operations.</para>
            	<para>Performance tuning is another major feature of this class. The
                <strong>OptimizationMode</strong> property gives developers the ability to tune
                rendering performance for animation speed, rendering quality, low CPU usage, or a
                balance between all three.</para>
            	<para>While thread synchronization has been implemented wherever possible in this
                class, and the class is almost entirely thread-safe, some care should be taken when
                accessing base <strong>Control</strong> properties from a separate thread. Even
                basic properties like <strong>Visible</strong> can fail, especially on the Compact
                Framework. For minimal threading issues, avoid reading control properties during
                paint events.</para>
            	<para>This class has been tuned to deliver the best performance on all versions of
                the .NET Framework (1.0, 1.1 and 2.0) as well as the .NET Compact Framework (1.0
                and 2.0). Compatibility is also managed internally, which simplifies the process of
                porting controls to the Compact Framework.</para>
            </remarks>
            <example>
                This example demonstrates how little code is required to use features like
                double-buffering and multithreading. <strong>IsPaintingOnSeparateThread</strong>
                enables multithreading, and all paint operations take place in the
                <strong>OnPaintOffScreen</strong> method instead of <strong>OnPaint</strong>. To
                prevent memory leaks, all GDI objects are disposed of during the
                <strong>Dispose</strong> method.
                <code lang="VB" title="[New Example]">
            Public Class MyControl 
                Inherits DoubleBufferedControl
                Dim MyBrush As New SolidBrush(Color.Blue)
                
                Sub New()
                    IsPaintingOnSeparateThread = True
                End Sub
                
                Protected Overrides Sub OnPaintOffScreen(ByVal e As CancelablePaintEventArgs)
                    e.Graphics.FillRectangle(MyBrush, New Rectangle(50, 50, 50, 50))
                End Sub
                
                Public Overrides Sub Dispose(ByVal disposing As Boolean)
                    MyBrush.Dispose()
                End Sub
            End Class
                </code>
            	<code lang="CS" title="[New Example]">
            public class MyControl : DoubleBufferedControl
            {
                SolidBrush MyBrush = new SolidBrush(Color.Blue);
                
                MyControl()
                {
                    IsPaintingOnSeparateThread = true;
                }
             
                protected override void OnPaintOffScreen(CancelablePaintEventArgs e)
                {
                    e.Graphics.FillRectangle(MyBrush, New Rectangle(50, 50, 50, 50));
                }
                
                public override void Dispose(bool disposing)
                {
                    MyBrush.Dispose();
                }
            }
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.Controls.DoubleBufferedControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:GeoFramework.Controls.DoubleBufferedControl.#ctor">
            <summary>Creates a new instance.</summary>
        </member>
        <member name="M:GeoFramework.Controls.DoubleBufferedControl.#ctor(System.String)">
            <summary>Creates a new instance using the specified thread name.</summary>
            <param name="threadName">
            The name associated with the rendering thread when rendering is multithreaded.
            This name appears in the Output window when the thread exits and can be useful during
            debugging. The name should also contain a company or support URL.
            </param>
        </member>
        <member name="M:GeoFramework.Controls.DoubleBufferedControl.OnPaintException(System.Exception)">
            <summary>Occurs when an exception occurs during a multithreaded paint operation.</summary>
            <remarks>
            	<para>Exceptions caught during rendering iterations are channeled through this
                method instead of being re-thrown. This allows developers the ability to silently
                handle rendering problems without letting them interrupt the user interface. This
                method invokes the <strong>ExceptionOccurred</strong> event.</para>
            </remarks>
            <example>
                This example demonstrates how to be notified of rendering failures using the
                <strong>OnPaintException</strong> method. 
                <code lang="VB" title="[New Example]">
            Public Class MyControl 
                Inherits DoubleBufferedControl
                
                Protected Overrides Sub OnPaintOffScreen(ByVal e As CancelablePaintEventArgs)
                    ' Cause an error by using a null pen
                    e.Graphics.DrawRectangle(Nothing, Rectangle.Empty)
                End Sub
                
                Protected Overrides Sub OnPaintException(ByVal e As ExceptionEventArgs)
                    Throw e.Exception
                End Sub
            End Class
                </code>
            	<code lang="CS" title="[New Example]">
            public class MyControl : DoubleBufferedControl
            {
                protected override void OnPaintOffScreen(CancelablePaintEventArgs e)
                {
                    // Cause an error by using a null pen
                    e.Graphics.DrawRectangle(null, Rectangle.Empty);
                }
                
                protected override void OnPaintException(ExceptionEventArgs e)
                {
                    throw e.Exception;
                }
            }
                </code>
            </example>
            <param name="exception">An <strong>Exception</strong> object describing the rendering error.</param>
        </member>
        <member name="M:GeoFramework.Controls.DoubleBufferedControl.InvokeRefresh">
            <summary>Causes the control to be repainted.</summary>
            <remarks>
            	<para>This method profives a thread-safe way to refresh the control. A call to the
                <strong>Refresh</strong> method is marshalled to the control's own thread. This
                method is called internally when an off-screen painting operation has completed.
                Since this class manages the task of repainting the control and the latest
                off-screen bitmap is rendered as soon as possible, it is typically not necessary to
                call this method.</para>
            </remarks>
            <example>
            An example was excluded because <strong>InvokeRefresh</strong> and
            <strong>Refresh</strong> are not necessary when using this class.
            </example>
        </member>
        <member name="M:GeoFramework.Controls.DoubleBufferedControl.InvokePaintOffScreen">
            <summary>Causes the control to be repainted off-screen.</summary>
            <remarks>
            	<para>This method makes a new request to repaint the control off-screen. If a
                separate rendering thread is not used, the control is repainted and redrawn. If
                rendering on a separate thread, the request is queued and this method returns
                immedately.</para>
            	<para>For multithreaded repainting, this method produces the same result as calling
                <strong>InvokePaintOffScreen</strong> because all repaint requests are queued
                instead of executed immediately.</para>
            	<para>This method should be called in place of the <strong>Invalidate</strong>
                method.</para>
            </remarks>
            <example>
                This example causes a control to repaint off-screen. 
                <code lang="VB" title="[New Example]">
            ' Has any data changed?
            If DataHasChanged Then
                ' Yes.  Tell the control to repaint
                MyControl.InvokePaintOffScreen()
            End If
                </code>
            	<code lang="CS" title="[New Example]">
            	</code>
            </example>
        </member>
        <member name="M:GeoFramework.Controls.DoubleBufferedControl.BeginInvokePaintOffScreen">
            <summary>Causes an asynchronous request to repaint the control off-screen.</summary>
            <remarks>
            	<para>This method makes a new request to repaint the control off-screen. If a
                separate rendering thread is not used, the control is repainted and redrawn. If
                rendering on a separate thread, the request is queued and this method returns
                immedately.</para>
            	<para>For multithreaded repainting, this method produces the same result as calling
                <strong>InvokePaintOffScreen</strong> because all repaint requests are queued
                instead of executed immediately.</para>
            	<para>This method should be called in place of the <strong>Invalidate</strong>
                method.</para>
            </remarks>
            <example>
                This example causes a control to repaint off-screen. 
                <code lang="VB" title="[New Example]">
            ' Has any data changed?
            If DataHasChanged Then
                ' Yes.  Tell the control to repaint
                MyControl.InvokePaintOffScreen()
            End If
                </code>
            	<code lang="CS" title="[New Example]">
            	</code>
            </example>
        </member>
        <member name="M:GeoFramework.Controls.DoubleBufferedControl.OnTargetFrameRateChanged(System.Int32)">
            <summary>Occurs when the desired frame rate has changed.</summary>
            <remarks>
            This virtual method is called whenever the <strong>TargetFrameRate</strong>
            property has changed. This method gives controls the opportunity to adjust animation
            effects to achieve the frame rate as closely as possible.
            </remarks>
            <param name="framesPerSecond">
            An <strong>Integer</strong> specifying the ideal or desired frame rate for the
            control.
            </param>
        </member>
        <member name="M:GeoFramework.Controls.DoubleBufferedControl.OnOptimizationModeChanged(GeoFramework.Controls.ControlOptimizationMode)">
            <summary>Occurs when the optimization mode has changed.</summary>
            <remarks>
            This virtual method gives control the opportunity to enable or disable features
            that affect rendering performance. This method is called whenever the
            <strong>OptimizationMode</strong> property has changed.
            </remarks>
            <param name="optimizationMode">
            A <strong>ControlOptimizationMode</strong> specifying the rendering goal for the
            control.
            </param>
        </member>
        <member name="M:GeoFramework.Controls.DoubleBufferedControl.OnPaintOffScreen(GeoFramework.Controls.CancelablePaintEventArgs)">
            <summary>Performs all major painting operations for the control.</summary>
            <remarks>
            	<para>This method must be overridden. All painting operations for the control take
                place during this method. After this method completes, the
                <strong>OnPaintOffScreenAdornments</strong> method is called. When all painting
                operations have completed, the task of repainting the control visually takes place
                automatically.</para>
            	<para>Developers seeking to upgrade their existing controls to use this control
                must move all code from <strong>OnPaint</strong> into
                <strong>OnPaintOffScreen</strong>. For best performance, the
                <strong>OnPaint</strong> method would not be overridden at all.</para>
            </remarks>
            <param name="e">
            A <strong>CancelablePaintEventArgs</strong> object used for all painting
            operations, as well as to signal when a rendering iteration has been aborted.
            </param>
        </member>
        <member name="M:GeoFramework.Controls.DoubleBufferedControl.OnPaintOffScreenBackground(GeoFramework.Controls.CancelablePaintEventArgs)">
            <summary>
            Optional. Performs painting operations which draw the control's
            background.
            </summary>
            <remarks>
            	<para>This method provides the ability to prepare the background of the control
                before major painting operations take place. By default, this method calls the
                <strong>Graphics.Clear</strong> method to erase the control to the background
                color.</para>
            	<para>This method can be overridden to perform certain visual effects. For example,
                the <strong>PolarControl</strong> class, which inherits from this class, uses this
                method to apply a fading circular gradient to create a 3D illusion. Then, the
                <strong>OnPaintOffScreenAdornments</strong> method is also overridden to apply a
                second effect which gives the appearance of glass over the control. For more
                information on glass effects, see the <strong>Effect</strong> property of the
                <strong>PolarControl</strong> class.</para>
            </remarks>
            <param name="e">
            A <strong>CancelablePaintEventArgs</strong> object used for all painting
            operations, as well as to signal when a rendering iteration has been aborted.
            </param>
        </member>
        <member name="M:GeoFramework.Controls.DoubleBufferedControl.OnPaintOffScreenAdornments(GeoFramework.Controls.CancelablePaintEventArgs)">
            <summary>
            Optional. Performs any additional painting operations after the main portions of
            the control are painted.
            </summary>
            <remarks>
            By default, this method does nothing. This method can be overridden to apply
            certain details, however, such as a watermark, company logo, or glass. For example, the
            <strong>PolarControl</strong> class overrides this method to apply a glass effect on
            top of anything that has already been painted. For more information on glass effects,
            see the <strong>Effect</strong> property of the <strong>PolarControl</strong>
            class.
            </remarks>
            <param name="e">
            A <strong>CancelablePaintEventArgs</strong> object used for all painting
            operations, as well as to signal when a rendering iteration has been aborted.
            </param>
        </member>
        <member name="M:GeoFramework.Controls.DoubleBufferedControl.OnInitialize">
            <summary>
            Occurs when the control is about to be rendered for the first time.
            </summary>
            <remarks>
            	<para>This virtual method provides the ability to prepare any local variables
                before the control is painted for the first time. This method is typically used to
                create GDI objects such as <strong>Pen</strong>, <strong>Brush</strong>, and
                <strong>Font</strong> immediately before they are needed. It is recommended that
                this event be used to create any such GDI objects. Additionally, it is also
                recommended that GDI objects get created outside of the
                <strong>OnPaintOffScreen</strong> method if they are used repeatedly.</para>
            	<para>For desktop framework applications, this method is called when the control's
                handle is created. For Compact Framework 1.0 applications, there is no handle
                creation event, so this method is called when the first call to
                <strong>OnPaint</strong> occurs.</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.Controls.DoubleBufferedControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>Occurs when the control is to be redrawn on-screen.</summary>
            <remarks>
            	<para>In the <strong>DoubleBufferedControl</strong> class, the process of painting
                the control on-screen is handled automatically. As a result, this method does not
                have to be overloaded to paint the control. In fact, this method should not be
                overridden to perform any painting operations because it would defeat the purpose
                of the control and re-introduce flickering problems.</para>
            	<para>Ideally, well-written controls will move any and all painting operations from
                the <strong>OnPaint</strong> method into the <strong>OnPaintOffScreen</strong>
                method, and avoid overriding <strong>OnPaint</strong> entirely. By keeping the
                <strong>OnPaint</strong> method as lightweight as possible, user interfaces remain
                responsive and free from flickering problems.</para>
            </remarks>
            <example>
            	<para>This example demonstrates how a user control is upgraded from Control to the
                <strong>DoubleBufferedControl</strong> class. Upgrading is straightforward: All
                painting operations are moved from <strong>OnPaint</strong> to
                <strong>OnPaintOffScreen</strong> and <strong>OnPaint</strong> is no longer
                overridden.</para>
            	<code lang="VB" title="[New Example]" description="Before: A control's paint operations before being upgraded to use the DoubleBufferedControl class.">
            Public Class MyControl 
                Inherits Control
                Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
                    Dim MyBrush As New SolidBrush(Color.Blue)
                    e.Graphics.FillRectangle(MyBrush, New Rectangle(50, 50, 50, 50))
                    MyBrush.Dispose();
                End Sub
            End Class
                </code>
            	<code lang="CS" title="[New Example]" description="Before: A control's paint operations before being upgraded to use the DoubleBufferedControl class.">
            public class MyControl : Control
            {
                protected override void OnPaint(PaintEventArgs e)
                {
                    SolidBrush MyBrush = new SolidBrush(Color.Blue);
                    e.Graphics.FillRectangle(MyBrush, new Rectangle(50, 50, 50, 50));
                    MyBrush.Dispose();
                }
            }
                </code>
            	<code lang="VB" title="[New Example]" description="After: A control's paint operations after upgrading to DoubleBufferedControl.">
            Public Class MyControl 
                Inherits DoubleBufferedControl
                Protected Overrides Sub OnPaintOffScreen(ByVal e As CancelablePaintEventArgs)
                    Dim MyBrush As New SolidBrush(Color.Blue)
                    e.Graphics.FillRectangle(MyBrush, New Rectangle(50, 50, 50, 50))
                    MyBrush.Dispose();
                End Sub
            End Class
                </code>
            	<code lang="CS" title="[New Example]">
            public class MyControl : DoubleBufferedControl
            {
                protected override void OnPaintOffScreen(CancelablePaintEventArgs e)
                {
                    SolidBrush MyBrush = new SolidBrush(Color.Blue);
                    e.Graphics.FillRectangle(MyBrush, new Rectangle(50, 50, 50, 50));
                    MyBrush.Dispose();
                }
            }
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Controls.DoubleBufferedControl.Dispose(System.Boolean)">
            <summary>Releases memory and GDI resources created by the control.</summary>
            <remarks>
            	<para>This method is very important to implement properly when working with
                controls. Any <strong>Brush</strong>, <strong>Pen</strong>, <strong>Font</strong>,
                <strong>Matrix</strong>, <strong>GraphicsPath</strong>, <strong>Region</strong> or
                other GDI+ object containing a <strong>Dispose</strong> method must be disposed of
                before they are destructed by the garbage collector.</para>
            	<para>Well-written controls will create unmanaged GDI+ objects outside of the
                <strong>OnPaintOffScreen</strong> method, then dispose of them during the
                <strong>Dispose</strong> method. This practice improves performance by creating as
                new new objects and resources as possible while minimizing problems which may occur
                due to resources which are not properly released.</para>
            	<para>Failure to call the <strong>Dispose</strong> method on GDI+ objects will
                cause memory leaks which will slowly eat up available memory until the application
                can no longer function. Use the "GDI Objects" column of the Windows Task Manager to
                monitor the number of GDI objects allocated. Memory leaks will cause the GDI Object
                count to increase continuously, whereas well-written controls will experience a GDI
                Object count that remains fairly constant over a longer period of time.</para>
            	<para>To view the GDI Objects column in the Windows Task Manager:</para>
            	<para class="xmldocnumberedlist"></para>
            	<list type="bullet">
            		<item>Open the Windows Task Manager</item>
            		<item>Select the "Processes" tab.</item>
            		<item>Select "Choose Columns..." from the View menu.</item>
            		<item>Check the "GDI Objects" box and click OK.</item>
            	</list>
            </remarks>
            <example>
                This example demonstrates how a control might create subtle problems when the
                <strong>Dispose</strong> method is not used on every GDI+ object. 
                <code lang="VB" title="[New Example]" description="An example of a poorly written control: A new SolidBrush is created on every paint iteration when it only needs to be created once. The brush is never disposed of, creating a memory leak.">
            Public Class MyControl 
                Inherits DoubleBufferedControl
                Protected Overrides Sub OnPaintOffScreen(ByVal e As CancelablePaintEventArgs)
                    Dim MyBrush As New SolidBrush(Color.Blue)
                    e.Graphics.FillRectangle(MyBrush, New Rectangle(50, 50, 50, 50))
                End Sub
                
                ' NOTE: MyBrush is never disposed.  A memory leak
                ' will occur!
            End Class
                </code>
            	<code lang="CS" title="[New Example]" description="An example of a poorly written control: A new SolidBrush is created on every paint iteration when it only needs to be created once. The brush is never disposed of, creating a memory leak.">
            public class MyControl : DoubleBufferedControl
            {
                protected override void OnPaintOffScreen(CancelablePaintEventArgs e)
                {
                    SolidBrush MyBrush = new SolidBrush(Color.Blue);
                    e.Graphics.FillRectangle(MyBrush, New Rectangle(50, 50, 50, 50));
                }
                
                // NOTE: MyBrush is never disposed.  A memory leak
                // will occur!
            }
                </code>
            	<code lang="VB" title="[New Example]" description="Problems are solved by properly implementing the Dispose method. Performance is improved by moving the SolidBrush declaration out of OnPaintOffScreen.">
            Public Class MyControl 
                Inherits DoubleBufferedControl
                ' 1. GDI objects are created outside of the OnPaintOffScreen
                '    methods whenever possible.
                Dim MyBrush As New SolidBrush(Color.Blue)
                
                Protected Overrides Sub OnPaintOffScreen(ByVal e As CancelablePaintEventArgs)
                    ' 2. The paint method is as lightweight as possible,
                    '    improving rendering performance
                    e.Graphics.FillRectangle(MyBrush, New Rectangle(50, 50, 50, 50))
                End Sub
                
                Public Overrides Sub Dispose(ByVal disposing As Boolean)
                    ' 3. Any GDI+ objects are disposed of properly    
                    MyBrush.Dispose()
                End Sub
            End Class
                </code>
            	<code lang="CS" title="[New Example]" description="Problems are solved by properly implementing the Dispose method. Performance is improved by moving the SolidBrush declaration out of OnPaintOffScreen.">
            public class MyControl : DoubleBufferedControl
            {
                // 1. GDI objects are created outside of the OnPaintOffScreen
                //    methods whenever possible.
                SolidBrush MyBrush = new SolidBrush(Color.Blue);
                
                protected override void OnPaintOffScreen(CancelablePaintEventArgs e)
                {
                    // 2. The paint method is as lightweight as possible,
                    //    improving rendering performance
                    e.Graphics.FillRectangle(MyBrush, New Rectangle(50, 50, 50, 50));
                }
                
                public override void Dispose(bool disposing)
                {
                    // 3. Any GDI+ objects are disposed of properly    
                    MyBrush.Dispose();
                }
            }
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Controls.DoubleBufferedControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:GeoFramework.Controls.DoubleBufferedControl.ExceptionOccurred">
            <summary>Occurs when an exception is thrown during off-screen painting operations.</summary>
            <remarks>
            	<para>When the control is rendering on a separate thread, exceptions cannot be
                caught by a regular <strong>Try..Catch</strong> statement. Exceptions are instead
                channeled through this event. The control will also attempt to display exception
                information on-screen to inform developers of the code which failed.</para>
            	<para>It is important to capture this event or override the
                <strong>OnPaintException</strong> method in order to be properly notified of
                problems. Without doing this, the control could fail to paint properly yet give no
                indication that there is a problem.</para>
            </remarks>
            <example>
                This example hooks into the <strong>ExceptionOccurred</strong> event of a control
                in order to handle painting exceptions. 
                <code lang="VB" title="[New Example]">
            Public Class MyControl
                Inherits DoubleBufferedControl
                
                Sub New()
                    ' Receive notifications of paint problems
                    AddHandler ExceptionOccurred, AddressOf HandleExceptions
                End Sub
                
                Protected Overrides Sub OnPaintOffScreen(ByVal e As CancelablePaintEventArgs)
                    ' Try to paint with a null Pen
                    e.Graphics.DrawRectangle(Nothing, Rectangle.Empty)
                End Sub
                
                Private Sub HandleExceptions(ByVal sender As Object, ByVal e As ExceptionEventArgs)
                    ' Write the error to the Debug window
                    Debug.WriteLine(e.Exception.ToString())
                End Sub
            End Class
                </code>
            	<code lang="CS" title="[New Example]">
            public class MyControl : DoubleBufferedControl
            {   
                MyControl()
                {
                    // Receive notifications of paint problems
                    ExceptionOccurred += new ExceptionEventHandler(HandleExceptions);
                }
                
                protected override void OnPaintOffScreen(CancelablePaintEventArgs e)
                {
                    // Try to paint with a null Pen. 
                    e.Graphics.DrawRectangle(null, Rectangle.Empty);
                }
                
                private sub HandleExceptions(object sender, ExceptionEventArgs e)
                {
                    // Write the error to the Console
                    Console.WriteLine(e.Exception.ToString());
                }
            }
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.IsPaintingAborted">
            <summary>Indicates if the current rendering iteration has been cancelled.</summary>
            <value>
            A <strong>Boolean</strong>, <strong>True</strong> if the current rendering
            iteration has been cancelled.
            </value>
            <remarks>
            	<para>When rendering on a separate thread, a new request to render the control may
                occur while a rendering iteration is still in progress. This property indicates
                that the current rendering iteration should be cancelled so that the next one may
                begin. Each control, however, may decide whether or not to abort a rendering
                iteration. This property is always <strong>False</strong> when rendering does not
                take place on a separate thread.</para>
            	<para>If a control decides to abort a rendering iteration, it must set the
                <strong>IsCancelled</strong> property of the
                <strong>CancelablePaintEventArgs</strong> object to <strong>True</strong> during
                the <strong>OnPaintOffScreen</strong> method.</para>
            </remarks>
            <example>
                This example demonstrates how a control might choose to abort rendering if a new
                rendering request is made. 
                <code lang="VB" title="[New Example]">
            Public Class MyControl 
                Inherits DoubleBufferedControl
             
                Protected Overrides Sub OnPaintOffScreen(ByVal e As CancelablePaintEventArgs)
                    ' Do some rendering
                    ' ...
                    
                    ' Check if rendering is aborted before doing an
                    ' intense operation such as a loop
                    If IsPaintingAborted Then
                        e.IsCancelled = True
                        Exit Sub
                    End If
                      
                    ' Continue rendering normally    
                    ' ...
                End Sub
            End Class
                </code>
            	<code lang="CS" title="[New Example]">
            public class MyControl : DoubleBufferedControl
            {
                protected override void OnPaintOffScreen(CancelablePaintEventArgs e)
                {
                    // Do some rendering
                    // ...
                    
                    // Check if rendering is aborted before doing an
                    // intense operation such as a loop
                    if(IsPaintingAborted)
                    {
                        e.IsCancelled = true;
                        return;
                    }
                      
                    // Continue rendering normally    
                    // ...
                }
            }
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.IsInitialized">
            <summary>Indicates if the control has been initialized.</summary>
        </member>
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.IsPaintingOnSeparateThread">
            <summary>
            Indicates if all off-screen rendering takes place on a separate thread.
            </summary>
            <remarks>
            	<para>This powerful property controls whether or not rendering operations are
                multithreaded. When set to <strong>True</strong>, a new thread is launched and all
                subsequent calls to <strong>OnPaintOffScreen</strong>,
                <strong>OnPaintOffScreenBackground</strong> and
                <strong>OnPaintOffScreenAdornments</strong> occur on that thread. Thread
                synchronization features are enabled so that painting operations never interfere
                with rendering operations. The priority of the rendering thread is controlled via
                the <strong>ThreadPriority</strong> property.</para>
            	<para>When this property is <strong>False</strong>, the rendering thread is torn
                down and all rendering occurs on the owner's thread. Controls which perform
                significant painting operations should enable this property to allow the user
                interface to be more responsive. As a general rule, any intense processing should
                be moved away from the user interface thread.</para>
            </remarks>
            <example>
                This example instructs the control to perform all rendering on a separate thread.
                Note that all thread management is handled automatically -- the only operation
                required is enabling the property. 
                <code lang="VB" title="[New Example]">
            Public Class MyControl 
                Inherits DoubleBufferedControl
                
                Sub New()
                    ' Enable multithreading
                    IsPaintingOnSeparateThread = True
                End Sub
                
                ' This method is now called from another thread
                Protected Overrides Sub OnPaintOffScreen(ByVal e As CancelablePaintEventArgs)
                    Dim MyBrush As New SolidBrush(Color.Blue)
                    e.Graphics.FillRectangle(MyBrush, New Rectangle(50, 50, 50, 50))
                    MyBrush.Dispose()
                End Sub
            End Class
                </code>
            	<code lang="CS" title="[New Example]">
            public class MyControl : DoubleBufferedControl
            {    
                MyControl()
                {
                    // Enable multithreading
                    IsPaintingOnSeparateThread = true;
                }
                
                // This method is now called from another thread
                protected overrides void OnPaintOffScreen(CancelablePaintEventArgs e)
                {
                    SolidBrush MyBrush = new SolidBrush(Color.Blue);
                    e.Graphics.FillRectangle(MyBrush, new Rectangle(50, 50, 50, 50));
                    MyBrush.Dispose();
                }
            }
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.OffScreenBitmapSize">
            <summary>
            Returns the size of the off-screen bitmap.
            </summary>
            <remarks>
            	<para>This property allows a control to paint a bitmap that is larger or smaller
                than the visible size of the control. For most situations, this property is not
                overridden and the size of the off-screen bitmap is the same as the size of the
                on-screen bitmap.</para>
            	<para>More advanced controls such as GIS.NET's mapping control uses this size to
                render the entire map whever possible in order to speed up panning
                operations.</para>
            </remarks>
            <value>
            A <strong>Size</strong> structure indicating the size of the off-screen bitmap.
            Default is the same as the controls own size.
            </value>
        </member>
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.OffScreenBitmapOffset">
            <summary>
            Controls the upper-left portion of the off-screen bitmap to paint
            on-screen.
            </summary>
            <value>
            A <strong>Point</strong> structure indicating the corner of the off-screen bitmap
            to draw on-screen. Default is <strong>Empty</strong>.
            </value>
            <remarks>
            	<para>If the size of the off-screen bitmap is different than the on-screen bitmap,
                a control may need to draw different portions of the off-screen bitmap. For
                example, if an off-screen bitmap is 200x200 pixels but the visible portion of the
                control is only 50x50 pixels, an offset of (10,10) instructs the control to paint
                the off-screen bitmap from (10,10)-(60,60).</para>
            	<para>for most controls, this property does not need to be overridden. Controls
                which override this property also override the <strong>OffScreenBitmapSize</strong>
                property to specify a size defferent than the visible portion of the
                control.</para>
            </remarks>
        </member>
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.OffScreenBitmap">
            <summary>Returns the bitmap used for off-screen painting operations.</summary>
            <value>A <strong>Bitmap</strong> containing off-screen painted data.</value>
            <remarks>
            	<para>This control maintains two separate bitmaps: an "off-screen" bitmap, where
                all painting operations take place, and an "on-screen" bitmap which is displayed
                visually to the user. When an off-screen painting operation completes successfully,
                the off-screen bitmap is copies to the on-screen bitmap, then painted on the
                display. This property returns the off-screen bitmap created during the most recent
                paint iteration.</para>
            </remarks>
        </member>
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.ThreadPriority">
            <summary>Controls the relative priority of multithreaded painting operations.</summary>
            <value>
            A <strong>ThreadPriority</strong> value. Default is
            <strong>Normal</strong>.
            </value>
            <remarks>
            Painting operations may require more CPU time if they represent the majority of
            a user interface, or if painting operations are more complicated. Performance can be
            improved by increasing the priority of the rendering thread. Likewise, if a control is
            of minor importance to an application, a lower thread priority can improve performance
            in more important areas of the application.
            </remarks>
            <example>
                This example enables multithreaded painting then changes the priority of the
                rendering thread to <strong>Lowest</strong> to give the rest of the application
                more CPU time. 
                <code lang="VB" title="[New Example]">
            Public Class MyControl 
                Inherits DoubleBufferedControl
                
                Sub New()
                    ' Enable multithreading
                    IsPaintingOnSeparateThread = True
                    ' Set a low thread priority
                    ThreadPriority = ThreadPriority.Lowest
                End Sub
                
                ' This method is now called from another thread
                Protected Overrides Sub OnPaintOffScreen(ByVal e As CancelablePaintEventArgs)
                   ' ...etc.
                End Sub
            End Class
                </code>
            	<code lang="CS" title="[New Example]">
            public class MyControl : DoubleBufferedControl
            {
                MyControl()
                {
                    // Enable multithreading
                    IsPaintingOnSeparateThread = true;
                    // Set a low thread priority
                    ThreadPriority = ThreadPriority.Lowest;
                }
                
                // This method is now called from another thread
                protected override void OnPaintOffScreen(CancelablePaintEventArgs e)
                {
                   // ...etc.
                }
            }
                </code>
            </example>
        </member>
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.BackColor">
            <summary>Controls the background color of the control.</summary>
            <value>A <strong>Color</strong> structure representing the background color.</value>
            <remarks>
            The default <strong>BackColor</strong> property of the <strong>Control</strong>
            class cannot be accessed from a thread other than the UI thread. As a result, this
            property was shadowed in order to make it thread-safe.
            </remarks>
        </member>
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.Width">
            <remarks>
            The default <strong>Width</strong> property of the <strong>Control</strong> class
            cannot be accessed from a thread other than the UI thread. As a result, this property
            was shadowed in order to make it thread-safe.
            </remarks>
            <summary>Returns the width of the control in pixels.</summary>
            <value>An <strong>Integer</strong> indicating the width of the control in pixels.</value>
        </member>
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.Height">
            <remarks>
            The default <strong>Height</strong> property of the <strong>Control</strong>
            class cannot be accessed from a thread other than the UI thread. As a result, this
            property was shadowed in order to make it thread-safe.
            </remarks>
            <summary>Returns the height of the control in pixels.</summary>
            <value>An <strong>Integer</strong> indicating the width of the control in pixels.</value>
        </member>
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.OnScreenBitmap">
            <summary>Returns the bitmap used to paint the visible portion of the control.</summary>
            <value>A <strong>Bitmap</strong> containing data to be painted on the display.</value>
            <remarks>
            	<para>This control maintains two separate bitmaps: an "off-screen" bitmap, where
                all painting operations take place, and an "on-screen" bitmap which is displayed
                visually to the user. When an off-screen painting operation completes successfully,
                the off-screen bitmap is copies to the on-screen bitmap, then painted on the
                display. This property returns the on-screen bitmap matching what is actually seen
                in the control.</para>
            </remarks>
        </member>
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.SmoothingMode">
            <summary>Controls the amount of smoothing applied to lines and shapes.</summary>
            <value>
            A <strong>SmoothingMode</strong> value. Default is
            <strong>HighQuality</strong>.
            </value>
            <remarks>
            This property can drastically improve the look of a control by enabling smoothing
            effects such as anti-aliasing. While smoothing effects improve appearance, they also
            slow down painting operations.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:GeoFramework.Controls.DoubleBufferedControl.TargetFramesPerSecond" -->
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.OptimizationMode">
            <summary>Controls the goal of all painting operations.</summary>
            <value>
            A <strong>ControlOptimizationMode</strong> value. Default is
            <strong>Balanced</strong>.
            </value>
            <remarks>
            	<para>This powerful property provides a way to modify properties in bulk in order
                to achieve different levels of performance. For example, changing this property to
                <strong>BestRefreshRate</strong> disables all anti-aliasing and compositing effects
                to that rendering is as fast as possible at the cost of quality. On the other hand,
                changing this property to <strong>BestQuality</strong> enables all smoothing
                effects at the cost of speed. When this property changes, the
                <strong>OnOptimizationModeChanged</strong> virtual method is called.</para>
            </remarks>
        </member>
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.TextRenderingHint">
            <summary>Controls the level of quality applied to text painting operations.</summary>
            <value>
            A <strong>TextRenderingHint</strong> value. Default is
            <strong>AntiAlias</strong>.
            </value>
            <remarks>
            	<para>This property controls the amount of smoothing applied to text when it is
                drawn on-screen. When set to <strong>AntiAlias</strong>, pixels nearby lines drawn
                in text are interpolated, giving the appearance of smoother lines.</para>
            	<para>After researching this property, GeoFrameworks believes that a setting of
                <strong>AntiAlias</strong> can produce better results than
                <strong>ClearType</strong> or <strong>ClearTypeGridFit</strong> settings because
                ClearType™ is not used on rotated text, whereas <strong>AntiAlias</strong>
                functions well on all text operations.</para>
            </remarks>
        </member>
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.CompositingMode">
            <summary>Controls the technique used to merge pixels with the background.</summary>
            <remarks>
            The compositing mode determines whether pixels from a source image overwrite or
            are combined with background pixels.
            </remarks>
            <value>
            A <strong>CompositingMode</strong> value. Default is
            <strong>SourceOver</strong>.
            </value>
        </member>
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.CompositingQuality">
            <summary>Controls the technique used to blend overlapping pixels.</summary>
            <value>
            A <strong>CompositingQuality</strong> value. Default is
            <strong>AssumeLinear</strong>.
            </value>
            <remarks>
            	<para>Compositing is done during rendering when the source pixels are combined with
                the destination pixels to produce the resultant pixels. The quality of compositing
                directly relates to the visual quality of the output and is inversely proportional
                to the render time. The higher the quality, the slower the render time. This is
                because the higher the quality level, the more surrounding pixels need to be taken
                into account during compositing. The linear quality setting <b>AssumeLinear</b>
                compromises by providing better quality than the default quality at a slightly
                lower speed.</para>
            </remarks>
        </member>
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.InterpolationMode">
            <summary>
            Controls the technique used to calculate points in between other known
            points.
            </summary>
            <value>
            An <strong>InterpolationMode</strong> value. Default is
            <strong>Low</strong>.
            </value>
            <remarks>
            Interpolation is the process of calculating values between two other values. This
            technique is frequently used for the drawing of splines and curves, where only a few
            "control points" are known. The highest quality is achieved using bicubic
            interpolation, whereas more performance can be seen when using a setting of
            <strong>Low</strong>.
            </remarks>
        </member>
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.PixelFormat">
            <summary>Controls the color depth of bitmaps used by the control.</summary>
            <value>
            A <strong>PixelFormat</strong> value. Default is
            <strong>Format32bppArgb</strong>.
            </value>
            <remarks>
            	<para>The pixel format controls the bits-per-pixel of bitmaps. Having more bits per
                pixel allows for greater ranges of color but requires more memory. Likewise, less
                bits reduces the number of colors per pixel but uses less memory. This property is
                typically modified via the <strong>OptimizationMode</strong> property to use bitmap
                formats that improve rendering speed or reduce the memory requirements of the
                control.</para>
            	<para>This property is for advanced users only. Several of the possible values in
                the <strong>PixelFormat</strong> enumeration will produce a black screen or other
                undesirable results.</para>
            </remarks>
        </member>
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.PixelOffsetMode">
            <summary>Controls the offset applied to all pixels during painting operations.</summary>
            <value>
            A <strong>PixelOffsetMode</strong> value. Default is
            <strong>HighSpeed</strong>.
            </value>
            <remarks>
            	<para>This property was intended to improve anti-aliasing effects by shifting all
                pixels by slight amount, such as half a pixel. A value of
                <strong>HighQuality</strong> causes pixels to be shifted slightly, whereas a value
                of <strong>HighSpeed</strong> ignores pixel shifting.</para>
            	<para>Author's Note: "During development of this class, we tested the
                <strong>HighQuality</strong> setting and didn't see any improvement in quality that
                was worth the extra CPU time, so <strong>HighSpeed</strong> should be favored." --
                Jon Persion</para>
            </remarks>
        </member>
        <member name="P:GeoFramework.Controls.DoubleBufferedControl.Center">
            <summary>
            Indicates the point at the center of the control.
            </summary>
            <remarks>This property is typically used for centering items in the control.  This property
            is updated automatically as the control is resized.</remarks>
            <value>
            A <strong>Point</strong> structure representing the pixel at the center of the
            control.
            </value>
            <example>
                This example uses the <strong>Center</strong> property to center a rectangle in the
                middle of the control. 
                <code lang="VB" title="[New Example]">
            Public Class MyControl 
                Inherits DoubleBufferedControl
             
                Protected Overrides Sub OnPaintOffScreen(ByVal e As CancelablePaintEventArgs)
                    ' Center a rectangle in the middle of the control
                    Dim MyShape As New Rectangle(Center.X - 25, Center.Y - 25, 50, 50)
                    ' Now paint it        
                    Dim MyBrush As New SolidBrush(Color.Green)
                    e.Graphics.FillRectangle(MyBrush, MyShape)
                    MyBrush.Dispose()
                End Sub
            End Class
                </code>
            	<code lang="CS" title="[New Example]">
            public class MyControl : DoubleBufferedControl
            {
                protected override void OnPaintOffScreen(CancelablePaintEventArgs e)
                {
                    // Center a rectangle in the middle of the control
                    Rectangle MyShape = new Rectangle(Center.X - 25, Center.Y - 25, 50, 50);
                    // Now paint it        
                    SolidBrush MyBrush = new SolidBrush(Color.Green);
                    e.Graphics.FillRectangle(MyBrush, MyShape);
                    MyBrush.Dispose();
                }
            }
                </code>
            </example>
        </member>
        <member name="T:GeoFramework.Controls.CancelablePaintEventArgs">
            <summary>Represents information about a cancelable paint iteration.</summary>
            <remarks>
            This class is used primarily by the <strong>OnPaintOffScreen</strong> method of
            the <strong>DoubleBufferedControl</strong> class when paint operations need to be
            performed. This class behaves the same as <strong>PaintEventArgs</strong>, but includes
            an extra <strong>IsCancelled</strong> property to indicate when a rendering iteration
            should be aborted.
            </remarks>
        </member>
        <member name="M:GeoFramework.Controls.CancelablePaintEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Creates a new instance using the specified <strong>Graphics</strong> object and
            clipping rectangle.
            </summary>
            <param name="graphics">
            A <strong>Graphics</strong> object used for all painting within the
            control.
            </param>
            <param name="clipRectangle">
            A <strong>Rectangle</strong> that defines the area that should be painted.
            Typically the size of the entire control.
            </param>
        </member>
        <member name="P:GeoFramework.Controls.CancelablePaintEventArgs.IsCancelled">
            <summary>Indicates if the painting operation should be completely aborted.</summary>
            <value>
            A <strong>Boolean</strong>, <strong>True</strong> if painting was aborted.
            Default is <strong>False</strong>.
            </value>
            <remarks>
            	<para>This property is used by controls which allow their paint operations to be
                cancelled. When set to True, the entire painting iteration is stopped and
                restarted. This property is useful if a control always needs to display the very
                latest information.</para>
            	<para>Setting this property to <strong>True</strong> can have some undesirable
                affects. For example, if a paint iteration is cancelled repeatedly, the control
                will never get far enough in a paint operation to paint on-screen. Some care should
                be taken when using this property.</para>
            </remarks>
            <example>
                This example demonstrates how to write a cancelable paint operation. It's typically
                a good idea to check for conditions which should cause a paint to cancel before
                beginning a time-consuming painting task. In this case, the
                <strong>IsPaintingAborted</strong> property is examined before entering a large
                loop. <strong>IsPaintingAborted</strong> becomes <strong>True</strong> when a new
                request to paint the control is made after starting the current paint iteration.
                <code lang="VB" title="[New Example]">
            Public Class MyControl
                Inherits DoubleBufferedControl
                
                Sub New()
                    IsPaintingOnSeparateThread = True
                End Sub
                
                Protected Overrides Sub OnPaintOffScreen(ByVal e As CancelablePaintEventArgs)
                    ' Should painting be cancelled?
                    If IsPaintingAborted
                        ' Yes.  Abort all painting
                        e.IsCancelled = True
                        Exit Sub
                    End If
                        
                    ' Otherwise, A big paint operation begins
                    Dim Count As Integer
                    For Count = 1 To 20000
                        Dim MyBrush As New SolidBrush(Color.Green)
                        e.Graphics.DrawRectangle(MyBrush, New Rectangle(Count, Count, 5, 5))
                        MyBrush.Dispose()
                    Next Count
                End Sub
            End Class
                </code>
            	<code lang="CS" title="[New Example]">
            public class MyControl : DoubleBufferedControl
            {
                MyControl()
                {
                    IsPaintingOnSeparateThread = true;
                }
                
                protected override void OnPaintOffScreen(CancelablePaintEventArgs e)
                {
                    // Should painting be cancelled?
                    if(IsPaintingAborted)
                    {
                        // Yes.  Abort all painting
                        e.IsCancelled = true;
                        return;
                    }
                        
                    // Otherwise, A big paint operation begins
                    for(int Count = 1; Count &lt;= 20000; Count++)
                    {
                        SolidBrush MyBrush = new SolidBrush(Color.Green);
                        e.Graphics.DrawRectangle(MyBrush, new Rectangle(Count, Count, 5, 5));
                        MyBrush.Dispose();
                    }
                }
            }
                </code>
            </example>
        </member>
        <member name="T:GeoFramework.Controls.ControlOptimizationMode">
            <summary>
            Indicates the rendering goal for a double-buffered user control.
            </summary>
            <remarks>
            This enumeration is used primarily by the <strong>OptimizationMode</strong>
            property of the <strong>DoubleBufferedControl</strong> class to modify several
            properties at once to obtain a specific rendering goal.
            </remarks>
        </member>
        <member name="F:GeoFramework.Controls.ControlOptimizationMode.Balanced">
            <summary>
            Default. All but minor quality improvements are turned off to yield the best
            balance between rendering speed and visual quality. The rendering thrad is given Normal
            priority.
            </summary>
        </member>
        <member name="F:GeoFramework.Controls.ControlOptimizationMode.BestRefreshRate">
            <summary>All quality improvements are turned off in to maximize rendering speed.</summary>
        </member>
        <member name="F:GeoFramework.Controls.ControlOptimizationMode.BestQuality">
            <summary>
            All quality improvements are turned on in an attempt to maximize rendering
            quality. The rendering thread is given higher priority to account for the higher demand
            on the CPU.
            </summary>
        </member>
        <member name="F:GeoFramework.Controls.ControlOptimizationMode.LeastProcessorUsage">
            <summary>
            Similar to BestRefreshRate, plus the rendering thread is given lowest priority.
            This setting is recommended if your application needs more CPU time.
            </summary>
        </member>
        <member name="F:GeoFramework.Controls.ControlOptimizationMode.MostDetail">
            <summary>
            All quality improvements are enabled to make finer detail easier to discern, and
            information which might otherwise be hidden is made visible. This setting is
            recommended if the control is about to be printed.
            </summary>
        </member>
        <member name="F:GeoFramework.Controls.ControlOptimizationMode.Custom">
            <summary>
            Indicates that optimization settings are being modified to custom
            settings.
            </summary>
        </member>
        <member name="T:GeoFramework.DynamicEvent">
            <summary>Provides features for raising events using automatic thread marshaling.</summary>
            <remarks>
            	<para>The task of raising an event can quickly become complicated in a
                multithreaded environment. For example, if an event is handled within a Form, but
                the event was raised from a separate thread from the form's own thread, the
                <strong>Control.Invoke</strong> method must be used to marshal event code to the
                form's thread to avoid application lock-ups. For large libraries such as this one
                where there are numerous events, event code quickly becomes very complicated with
                numerous <strong>Control.Invoke</strong> calls.</para>
            	<para>This class attempts to completely eliminate the need to call
                <strong>Control.Invoke</strong> by doing it automatically. when the Invoke or
                BeginInvoke methods of this class are called, each delegate's target is examined to
                see if it supports the <strong>ISynchronizeInvoke</strong> interface (or
                <strong>Control</strong> class for the compact framework). If found, the target's
                own <strong>Invoke</strong> method is called, marshalling the call to the form's
                own thread. If necessary, Reflection is used to analyze the delegate's
                target.</para>
            	<para>Due to severe limitations of delegates in .NET Compact Framework 1.0, this
                class is not available for Compact Framework 1.0 applications. However, this class
                fully supports all other .NET platforms: .NET Frameworks 1.0 and 1.1, .NET Compact
                Framework 2.0, and also the special "Deploy to My Computer" emulation environment
                in Visual Studio.NET 2005. Developers which use a single code base for multiple
                platforms can greatly benefit from this class.</para>
            </remarks>
            <example>
                This example demonstrates how to use the <strong>DynamicEvent</strong> class to
                invoke an event. The code remains the same regardless of which .NET platform is
                used. 
                <code lang="VB" title="[New Example]">
            Public Event MyEvent As EventHandler
             
            Protected Overridable Sub OnMyEvent()
                DynamicEvent.BeginInvoke(MyEventHandler, Me, EventArgs.Empty)
            End Sub
                </code>
            	<code lang="CS" title="[New Example]">
            public event EventHandler MyEvent;
             
            protected virtual void OnMyEvent()
            {
                DynamicEvent.BeginInvoke(MyEventHandler, this, EventArgs.Empty);
            }
                </code>
            	<code lang="VB" title="[New Example]" description="This example demonstrates how to support all .NET platforms, including Compact Framework 1.0, by using compiler directives.">
            Public Event MyEvent As EventHandler
             
            Protected Overridable Sub OnMyEvent()
                #If PocketPC And Not Framework20
                    RaiseEvent MyEventHandler(Me, EventArgs.Empty)
                #Else    
                    DynamicEvent.BeginInvoke(MyEventHandler, Me, EventArgs.Empty)
                #End If    
            End Sub
                </code>
            	<code lang="CS" title="[New Example]" description="This example demonstrates how to support all .NET platforms, including Compact Framework 1.0, by using compiler directives.">
            public event EventHandler MyEvent;
             
            protected virtual void OnMyEvent()
            {
                #if PocketPC &amp;&amp; !Framework20
                    if(MyEventHandler != null)
                        MyEventHandler(this, EventArgs.Empty);
                #else
                    DynamicEvent.BeginInvoke(MyEventHandler, this, EventArgs.Empty);
                #endif    
            }
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.DynamicEvent.IsThreadMarshallingRequired(System.Delegate)">
            <summary>
            Indicates if the specified delegate would be marshalled to the user interface
            thread if it were invoked.
            </summary>
            <remarks>
            	<para>When a delegate is invoked using the <strong>DynamicEvent</strong> class,
                this method is used to determine if the delegate should be marshalled to the user
                interface thread, or whether it should be invoked normally. The target of the
                delegate is analyzed to see if is supports <strong>ISynchronizeInvoke</strong> (or
                <strong>Control</strong> on the Compact Framework). If so, the
                <strong>InvokeRequired</strong> property is examined if it is available. If it
                returns <strong>True</strong>, a value of <strong>True</strong> is returned. On the
                Compact Framework, <strong>InvokeRequired</strong> does not exist, so
                <strong>True</strong> is returned if the target is decended from
                <strong>Control</strong>.</para>
            	<para>This method is called automatically by this class and is provided only for
                informational purposes. Use <strong>Invoke</strong> or <strong>BeginInvoke</strong>
                to invoke delegates.</para>
            </remarks>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the delegate would be
            marshalled to the user interface thread if invoked.
            </returns>
            <param name="method">
            A <strong>Delegate</strong> to examine. Typically an
            <strong>EventHandler</strong> or custom event handler.
            </param>
        </member>
        <member name="M:GeoFramework.DynamicEvent.IsThreadMarshallingRequired(System.Delegate[])">
            <summary>
            Indicates if the specified invocation list would be marshalled to the user
            interface thread if it were invoked.
            </summary>
            <remarks>
            	<para>When a delegate is invoked using the <strong>DynamicEvent</strong> class,
                this method is used to determine if the delegate should be marshalled to the user
                interface thread, or whether it should be invoked normally. The targets of each
                delegate in the array are analyzed to see if they support
                <strong>ISynchronizeInvoke</strong> (or <strong>Control</strong> on the Compact
                Framework). If so, the <strong>InvokeRequired</strong> property is examined if it
                is available. If it returns <strong>True</strong>, a value of <strong>True</strong>
                is returned. On the Compact Framework, <strong>InvokeRequired</strong> does not
                exist, so <strong>True</strong> is returned if the target is decended from
                <strong>Control</strong>.</para>
            	<para>This method is called automatically by this class and is provided only for
                informational purposes. Use <strong>Invoke</strong> or <strong>BeginInvoke</strong>
                to invoke delegates.</para>
            </remarks>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if at least one delegate in the
            array would be marshalled to the user interface thread if invoked.
            </returns>
            <param name="invocationList">
            An array of <strong>Delegate</strong> objects. Typically the output of
            <strong>Delegate.GetInvocationList()</strong>.
            </param>
        </member>
        <member name="M:GeoFramework.DynamicEvent.GetTargets(System.Delegate)">
            <summary>Returns the objects containing event handlers for the specified delegate.</summary>
            <returns>
            An array of <strong>Objects</strong> representing the target for each delegate in
            the delegate's invocation list.
            </returns>
            <remarks>
            	<para>This property examines the invocation list of a delegate in order to return
                its targets. A "target" is an object which contains code for an event handler. On
                Desktop Frameworks, the delegate's <strong>Target</strong> property is analyzed. On
                Compact Framework 2.0, the "<strong>_target</strong>" property is private, so
                reflection is used to obtain its value.</para>
            	<para>This method is called automatically by this class and is provided only for
                informational purposes. Use <strong>Invoke</strong> or <strong>BeginInvoke</strong>
                to invoke delegates.</para>
            </remarks>
            <param name="method">
            A <strong>Delegate</strong> to examine. Typically an
            <strong>EventHandler</strong> or custom event handler.
            </param>
        </member>
        <member name="M:GeoFramework.DynamicEvent.GetTargets(System.Delegate[])">
            <remarks>
            	<para>This property examines the invocation list of a delegate in order to return
                its targets. A "target" is an object which contains code for an event handler. On
                Desktop Frameworks, the delegate's <strong>Target</strong> property is analyzed. On
                Compact Framework 2.0, the "<strong>_target</strong>" property is private, so
                reflection is used to obtain its value.</para>
            	<para>This method is called automatically by this class and is provided only for
                informational purposes. Use <strong>Invoke</strong> or <strong>BeginInvoke</strong>
                to invoke delegates.</para>
            </remarks>
            <returns>
            An array of <strong>Objects</strong> representing the target for each delegate in
            the array.
            </returns>
            <summary>Returns the objects containing event handlers for the specified delegates.</summary>
            <param name="invocationList">
            An array of <strong>Delegate</strong> objects. Typically the output of
            <strong>Delegate.GetInvocationList()</strong>.
            </param>
        </member>
        <member name="M:GeoFramework.DynamicEvent.GetTarget(System.Delegate)">
            <summary>Returns a single target for the specified delegate.</summary>
            <remarks>
            	<para>This property examines the invocation list of a delegate in order to return
                its targets. A "target" is an object which contains code for an event handler. On
                Desktop Frameworks, the delegate's <strong>Target</strong> property is analyzed. On
                Compact Framework 2.0, the "<strong>_target</strong>" property is private, so
                reflection is used to obtain its value.</para>
            	<para>This method is called automatically by this class and is provided only for
                informational purposes. Use <strong>Invoke</strong> or <strong>BeginInvoke</strong>
                to invoke delegates.</para>
            </remarks>
            <returns>An <strong>Object</strong> representing the target of the delegate.</returns>
            <param name="method">
            A <strong>Delegate</strong> to examine. Typically an
            <strong>EventHandler</strong> or custom event handler.
            </param>
        </member>
        <member name="M:GeoFramework.DynamicEvent.Invoke(System.Delegate)">
            <remarks>
            	<para>This method executes the specified delegate synchronously using the specified
                sender. If the event has no subscribers, this method returns and no exception is
                thrown. If any of the delegate's targets implement
                <strong>ISynchronizeInvoke</strong> (such as a <strong>Control</strong> or
                <strong>Form</strong> object), the target's own <strong>Invoke</strong> method is
                called to marshal the delegate to the user interface thread.</para>
            	<para>If the delegate is an event, and it is not necessary to wait for the event to
                complete, use the <strong>BeginInvoke</strong> method instead.</para>
            </remarks>
            <summary>Executes the specified delegate.</summary>
            <example>
                This example uses the <strong>Invoke</strong> method to raise an event. Using
                <strong>BeginInvoke</strong> is recommended instewad of <strong>Invoke</strong>
                since it is typically not necessary to wait for an event to complete before
                continuing.
                <code lang="VB" title="[New Example]">
            Dim MyEvent As EventHandler
             
            Sub Main()
                DynamicEvent.Invoke(MyEvent)
            End Sub
                </code>
            	<code lang="CS" title="[New Example]">
            EventHandler MyEvent;
             
            void Main()
            {
                DynamicEvent.Invoke(MyEvent);
            }
                </code>
            </example>
            <param name="method">
            A <strong>Delegate</strong> to invoke. Typically an <strong>EventHandler</strong>
            or custom event handler.
            </param>
        </member>
        <member name="M:GeoFramework.DynamicEvent.Invoke(System.Delegate,System.Object)">
            <summary>Executes the specified delegate using the specified sender.</summary>
            <remarks>
            	<para>This method executes the specified delegate synchronously using the specified
                sender and no event arguments. If the event has no subscribers, this method returns
                and no exception is thrown. If any of the delegate's targets implement
                <strong>ISynchronizeInvoke</strong> (such as a <strong>Control</strong> or
                <strong>Form</strong> object), the target's own <strong>Invoke</strong> method is
                called to marshal the delegate to the user interface thread.</para>
            	<para>If the delegate is an event and it is not necessary to wait for the event to
                complete, use the <strong>BeginInvoke</strong> method instead.</para>
            </remarks>
            <example>
                This example uses the <strong>Invoke</strong> method to raise an event. Using
                <strong>BeginInvoke</strong> is recommended instewad of <strong>Invoke</strong>
                since it is typically not necessary to wait for an event to complete before
                continuing.
                <code lang="VB" title="[New Example]">
            Dim MyEvent As EventHandler
             
            Sub Main()
                DynamicEvent.Invoke(MyEvent, Me)
            End Sub
                </code>
            	<code lang="CS" title="[New Example]">
            EventHandler MyEvent;
             
            void Main()
            {
                DynamicEvent.Invoke(MyEvent, this);
            }
                </code>
            </example>
            <param name="method">
            A <strong>Delegate</strong> to invoke. Typically an <strong>EventHandler</strong>
            or custom event handler.
            </param>
            <param name="sender">
            An <strong>Object</strong> identifying the object which invoked the
            delegate.
            </param>
        </member>
        <member name="M:GeoFramework.DynamicEvent.BeginInvoke(System.Delegate,System.Object)">
            <example>
                This example demonstrates the preferred way to raise events using the
                <strong>DynamicEvent</strong> class.
                <code lang="VB" title="[New Example]">
            Dim MyEvent As EventHandler
             
            Sub Main()
                DynamicEvent.BeginInvoke(MyEvent)
            End Sub
                </code>
            	<code lang="CS" title="[New Example]">
            EventHandler MyEvent;
             
            void Main()
            {
                DynamicEvent.BeginInvoke(MyEvent);
            }
                </code>
            </example>
            <summary>Executes the specified delegate asynchronously.</summary>
            <returns>
            An <strong>IAsyncResult</strong> object if there is only one event subscriber,
            otherwise null.
            </returns>
            <remarks>
            	<para>This method executes the specified delegate asynchronously (whenever
                possible) using the specified sender. If the event has no subscribers, this method
                returns null and no exception is thrown. If any of the delegate's targets implement
                <strong>ISynchronizeInvoke</strong> (such as a <strong>Control</strong> or
                <strong>Form</strong> object), the target's own <strong>BeginInvoke</strong> method
                is called to marshal the delegate to the user interface thread.</para>
            	<para>This method is the preferred way to invoke an event because it it typically
                not necessary to wait for an event to complete before continuing execution.</para>
            	<para>For Compact Framework 2.0, asynchronous delegates are not supported, so the
                delegate is executed synchronously.</para>
            </remarks>
            <param name="method">
            A <strong>Delegate</strong> to invoke. Typically an <strong>EventHandler</strong>
            or custom event handler.
            </param>
            <param name="sender">
            An <strong>Object</strong> identifying the object which invoked the
            delegate.
            </param>
        </member>
        <member name="M:GeoFramework.DynamicEvent.BeginInvoke(System.Delegate)">
            <example>
                This example demonstrates the preferred way to raise events using the
                <strong>DynamicEvent</strong> class.
                <code lang="VB" title="[New Example]">
            Dim MyEvent As EventHandler
             
            Sub Main()
                DynamicEvent.BeginInvoke(MyEvent, Me)
            End Sub
                </code>
            	<code lang="CS" title="[New Example]">
            EventHandler MyEvent;
             
            void Main()
            {
                DynamicEvent.BeginInvoke(MyEvent, this);
            }
                </code>
            </example>
            <summary>Executes the specified delegate asynchronously using the specified sender.</summary>
            <remarks>
            	<para>This method executes the specified delegate asynchronously (whenever
                possible) using the specified sender. If the event has no subscribers, this method
                returns null and no exception is thrown. If any of the delegate's targets implement
                <strong>ISynchronizeInvoke</strong> (such as a <strong>Control</strong> or
                <strong>Form</strong> object), the target's own <strong>BeginInvoke</strong> method
                is called to marshal the delegate to the user interface thread.</para>
            	<para>This method is the preferred way to invoke an event because it it typically
                not necessary to wait for an event to complete before continuing execution.</para>
            	<para>For Compact Framework 2.0, asynchronous delegates are not supported, so the
                delegate is executed synchronously.</para>
            </remarks>
            <returns>
            An <strong>IAsyncResult</strong> object if there is only one event subscriber,
            otherwise null.
            </returns>
            <param name="method">
            A <strong>Delegate</strong> to invoke. Typically an <strong>EventHandler</strong>
            or custom event handler.
            </param>
        </member>
        <member name="M:GeoFramework.DynamicEvent.BeginInvoke(System.Delegate,System.Object,System.EventArgs)">
            <example>
                This example demonstrates the preferred way to raise events using the
                <strong>DynamicEvent</strong> class.
                <code lang="VB" title="[New Example]">
            Dim MyEvent As EventHandler
             
            Sub Main()
                DynamicEvent.BeginInvoke(MyEvent, Me, EventArgs.Empty)
            End Sub
                </code>
            	<code lang="CS" title="[New Example]">
            EventHandler MyEvent;
             
            void Main()
            {
                DynamicEvent.BeginInvoke(MyEvent, this, EventArgs.Empty);
            }
                </code>
            </example>
            <summary>
            Executes the specified delegate asynchronously using the specified sender and
            event arguments.
            </summary>
            <remarks>
            	<para>This method executes the specified delegate asynchronously (whenever
                possible) using the specified sender. If the event has no subscribers, this method
                returns null and no exception is thrown. If any of the delegate's targets implement
                <strong>ISynchronizeInvoke</strong> (such as a <strong>Control</strong> or
                <strong>Form</strong> object), the target's own <strong>BeginInvoke</strong> method
                is called to marshal the delegate to the user interface thread.</para>
            	<para>This method is the preferred way to invoke an event because it it typically
                not necessary to wait for an event to complete before continuing execution.</para>
            	<para>For Compact Framework 2.0, asynchronous delegates are not supported, so the
                delegate is executed synchronously.</para>
            </remarks>
            <returns>
            An <strong>IAsyncResult</strong> object if there is only one event subscriber,
            otherwise null.
            </returns>
            <param name="method">
            A <strong>Delegate</strong> to invoke. Typically an <strong>EventHandler</strong>
            or custom event handler.
            </param>
            <param name="sender">
            An <strong>Object</strong> identifying the object which invoked the
            delegate.
            </param>
            <param name="e">
            An <strong>EventArgs</strong> object containing any arguments involved with the
            event.
            </param>
        </member>
        <member name="M:GeoFramework.DynamicEvent.Invoke(System.Delegate,System.Object,System.EventArgs)">
            <summary>
            Executes the specified delegate using the specified sender and event
            arguments.
            </summary>
            <remarks>
            	<para>This method executes the specified delegate synchronously using the specified
                sender and event arguments. If the event has no subscribers, this method returns
                and no exception is thrown. If the delegate's target implements
                <strong>ISynchronizeInvoke</strong>, such as a <strong>Control</strong> or
                <strong>Form</strong>, that object's own <strong>Invoke</strong> method is called
                to marshal the delegate to the control's own thread.</para>
            	<para>If the delegate is an event and it is not necessary to wait for the event to
                complete, use the <strong>BeginInvoke</strong> method instead.</para>
            </remarks>
            <example>
                This example uses the <strong>Invoke</strong> method to raise an event. Using
                <strong>BeginInvoke</strong> is recommended instewad of <strong>Invoke</strong>
                since it is typically not necessary to wait for an event to complete before
                continuing.
                <code lang="CS" title="[New Example]">
            Dim MyEvent As EventHandler
             
            Sub Main()
                DynamicEvent.Invoke(MyEvent, Me, EventArgs.Empty)
            End Sub
                </code>
            	<code lang="CS" title="[New Example]">
            EventHandler MyEvent;
             
            void Main()
            {
                DynamicEvent.Invoke(MyEvent, this, EventArgs.Empty);
            }
                </code>
            </example>
            <param name="method">
            A <strong>Delegate</strong> to invoke. Typically an <strong>EventHandler</strong>
            or custom event handler.
            </param>
            <param name="sender">
            An <strong>Object</strong> identifying the object which invoked the
            delegate.
            </param>
            <param name="e">
            An <strong>EventArgs</strong> object containing any arguments involved with the
            event.
            </param>
        </member>
        <member name="M:GeoFramework.DynamicEvent.MarshalledInvoke(System.Delegate)">
            <summary>
            Invokes the specified delegate after marshalling it to the user interface
            thread.
            </summary>
            <remarks>
            	<para>This method will attempt to marshal a delegate to the user interface thread
                via the delegate's target <strong>Invoke</strong> method, even if thread
                marshalling is not necessary.</para>
            	<para>This method is called automatically by this class and is provided only for
                informational purposes. Use <strong>Invoke</strong> or <strong>BeginInvoke</strong>
                to invoke delegates.</para>
            </remarks>
            <param name="method">
            A <strong>Delegate</strong> to invoke. Typically an <strong>EventHandler</strong>
            or custom event handler.
            </param>
        </member>
        <member name="M:GeoFramework.DynamicEvent.MarshalledInvoke(System.Delegate,System.Object)">
            <summary>
            Invokes the specified delegate after marshalling it to the user interface
            thread.
            </summary>
            <remarks>
            	<para>This method will attempt to marshal a delegate to the user interface thread
                via the delegate's target <strong>Invoke</strong> method, even if thread
                marshalling is not necessary.</para>
            	<para>This method is called automatically by this class and is provided only for
                informational purposes. Use <strong>Invoke</strong> or <strong>BeginInvoke</strong>
                to invoke delegates.</para>
            </remarks>
            <param name="method">
            A <strong>Delegate</strong> to invoke. Typically an <strong>EventHandler</strong>
            or custom event handler.
            </param>
            <param name="sender">
            An <strong>Object</strong> identifying the object which invoked the
            delegate.
            </param>
        </member>
        <member name="M:GeoFramework.DynamicEvent.MarshalledInvoke(System.Delegate,System.Object,System.EventArgs)">
            <summary>
            Invokes the specified delegate after marshalling it to the user interface
            thread.
            </summary>
            <remarks>
            	<para>This method will attempt to marshal a delegate to the user interface thread
                via the delegate's target <strong>Invoke</strong> method, even if thread
                marshalling is not necessary.</para>
            	<para>This method is called automatically by this class and is provided only for
                informational purposes. Use <strong>Invoke</strong> or <strong>BeginInvoke</strong>
                to invoke delegates.</para>
            </remarks>
            <param name="method">
            A <strong>Delegate</strong> to invoke. Typically an <strong>EventHandler</strong>
            or custom event handler.
            </param>
            <param name="sender">
            An <strong>Object</strong> identifying the object which invoked the
            delegate.
            </param>
            <param name="e">
            An <strong>EventArgs</strong> object containing any arguments involved with the
            event.
            </param>
        </member>
        <member name="M:GeoFramework.DynamicEvent.MarshalledInvokeInternal(System.Delegate,System.Object[])">
            <summary>Marshals the specified delegate to the user interface thread.</summary>
        </member>
        <member name="M:GeoFramework.DynamicEvent.UnmarshalledInvoke(System.Delegate)">
            <summary>Invokes the specified delegate without using thread marshalling.</summary>
            <remarks>
            	<para>This method will invoke a delegate normally, even if thread marshalling is
                necessary.</para>
            	<para>This method is called automatically by this class and is provided only for
                informational purposes. Use <strong>Invoke</strong> or <strong>BeginInvoke</strong>
                to invoke delegates.</para>
            </remarks>
            <param name="method">
            A <strong>Delegate</strong> to invoke. Typically an <strong>EventHandler</strong>
            or custom event handler.
            </param>
        </member>
        <member name="M:GeoFramework.DynamicEvent.UnmarshalledInvoke(System.Delegate,System.Object)">
            <summary>Invokes the specified delegate without using thread marshalling.</summary>
            <remarks>
            	<para>This method will invoke a delegate normally, even if thread marshalling is
                necessary.</para>
            	<para>This method is called automatically by this class and is provided only for
                informational purposes. Use <strong>Invoke</strong> or <strong>BeginInvoke</strong>
                to invoke delegates.</para>
            </remarks>
            <param name="method">
            A <strong>Delegate</strong> to invoke. Typically an <strong>EventHandler</strong>
            or custom event handler.
            </param>
            <param name="sender">
            An <strong>Object</strong> identifying the object which invoked the
            delegate.
            </param>
        </member>
        <member name="M:GeoFramework.DynamicEvent.UnmarshalledInvoke(System.Delegate,System.Object,System.EventArgs)">
            <summary>Invokes the specified delegate without using thread marshalling.</summary>
            <remarks>
            	<para>This method will invoke a delegate normally, even if thread marshalling is
                necessary.</para>
            	<para>This method is called automatically by this class and is provided only for
                informational purposes. Use <strong>Invoke</strong> or <strong>BeginInvoke</strong>
                to invoke delegates.</para>
            </remarks>
            <param name="method">
            A <strong>Delegate</strong> to invoke. Typically an <strong>EventHandler</strong>
            or custom event handler.
            </param>
            <param name="sender">
            An <strong>Object</strong> identifying the object which invoked the
            delegate.
            </param>
            <param name="e">
            An <strong>EventArgs</strong> object containing any arguments involved with the
            event.
            </param>
        </member>
        <member name="E:GeoFramework.DynamicEvent.ExceptionOccurred">
            <summary>Occurs when an unhandled exception is thrown by an event subscriber.</summary>
            <remarks>
            	<para>When an event is raised, event subscribers are notified and begin executing
                their own code. If an exception is raised within their code, the exception is
                accidentally thrown back into the <strong>DynamicEvent</strong> class, where it
                does not belong. The exception is channeled to this event, where the application
                gets a chance to act upon the exception, then execution continues.</para>
            	<para>Well-written applications which use <strong>Try...Catch</strong> blocks will
                never need to trap this event. This event should be subscribed to during
                development, however, to provide notification of any accidental exceptions.</para>
            </remarks>
            <example>
                This example demonstrates how to use the <strong>ExceptionOccurred</strong> event
                to be notified of unhandled exceptions within event handlers. Let's say you have an
                event named " <strong>MyTestEvent</strong> " which gets invoked via
                <strong>DynamicEvent.BeginInvoke</strong> . If the event subscriber for the event
                raises an exception, the exception is caught and channeled to
                <strong>DynamicEventExceptionOccurred</strong> , where it is then thrown. 
                <code lang="VB" title="[New Example]">
            Dim MyTestEvent As EventHandler
             
            Sub Main()
                ' Receive notifications of event invocation errors
                AddHandler DynamicEvent.ExceptionOccurred, DynamicEventExceptionOccurred
                ' Subscribe to the test event
                AddHandler MyTestEvent, MyTestEventOccurred
                ' Invoke the test event
                DynamicEvent.BeginInvoke(MyTestEvent, Me)
            End Sub
             
            ' Occurs when an event subscriber causes an unhandled exception
            Public Sub DynamicEventExceptionOccurred(ByVal sender As Object, ByVal e As ExceptionEventArgs)
                Throw e.Exception
            End Sub
             
            Private Sub MyTestEventOccurred(ByVal sender As Object, ByVal e As EventArgs)
                ' This line will cause an InvalidCastException to occur
                Dim CauseProblem As Integer = CType(sender, Integer)
            End Sub
                </code>
            	<code lang="CS" title="[New Example]">
            EventHandler MyTestEvent;
             
            void Main()
            {
                // Receive notifications of event invocation errors
                DynamicEvent.ExceptionOccurred += new ExceptionEventHandler(DynamicEventExceptionOccurred);
                // Subscribe to the test event
                MyTestEvent += new EventHandler(MyTestEventOccurred);
                // Invoke the test event
                DynamicEvent.BeginInvoke(MyTestEvent, this);
            }
             
            // Occurs when an event subscriber causes an unhandled exception
            public void DynamicEventExceptionOccurred(object sender, ExceptionEventArgs e)
            {
                throw e.Exception;
            }
             
            private void MyTestEventOccurred(object sender, EventArgs e)
            {
                // This line will cause an InvalidCastException to occur
                int CauseProblem = (int)sender;
            }
                </code>
            </example>
        </member>
        <member name="T:GeoFramework.Elevation">
            <summary>Represents a vertical angular measurement between -90° and 90°.</summary>
            <remarks>
            This class is used to indicate a vertical angle where 90° represents a point
            directly overhead, 0° represents the horizon (striaght ahead), and -90° represents a
            point straight down. This class is typically combined with an <strong>Elevation</strong>
            object (which measures a horizontal angle) to form a three-dimensional direction to an
            object in space, such as a GPS satellite.
            </remarks>
            <example>
            These examples create new instances of <strong>Elevation</strong> objects.
            </example>
        </member>
        <member name="F:GeoFramework.Elevation.Zenith">
            <summary>Represents the point directly overhead.</summary>
            <value>An <strong>Elevation</strong> object.</value>
        </member>
        <member name="F:GeoFramework.Elevation.HalfwayAboveHorizon">
            <value>An <strong>Elevation</strong> object.</value>
            <summary>Represents a vertical direction halfway up from the horizon.</summary>
        </member>
        <member name="F:GeoFramework.Elevation.HalfwayBelowHorizon">
            <value>An <strong>Elevation</strong> object.</value>
            <summary>Represents a vertical direction halfway below the horizon.</summary>
        </member>
        <member name="F:GeoFramework.Elevation.Horizon">
            <value>An <strong>Elevation</strong> object.</value>
        </member>
        <member name="F:GeoFramework.Elevation.Empty">
            <value>An <strong>Elevation</strong> object.</value>
        </member>
        <member name="F:GeoFramework.Elevation.Nadir">
            <summary>Represents the point directly below one's feet.</summary>
            <value>An <strong>Elevation</strong> object.</value>
        </member>
        <member name="M:GeoFramework.Elevation.#ctor(System.Double)">
            <summary>Creates a new instance with the specified decimal degrees.</summary>
        </member>
        <member name="M:GeoFramework.Elevation.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>Creates a new instance with the specified hours, minutes and 
            seconds.</summary>
        </member>
        <member name="M:GeoFramework.Elevation.#ctor(System.Int32,System.Double)">
            <summary>Creates a new instance with the specified hours and decimal minutes.</summary>
        </member>
        <member name="M:GeoFramework.Elevation.#ctor(System.String)">
            <summary>Creates a new instance by converting the specified string.</summary>
            <remarks>
            	<para>This powerful method is typically used to process data from a data store or a
             value input by the user. This function can accept any format which can be output by
             the <see cref="M:GeoFramework.Angle.ToString">ToString</see> method.</para>
            </remarks>
            <example>
            	<code lang="VB" title="[New Example]">
            Dim NewElevation As Elevation = Elevation.Parse("NW", CultureInfo.CurrentCulture)
                </code>
            	<code lang="CS" title="[New Example]">
            Elevation NewElevation = Elevation.Parse("NW", CultureInfo.CurrentCulture);
                </code>
            </example>
            <param name="value">
            	<para>A <strong>String</strong> value containing an angular measurement. See the
             <see cref="M:GeoFramework.Elevation.Parse(System.String)">Parse</see> method for acceptable
             formats.</para>
            </param>
        </member>
        <member name="M:GeoFramework.Elevation.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance by converting the specified string using the specified
            culture.
            </summary>
            <example>
            	<code lang="VB" title="[New Example]">
            Dim NewElevation As Elevation = Elevation.Parse("NW", CultureInfo.CurrentCulture)
                </code>
            	<code lang="CS" title="[New Example]">
            Elevation NewElevation = Elevation.Parse("NW", CultureInfo.CurrentCulture);
                </code>
            </example>
            <param name="value">
            A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.
            </param>
            <param name="culture">
            A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.
            </param>
        </member>
        <member name="M:GeoFramework.Elevation.Parse(System.String)">
            <summary>Creates a new instance by converting the specified string.</summary>
            <remarks>
            	<para>This method parses the specified string into an <strong>Elevation</strong>
                object using the specified culture. This method can parse any string created via
                the <strong>ToString</strong> method.</para>
            </remarks>
            <example>
            	<code lang="VB" title="[New Example]">
            Dim NewElevation As Elevation = Elevation.Parse("NW", CultureInfo.CurrentCulture)
                </code>
            	<code lang="CS" title="[New Example]">
            Elevation NewElevation = Elevation.Parse("NW", CultureInfo.CurrentCulture);
                </code>
            </example>
            <param name="value">
            A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.
            </param>
        </member>
        <member name="M:GeoFramework.Elevation.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance by converting the specified string using the specified
            culture.
            </summary>
            <remarks>
            	<para>This method parses the specified string into an <strong>Elevation</strong>
                object using the specified culture. This method can parse any string created via
                the <strong>ToString</strong> method.</para>
            </remarks>
            <example>
            	<code lang="VB" title="[New Example]">
            Dim NewElevation As Elevation = Elevation.Parse("NW", CultureInfo.CurrentCulture)
                </code>
            	<code lang="CS" title="[New Example]">
            	</code>
            </example>
            <param name="value">
            A <strong>String</strong> describing an angle in the form of decimal degrees or a
            sexagesimal.
            </param>
            <param name="culture">
            A <strong>CultureInfo</strong> object describing the numeric format to use during
            conversion.
            </param>
        </member>
        <member name="M:GeoFramework.Elevation.ToString(System.String,System.IFormatProvider)">
            <summary>Outputs the azimuth as a string using the specified format.</summary>
            <returns>A <strong>String</strong> in the specified format.</returns>
            <remarks>
            	<para>This method returns the current instance output in a specific format. If no
                value for the format is specified, a default format of "e" is used. Any string
                output by this method can be converted back into an Angle object using the
                <strong>Parse</strong> method or <strong>Elevation(string)</strong>
                constructor.</para>
            </remarks>
            <seealso cref="M:GeoFramework.Elevation.ToString(System.String,System.IFormatProvider)">ToString Method</seealso>
            <seealso cref="M:GeoFramework.Elevation.Parse(System.String)">Parse Method</seealso>
            <example>
                This example uses the <strong>ToString</strong> method to output an elevation of
                45° in a custom format. The "<strong>d.dd</strong>" code represents decimal degrees
                rounded to two digits, and "<strong>e</strong>" represents the direction in verbose
                form.
                <code lang="VB">
            Dim MyElevation As New Elevation(45)
            Debug.WriteLine(MyElevation.ToString("d.dd (cc)", CultureInfo.CurrentCulture))
            ' Output: 45 (Halfway up from the horizon)
                </code>
            	<code lang="CS">
            Elevation MyElevation = new Elevation(45);
            Console.WriteLine(MyElevation.ToString("d.dd (cc)", CultureInfo.CurrentCulture));
            // Output: 45 (Halfway up from the horizon)
                </code>
            </example>
            <param name="format">
            	<para>A <strong>String</strong> consisting of any number of the following
                codes:</para>
            	<para>
            		<list type="table">
            			<item>
            				<term><strong>e</strong></term>
            				<description>The object is output as a description. <strong>Above the
                            horizon</strong>, <strong>Directly overhead</strong>, <strong>Halfway
                            up from the horizon.</strong></description>
            			</item>
            			<item>
            				<term><strong>d</strong></term>
            				<description>Represents one digit from the
                            <strong>DecimalDegrees</strong> property.</description>
            			</item>
            			<item>
            				<term><strong>h</strong></term>
            				<description>Represents one digit from the <strong>Hours</strong>
                            property.</description>
            			</item>
            			<item>
            				<term><strong>m</strong></term>
            				<description>Represents one digit from the <strong>Minutes</strong>
                            property.</description>
            			</item>
            			<item>
            				<term><strong>s</strong></term>
            				<description>Represents one digit from the <strong>Seconds</strong>
                            property.</description>
            			</item>
            		</list>
            	</para>
            </param>
            <param name="formatProvider">
            A <strong>CultureInfo</strong> object used to properly format numeric
            information.
            </param>
        </member>
        <member name="M:GeoFramework.Elevation.Clone">
            <summary>Creates a copy of the current instance.</summary>
        </member>
        <member name="M:GeoFramework.Elevation.FromRadians(GeoFramework.Radian)">
            <summary>Converts a value expressed in radians into an elevation.</summary>
            <remarks>
            This function is typically used at the end of trigonometric functions to convert
            a value from radians into an <strong>Elevation</strong>, which is easier to read.
            </remarks>
            <seealso cref="M:GeoFramework.Angle.ToRadians">ToRadians</seealso>
            <seealso cref="T:GeoFramework.Radian">Radian Class</seealso>
            <example>
                This example uses the <strong>FromRadians</strong> method to convert a value of one
                radian into an <strong>Elevation</strong> of 57°.
                <code lang="VB">
            ' Create a new angle equal to one radian
            Dim MyRadians As New Radian(1)
            Dim MyElevation As Elevation = Elevation.FromRadians(MyRadians)
            Debug.WriteLine(MyElevation.ToString())
            ' Output: 57°
                </code>
            	<code lang="CS">
            // Create a new angle equal to one radian
            Radian MyRadians = new Radian(1);
            Elevation MyElevation = Elevation.FromRadians(MyRadians);
            Console.WriteLine(MyElevation.ToString());
            // Output: 57°
                </code>
            </example>
            <returns>
            An <strong>Elevation</strong> object equivalent to the specified
            <strong>Radian</strong> object.
            </returns>
            <param name="value">A <strong>Radian</strong> object to convert.</param>
        </member>
        <member name="M:GeoFramework.Elevation.Mirror">
            <summary>Returns an elevation opposite to the current value.</summary>
            <returns>
            An <strong>Elevation</strong> containing the opposite of the current
            instance.
            </returns>
            <remarks>
            This method returns the value representing the opposite of the current instance.
            The "opposite" is defined as the point on an imaginary circle 180° more than the
            current value. For example, if the current value is 0° (North), this method returns
            180° (South). If the value is 270° (West), 90° (East) is returned.
            </remarks>
            <example>
                This example creates a new <strong>Elevation</strong> of 45° then calculates its
                mirror of 225°. (45 + 180)
                <code lang="VB" title="[New Example]">
            Dim Elevation1 As New Elevation(45)
            Dim Elevation2 As Elevation = Elevation1.Mirror()
            Debug.WriteLine(Elevation2.ToString("h"))
            ' Output: 225
                </code>
            	<code lang="CS" title="[New Example]">
            Elevation Elevation1 = new Elevation(45);
            Elevation Elevation2 = Elevation1.Mirror();
            Console.WriteLine(Elevation2.ToString("h"));
            // Output: 225
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Elevation.Normalize">
            <returns>An <strong>Elevation</strong> containing the converted value.</returns>
            <remarks>
            This method converts a value so that it is between 0° and 360°. For example, an
            <strong>Elevation</strong> of 720° would normalize to 0° since both numbers represent the
            same position on a circle.
            </remarks>
            <summary>Converts the current instance to its equivalent between 0° and 360°.</summary>
        </member>
        <member name="M:GeoFramework.Elevation.Normalize(System.Double)">
            <summary>Converts the specified value to its equivalent between 0° and 360°.</summary>
            <param name="decimalDegrees">A <strong>Double</strong> value to be normalized.</param>
        </member>
        <member name="M:GeoFramework.Elevation.Increment">
            <summary>Returns the current instance increased by one.</summary>
            <remarks>
            	<para>This method increases the <strong>DecimalDegrees</strong> property by 1.0,
                returned as a new instance.</para>
            	<para><font color="red">Since the <strong>Elevation</strong> class is immutable, this
                method cannot be used to modify an existing instance.</font></para>
            </remarks>
            <example>
                This example uses the <strong>Increment</strong> method to increase an elevation's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Increment</strong> is called while ignoring the return value.
                <code lang="VB" title="[New Example]">
            ' Correct use of Increment
            Dim Elevation1 As New Elevation(89)
            Elevation1 = Elevation1.Increment()
             
            ' Incorrect use of Increment
            Dim Elevation1 = New Elevation(89)
            Elevation1.Increment()
            ' NOTE: Elevation1 will still be 89°!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Increment
            Elevation Elevation1 = new Elevation(89);
            Elevation1 = Elevation1.Increment();
             
            // Incorrect use of Increment
            Elevation Elevation1 = new Elevation(89);
            Elevation1.Increment();
            // NOTE: Elevation1 will still be 89°!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Elevation.Add(GeoFramework.Angle)">
            <summary>Increases the current instance by the specified value.</summary>
            <returns>A new <strong>Elevation</strong> containing the summed values.</returns>
            <example>
                This example adds 45° to the current instance of 45°, returning 90°.
                <code lang="VB" title="[New Example]">
            Dim Elevation1 As New Elevation(45)
            Elevation1 = Elevation1.Add(45)
                </code>
            	<code lang="CS" title="[New Example]">
            Elevation Elevation1 = new Elevation(45);
            Elevation1 = Elevation1.Add(45);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to add to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Elevation.Decrement">
            <summary>Returns the current instance decreased by one.</summary>
            <returns>An <strong>Elevation</strong> object.</returns>
            <remarks>
            	<para>This method decreases the <strong>DecimalDegrees</strong> property by 1.0,
                returned as a new instance.</para>
            	<para><font color="red">Since the <strong>Elevation</strong> class is immutable, this
                method cannot be used to modify an existing instance.</font></para>
            </remarks>
            <example>
                This example uses the <strong>Decrement</strong> method to decrease an elevation's
                value. It also demonstrates the subtle error which can be caused if
                <strong>Decrement</strong> is called while ignoring the return value.
                <code lang="VB" title="[New Example]">
            ' Correct use of Decrement
            Dim Elevation1 As New Elevation(91)
            Elevation1 = Elevation1.Decrement()
             
            ' Incorrect use of Decrement
            Dim Elevation1 = New Elevation(91)
            Elevation1.Decrement()
            ' NOTE: Elevation1 will still be 91°!
                </code>
            	<code lang="CS" title="[New Example]">
            // Correct use of Decrement
            Elevation Elevation1 = new Elevation(91);
            Elevation1 = Elevation1.Decrement();
             
            // Incorrect use of Decrement
            Elevation Elevation1 = new Elevation(91);
            Elevation1.Decrement();
            // NOTE: Elevation1 will still be 91°!
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Elevation.Subtract(GeoFramework.Angle)">
            <summary>Decreases the current instance by the specified value.</summary>
            <returns>A new <strong>Elevation</strong> containing the new value.</returns>
            <example>
                This example subtracts 30° from the current instance of 90°, returning 60°. 
                <code lang="VB" title="[New Example]">
            Dim Elevation1 As New Elevation(90)
            Elevation1 = Elevation1.Subtract(30)
                </code>
            	<code lang="CS" title="[New Example]">
            Elevation Elevation1 = new Elevation(90);
            Elevation1 = Elevation1.Subtract(30);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to subtract from the current instance.</param>
        </member>
        <member name="M:GeoFramework.Elevation.Multiply(GeoFramework.Angle)">
            <summary>Multiplies the current instance by the specified value.</summary>
            <returns>A new <strong>Elevation</strong> containing the product of the two numbers.</returns>
            <example>
                This example multiplies 30° with three, returning 90°.
                <code lang="VB" title="[New Example]">
            Dim Elevation1 As New Elevation(30)
            Elevation1 = Elevation1.Multiply(3)
                </code>
            	<code title="[New Example]">
            Elevation Elevation1 = new Elevation(30);
            Elevation1 = Elevation1.Multiply(3);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> to multiply with the current instance.</param>
        </member>
        <member name="M:GeoFramework.Elevation.Divide(GeoFramework.Angle)">
            <summary>Divides the current instance by the specified value.</summary>
            <returns>An <strong>Elevation</strong> containing the new value.</returns>
            <example>
                This example divides 90° by three, returning 30°.
                <code lang="VB" title="[New Example]">
            Dim Elevation1 As New Elevation(90)
            Elevation1 = Elevation1.Divide(3)
                </code>
            	<code lang="CS" title="[New Example]">
            Elevation Elevation1 = new Elevation(90);
            Elevation1 = Elevation1.Divide(3);
                </code>
            </example>
            <param name="value">A <strong>Double</strong> representing a denominator to divide by.</param>
        </member>
        <member name="M:GeoFramework.Elevation.LesserOf(GeoFramework.Elevation)">
            <summary>Returns the object with the smallest value.</summary>
            <returns>The <strong>Angle</strong> containing the smallest value.</returns>
            <param name="value">An <strong>Elevation</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Elevation.GreaterOf(GeoFramework.Elevation)">
            <summary>Returns the object with the largest value.</summary>
            <returns>The <strong>Angle</strong> containing the largest value.</returns>
            <param name="value">An <strong>Elevation</strong> object to compare to the current instance.</param>
        </member>
        <member name="M:GeoFramework.Elevation.Equals(System.Object)">
            <summary>Compares the current instance to another instance.</summary>
            <returns>
            A <strong>Boolean</strong>, <strong>True</strong> if the
            <strong>DecimalDegrees</strong> property matches the specified value.
            </returns>
            <param name="obj">
            An <strong>Integer</strong>, <strong>Double</strong>, <strong>String</strong>,
            <strong>Elevation</strong>, or <strong>Angle</strong> object to compare against.
            </param>
        </member>
        <member name="M:GeoFramework.Elevation.GetHashCode">
            <summary>Returns a unique code for this instance.</summary>
        </member>
        <member name="T:GeoFramework.ElevationEventArgs">
            <summary>
            Represents information about an elevation when an elevation-related event is
            raised.
            </summary>
            <remarks>
            This class is used for events which use an <strong>Elevation</strong> as a
            parameter.
            </remarks>
            <example>
                This example demonstrates how to use a custom event which involves an
                <strong>Elevation</strong>.
                <code lang="VB" title="[New Example]">
            ' Declare a new event
            Dim MyElevationEvent As ElevationEventHandler
             
            Sub Main()
                ' Create an Elevation of 90°
                Dim MyElevation As New Elevation(90)
                ' Raise our custom event
                RaiseEvent MyElevationEvent(Me, New ElevationEventArgs(MyElevation))
            End Sub
                </code>
            	<code lang="CS" title="[New Example]">
            // Declare a new event
            ElevationEventHandler MyElevationEvent;
             
            void Main()
            {
                // Create an Elevation of 90°
                Elevation MyElevation = new Elevation(90);
                // Raise our custom event
                if(MyElevationEvent != null)
                    MyElevationEvent(this, new ElevationEventArgs(MyElevation));
            }
                </code>
            </example>
        </member>
        <member name="T:GeoFramework.ElevationEventHandler">
            <remarks>
            This example demonstrates how to use a custom event which involves an
            <strong>Elevation</strong>.
            </remarks>
            <example>
                This example declares a custom event using the
                <strong>ElevationEventHandler</strong> delegate. 
                <code lang="VB" title="[New Example]">
            ' Declare a new event
            Dim MyElevationEvent As ElevationEventHandler
             
            Sub Main()
                ' Create an Elevation of 90°
                Dim MyElevation As New Elevation(90)
                ' Raise our custom event
                RaiseEvent MyElevationEvent(Me, New ElevationEventArgs(MyElevation))
            End Sub
                </code>
            	<code lang="CS" title="[New Example]">
            // Declare a new event
            ElevationEventHandler MyElevationEvent;
             
            void Main()
            {
                // Create an Elevation of 90°
                Elevation MyElevation = new Elevation(90);
                // Raise our custom event
                if(MyElevationEvent != null)
                    MyElevationEvent(this, new ElevationEventArgs(MyElevation));
            }
                </code>
            </example>
            <param name="sender">An <strong>Object</strong> which initiated the call to the delegate.</param>
            <param name="e">
            An <strong>ElevationEventArgs</strong> object containing an
            <strong>Elevation</strong> involved in the event.
            </param>
        </member>
        <member name="T:GeoFramework.Ellipsoid">
            <summary>Represents a flattened sphere which approximates Earth's size and shape.</summary>
            <remarks>
            	<para>Mathematics involving points on Earth's surface are difficult to perform with
                precision because the Earth's surface is rugged. In order to maximize precision,
                scientists developed "ellipsoids," smooth ellipsoidal shapes (known as "oblate
                spheriods" or flattened spheres) which attempt to approximate Earth's exact shape.
                Like datums, ellipsoids have been subject to frequent revisions thanks to advances
                in technology, yet countries cannot quickly abandon outdated ellipsoids because so
                much infrastructure is built upon them. As a result, multiple ellipsoids are
                tracked and utilized when converting coordinates from one locale to another. Today,
                there are approximately thirty known ellipsoids upon which an estimated 120
                individual coordinate systems are built.</para>
            	<para>This class is typically used during coordinate conversion to convert from one
                interpretation of Earth's shape to another. All known worldwide ellipsoids such as
                WGS84 and Clarke 1880 are provided as static (Shared in Visual Basic) fields. Most
                developers will not have to use this class until coordinates must be plotted on a
                map. For most purposes, using the default ellipsoid of WGS84 is sufficient.</para>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (its properties can only be set via constructors).</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.Ellipsoid.#ctor(System.String,GeoFramework.Distance,GeoFramework.Distance)">
            <summary>
            Creates a new instance with the specified type, name, equatorial raduis and polar radius.
            </summary>
            <param name="name">The name for the new ellipsoid.</param>
            <param name="equatorialRadius">A <strong>Distance</strong> object specifying the distance from the center of the Earth to the equator.</param>
            <param name="polarRadius">A <strong>Distance</strong> object specifying the distance from the center of the Earth to the poles.</param>
            <remarks>This constructor allows user-defined ellipsoids to be created for specialized applications.  </remarks>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Clarke1866">
            <summary>Represents the Clarke 1866 ellipsoid.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Clarke1880">
            <summary>Represents the Clarke 1880 ellipsoid.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Bessel1841">
            <summary>Represents the Bessel 1841 ellipsoid.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.NewInternational1967">
            <summary>Represents the New International ellipsoid of 1967.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.International1924">
            <summary>Represents the International ellipsoid of 1924.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Wgs1972">
            <summary>Represents the World Geodetic System ellipsoid of 1972.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.EverestIndia1830">
            <summary>Represents the Everest (India 1830) ellipsoid.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Wgs1966">
            <summary>Represents the World Geodetic System ellipsoid of 1966.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Grs80">
            <summary>Represents the Geodetic Reference System ellipsoid of 1980.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Airy1830">
            <summary>Represents the Airy ellipsoid of 1830.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Everest1948">
            <summary>Represents the Everest ellipsoid of 1948.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.ModifiedAiry">
            <summary>Represents the Modified Airy ellipsoid.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Wgs1984">
            <summary>Represents the World Geodetic System ellipsoid of 1984.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.ModifiedFischer1960">
            <summary>Represents the Modified Fisher ellipsoid of 1960.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.AustralianNational1965">
            <summary>Represents the Australian National ellipsoid of 1965.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Krassovsky1940">
            <summary>Represents the Krassovsky ellipsoid of 1940.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Hough1960">
            <summary>Represents the Hough ellipsoid of 1960.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Fischer1960">
            <summary>Represents the Fisher ellipsoid of 1960.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Fischer1968">
            <summary>Represents the Fisher ellipsoid of 1968.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.NormalSphere">
            <summary>Represents a perfect sphere.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Indonesian1974">
            <summary>Represents the Indonesian ellipsoid of 1974.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.EverestPakistan">
            <summary>Represents the Everest (Pakistan) ellipsoid.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Bessel1841Japan">
            <summary>Represents the Bessel (Japan) ellipsoid of 1841.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Bessel1841Namibia">
            <summary>Represents the Bessel (Namibia) ellipsoid of 1841.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Everest1956">
            <summary>Represents the Everest ellipsoid of 1956.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Everest1969">
            <summary>Represents the Everest ellipsoid of 1969.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Everest">
            <summary>Represents the Everest ellipsoid.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Helmert1906">
            <summary>Represents the Helmert ellipsoid of 1906.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Sgs1985">
            <summary>Represents the SGS ellipsoid of 1985.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Wgs1960">
            <summary>Represents the World Geodetic System ellipsoid of 1960.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.SouthAmerican1969">
            <summary>Represents the South American ellipsoid of 1969.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Ats1977">
            <summary>Represents the Average Terrestrial System ellipsoid of 1977.</summary>
        </member>
        <member name="F:GeoFramework.Ellipsoid.Default">
            <summary>Represents the default ellipsoid, WGS1984.</summary>
        </member>
        <member name="P:GeoFramework.Ellipsoid.Name">
            <summary>
            Indicates the descriptive name of the ellipsoid.
            </summary>
            <value>A <strong>String</strong> containing the name of the ellipsoid.</value>
            <remarks>This property is typically used to display ellipsoid information on a user interface.</remarks>
        </member>
        <member name="P:GeoFramework.Ellipsoid.EquatorialRadius">
            <summary>Represents the distance from Earth's center to the equator.</summary>
            <value>A <strong>Distance</strong> object.</value>
            <remarks>
            	<para>This property defines the radius of the Earth from its center to the equator.
                This property is used in conjunction with the <strong>PolarRadius</strong> property
                to define an ellipsoidal shape. This property returns the same value as the
                <strong>SemiMajorAxis</strong> property.</para>
            </remarks>
            <seealso cref="P:GeoFramework.Ellipsoid.PolarRadius">PolarRadius Property</seealso>
        </member>
        <member name="P:GeoFramework.Ellipsoid.PolarRadius">
            <summary>Represents the distance from Earth's center to the North or South pole.</summary>
            <value>A <strong>Distance</strong> object.</value>
            <remarks>
            	<para>This property defines the radius of the Earth from its center to the equator.
                This property is used in conjunction with the <strong>EquatorialRadius</strong>
                property to define an ellipsoidal shape. This property returns the same value as
                the <strong>SemiMinorAxis</strong> property.</para>
            </remarks>
            <seealso cref="P:GeoFramework.Ellipsoid.EquatorialRadius">EquatorialRadius Property</seealso>
        </member>
        <member name="P:GeoFramework.Ellipsoid.SemiMajorAxis">
            <summary>Represents the distance from Earth's center to the equator.</summary>
            <value>A <strong>Distance</strong> containing Earth's equatorial radius.</value>
            <remarks>
            	<para>This property defines the radius of the Earth from its center to the equator.
                This property is used in conjunction with the <strong>SemiMinorAxis</strong>
                property to define an ellipsoidal shape. This property returns the same value as
                the <strong>EquatorialRadius</strong> property.</para>
            </remarks>
            <seealso cref="P:GeoFramework.Ellipsoid.EquatorialRadius">EquatorialRadius Property</seealso>
        </member>
        <member name="P:GeoFramework.Ellipsoid.SemiMinorAxis">
            <summary>Represents the distance from Earth's center to the North or South pole.</summary>
            <value>A <strong>Distance</strong> containing Earth's polar radius.</value>
            <remarks>
            	<para>This property defines the radius of the Earth from its center to the equator.
                This property is used in conjunction with the <strong>SemiMajorAxis</strong>
                property to define an ellipsoidal shape. This property returns the same value as
                the <strong>PolarRadius</strong> property.</para>
            </remarks>
            <seealso cref="P:GeoFramework.Ellipsoid.EquatorialRadius">EquatorialRadius Property</seealso>
        </member>
        <member name="P:GeoFramework.Ellipsoid.IsSpherical">
            <summary>Indicates if the ellipsoid is describing a perfect sphere.</summary>
            <remarks>
            Mathematical formulas such as map projection and coordinate conversion can be
            optimized if the ellipsoid they are working with is spherical. For more precise
            results, however, spherical ellipsoids should not be used. This property, when used
            correctly, can improve performance for mathematics when coordinate precision is less of
            a concern, such as viewing a map from a high altitude.
            </remarks>
        </member>
        <member name="P:GeoFramework.Ellipsoid.InverseFlattening">
            <summary>
            Indicates the inverse of the shape of an ellipsoid relative to a sphere.
            </summary>
            <value>A <strong>Double</strong> containing the ellipsoid's flattening.</value>
            <remarks>
            This property is used frequently in equations. Inverse flattening is defined as
            one divided by the <strong>Flattening</strong> property.:
            </remarks>
            <seealso cref="P:GeoFramework.Ellipsoid.EquatorialRadius">EquatorialRadius Property</seealso>
        </member>
        <member name="P:GeoFramework.Ellipsoid.Flattening">
            <summary>Indicates the shape of the ellipsoid relative to a sphere.</summary>
            <value>A <strong>Double</strong> containing the ellipsoid's flattening.</value>
            <remarks>
            This property compares the equatorial radius with the polar radius to measure the
            amount that the ellipsoid is "squished" vertically.
            </remarks>
            <seealso cref="P:GeoFramework.Ellipsoid.EquatorialRadius">EquatorialRadius Property</seealso>
        </member>
        <member name="P:GeoFramework.Ellipsoid.Eccentricity">
            <summary>Returns the rate of flattening of the ellipsoid.</summary>
            <value>A <strong>Double</strong> measuring how elongated the ellipsoid is.</value>
            <remarks>
            The eccentricity is a positive number less than 1, or 0 in the case of a circle.
            The greater the eccentricity is, the larger the ratio of the equatorial radius to the
            polar radius is, and therefore the more elongated the ellipse is.
            </remarks>
        </member>
        <member name="P:GeoFramework.Ellipsoid.EccentricitySquared">
            <summary>Returns the square of the eccentricity.</summary>
            <remarks>
            This property returns the value of the <strong>Eccentricity</strong> property,
            squared. It is used frequently during coordinate conversion formulas.
            </remarks>
        </member>
        <member name="M:GeoFramework.TimeSpanEventArgs.#ctor(System.TimeSpan)">
            <summary>
            Creates a new instance containing the specified TimeSpan object.
            </summary>
            <param name="timeSpan">A <strong>TimeSpan</strong> object describing a length of time.</param>
            <remarks></remarks>
            <seealso cref="P:GeoFramework.TimeSpanEventArgs.TimeSpan">TimeSpan Property</seealso>
            <seealso cref="T:System.TimeSpan">TimeSpan Structure</seealso>
        </member>
        <member name="P:GeoFramework.TimeSpanEventArgs.TimeSpan">
            <summary>
            Indicates a length of time which is the target of the event.
            </summary>
            <value>A <strong>TimeSpan</strong> object describing a length of time.</value>
            <remarks></remarks>
            <seealso cref="T:System.TimeSpan">TimeSpan Structure</seealso>
        </member>
        <member name="T:GeoFramework.DateTimeEventArgs">
            <summary>
            Represents information about the date and time reported by the GPS device.
            </summary>
        </member>
        <member name="M:GeoFramework.DateTimeEventArgs.#ctor(System.DateTime)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="dateTime">A DateTime object containing a date and time reported by the GPS device.</param>
        </member>
        <member name="P:GeoFramework.DateTimeEventArgs.DateTime">
            <summary>
            A date and time value in UTC time (not adjusted for the local time zone).
            </summary>
            <value>A DateTime object containing a date and time reported by the GPS device.</value>
            <remarks>This date and time value is not adjusted to the local time zone.  Use the 
            <see cref="M:System.DateTime.ToLocalTime">ToLocalTime</see> method to adjust to local time.</remarks>
            <seealso cref="T:System.DateTime">DateTime Class</seealso>
            <seealso cref="M:System.DateTime.ToLocalTime">ToLocalTime Method (DateTime Class)</seealso>
        </member>
        <member name="T:GeoFramework.ExceptionEventArgs">
            <summary>
            Represents information about an exception when an error-related event is raised.
            </summary>
            <remarks>This object is used throughout the GPS.NET framework to provide notification when
            either of two situations occur:
            
            <list>
            <item>An exception is thrown which cannot be trapped via a Try..Catch block (such as from a separate thread)</item>
            <item>An exception is thrown which can be recovered from and should not halt the current operation.</item>
            </list>
            Most frequently, this class is used when a parsing exception occurs via the Parse method or during automatic
            data collection.</remarks>
            <example>This example demonstrates how to use this class when raising an event.
            <code lang="VB">
            ' Create a new exception
            Dim MyException As New ApplicationException("The error was successfully created.")
            ' Declare a new event
            Dim MyErrorEvent As ExceptionEventHandler
            
            Sub Main()
              ' Raise our custom event
              RaiseEvent MyErrorEvent(Me, New ExceptionEventArgs(MyException))
            End Sub
            </code>
            <code lang="C#">
            // Create a new exception
            ApplicationException MyException = new ApplicationException("The error was successfully created.")
            // Declare a new event
            ExceptionEventHandler MyErrorEvent;
            
            void Main()
            {
              // Raise our custom event
              MySatelliteEvent(this, New ExceptionEventArgs(MyException));
            }
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Creates a new instance containing the specified exception object.
            </summary>
            <param name="exception">An <strong>Exception</strong> object or derivitive describing the error.</param>
        </member>
        <member name="P:GeoFramework.ExceptionEventArgs.Exception">
            <summary>
            Indicates information about the error and its location within a module.
            </summary>
            <value>An <strong>ApplicationException</strong> object or derivitive describing the error.</value>
        </member>
        <member name="T:GeoFramework.GeographicRectangle">
            <summary>
            Represents a rectangular shape on Earth's surface.
            </summary>
            <remarks>
            	<para>This class is used to represent a square (or close to a square) shape on
                Earth's surface. This class is typically used during mapping applications to zoom
                into a particular area on Earth. This class looks nearly identical to the Rectangle
                class in the .NET framework, except that it's bounding points are defined as
                <strong>Position</strong> objects instead of <strong>Point</strong> objects.</para>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (it's properties can only be set via constructors).</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.#ctor(GeoFramework.Position,GeoFramework.GeographicSize)">
            <summary>Creates a new instance using the specified location and size.</summary>
            <returns>
            A <strong>GeographicRectangle</strong> set to the specified location and
            size.
            </returns>
            <remarks>
            This constructor defines a rectangle which expands east and south of the
            specified location.
            </remarks>
            <example>
                This example creates a new <strong>GeographicRectangle</strong> starting at 39°N
                105°W which is 2° wide and 5° tall. 
                <code lang="VB" title="[New Example]">
            Dim NorthwestCorner As New Position("39N 105W")
            Dim RectangleSize As New GeographicSize(2, 5)
            Dim Rectangle As New GeographicRectangle(NorthwestCorner, RectangleSize)
                </code>
            	<code lang="CS" title="[New Example]">
            Position NorthwestCorner = new Position("39N,105W");
            GeographicSize RectangleSize = new GeographicSize(2, 5);
            GeographicRectangle Rectangle = new GeographicRectangle(NorthwestCorner, RectangleSize);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.#ctor(GeoFramework.Position,GeoFramework.Longitude,GeoFramework.Latitude)">
            <summary>
            Creates a new instance using the specified location, width, and height.
            </summary>
            <remarks>
            This constructor defines a rectangle which expands east and south of the
            specified location.
            </remarks>
            <example>
                This example creates a new <strong>GeographicRectangle</strong> starting at 39°N
                105°W which is 2° wide and 5° tall. 
                <code lang="VB" title="[New Example]">
            Dim NorthwestCorner As New Position("39N 105W")
            Dim RectangleWidth As New Longitude(2)
            Dim RectangleHeight As New Latitude(5)
            Dim Rectangle As New GeographicRectangle(NorthwestCorner, RectangleWidth, RectangleHeight)
                </code>
            	<code lang="CS" title="[New Example]">
            Position NorthwestCorner = new Position("39N 105W");
            Longitude RectangleWidth = new Longitude(2);
            Latitude RectangleHeight = new Latitude(5);
            GeographicRectangle Rectangle = new GeographicRectangle(NorthwestCorner, RectangleWidth, RectangleHeight);
                </code>
            </example>
            <returns>
            A <strong>GeographicRectangle</strong> set to the specified location and
            size.
            </returns>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.#ctor(GeoFramework.Position,GeoFramework.Position)">
            <summary>
            Creates a new instance using the specified northwest and southeast
            coordinates.
            </summary>
            <remarks>
            This constructor takes the specified parameters and calculates the width and
            height of the rectangle. If the two points are backwards (meaning that the right-most
            point is west of the left-most point), they are automatically swapped before creating
            the rectangle.
            </remarks>
            <returns>A <strong>GeographicRectangle</strong> defined by the two endpoints.</returns>
            <example>
                This example creates a new <strong>GeographicRectangle</strong> starting at 39°N
                105°W and ending at 37°N 100°W (2° wide and 5° tall). 
                <code lang="VB" title="[New Example]">
            Dim NorthwestCorner As New Position("39N 105W")
            Dim SoutheastCorner As New Position("37N 100W")
            Dim Rectangle As New GeographicRectangle(NorthwestCorner, SoutheastCorner)
                </code>
            	<code lang="CS" title="[New Example]">
            Position NorthwestCorner = new Position("39N 105W");
            Position SoutheastCorner = new Position("37N 100W");
            GeographicRectangle Rectangle = new GeographicRectangle(NorthwestCorner, SoutheastCorner);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.#ctor(System.String)">
            <summary>Creates a new instance by converting the specified string.</summary>
            <returns>
            A <strong>GeographicRectangle</strong> matching the specified string
            value.
            </returns>
            <remarks>
            This constructor attempts to parse the specified string into a rectangle. The
            current culture is used to interpret the string -- use the list separator of the
            current culture (which may not necessarily be a comma). This constructor can accept any
            output created via the <strong>ToString</strong> method.
            </remarks>
            <example>
                This example creates a new rectangle at 39°N, 105° extending two degrees south and
                five degrees east to 37°N, 100°W. 
                <code lang="VB" title="[New Example]">
            Dim Rectangle As New GeographicRectangle("39N,105W,37N,100W")
                </code>
            	<code lang="CS" title="[New Example]">
            GeographicRectangle Rectangle = new GeographicRectangle("39N,105W,37N,100W");
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance by converting the specified string in the given
            culture.
            </summary>
            <returns>
            This constructor attempts to parse the specified string into a rectangle. The
            specified culture is used to interpret the string. This constructor can accept any
            output created via the <strong>ToString</strong> method.
            </returns>
            <example>
                This example creates a new rectangle at 39°N, 105° extending two degrees south and
                five degrees east to 37°N, 100°W. 
                <code lang="VB" title="[New Example]">
            Dim Rectangle As New GeographicRectangle("39N,105W,37N,100W", CultureInfo.CurrentCulture)
                </code>
            	<code lang="CS" title="[New Example]">
            GeographicRectangle Rectangle = new GeographicRectangle("39N,105W,37N,100W", CultureInfo.CurrentCulture);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.#ctor(GeoFramework.Longitude,GeoFramework.Latitude,GeoFramework.Longitude,GeoFramework.Latitude)">
            <summary>
            Creates a new instance using the specified latitudes and longitudes.
            </summary>
            <example>
                This example creates a new <strong>GeographicRectangle</strong> by specifying each
                side individually. 
                <code lang="VB" title="[New Example]">
            Dim Left As New Longitude(-105)
            Dim Top As New Latitude(39)
            Dim Right As New Longitude(-100)
            Dim Top As New Latitude(37)
            Dim Rectangle As New GeographicRectangle(Left, Top, Right, Bottom)
                </code>
            	<code lang="CS" title="[New Example]">
            Longitude Left = new Longitude(-105);
            Latitude Top = new Latitude(39);
            Longitude Right = new Longitude(-100);
            Latitude Top = new Latitude(37);
            GeographicRectangle Rectangle = new GeographicRectangle(Left, Top, Right, Bottom);
                </code>
            </example>
            <returns>A <strong>GeographicRectangle</strong> bound by the specified values.</returns>
            <remarks>
            If the left and right, or top and bottom values are backwards, they are
            automatically swapped before creating the rectangle.
            </remarks>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.#ctor(GeoFramework.Latitude,GeoFramework.Longitude,GeoFramework.Latitude,GeoFramework.Longitude)">
            <summary>Creates a new instance using the specified latitudes and longitudes.</summary>
            <remarks>
            If the left and right, or top and bottom values are backwards, they are
            automatically swapped before creating the rectangle.
            </remarks>
            <returns>A <strong>GeographicRectangle</strong> bound by the specified values.</returns>
            <example>
            	<code lang="VB" title="[New Example]">
            Dim Left As New Longitude(-105)
            Dim Top As New Latitude(39)
            Dim Right As New Longitude(-100)
            Dim Top As New Latitude(37)
            Dim Rectangle As New GeographicRectangle(Left, Top, Right, Bottom)
                </code>
            	<code lang="CS" title="[New Example]">
            Latitude Top = new Latitude(39);
            Longitude Left = new Longitude(-105);
            Latitude Bottom = new Latitude(37);
            Longitude Right = new Longitude(-100);
            GeographicRectangle Rectangle = new GeographicRectangle(Top, Left, Bottom, Right);
                </code>
            </example>
        </member>
        <member name="F:GeoFramework.GeographicRectangle.Empty">
            <summary>
            Represents a GeographicRectangle having no size.
            </summary>
        </member>
        <member name="F:GeoFramework.GeographicRectangle.Maximum">
            <summary>Represents a rectangle that encompasses all of Earth's surface.</summary>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.TranslateTo(GeoFramework.Angle,GeoFramework.Distance)">
            <summary>Moves the rectangle in the specified direction by the specified distance.</summary>
            <returns>
            A new <strong>GeographicRectangle</strong> translated by the specified direction
            and distance.
            </returns>
            <remarks>
            This method is used to shift a rectangle to a new location while preserving its
            size.
            </remarks>
            <example>
                This example defines a rectangle then shifts it Northeast by fifty kilometers. 
                <code lang="VB" title="[New Example]">
            Dim Rectangle As New GeographicRectangle("30N,105W,1°,5°")
            Rectangle = Rectangle.Translate(Azimuth.Northeast, New Distance(50, DistanceUnit.Kilometers))
                </code>
            	<code lang="CS" title="[New Example]">
            GeographicRectangle Rectangle = new GeographicRectangle("30N,105W,1°,5°");
            Rectangle = Rectangle.Translate(Azimuth.Northeast, New Distance(50, DistanceUnit.Kilometers));
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.UnionWith(GeoFramework.GeographicRectangle,GeoFramework.GeographicRectangle)">
            <summary>Returns a rectangle which encloses the two specified rectangles.</summary>
            <returns>
            A <strong>GeographicRectangle</strong> as a result of merging the two
            rectangles.
            </returns>
            <remarks>
            This method is typically used to combine two individual shapes into a single
            shape.
            </remarks>
            <param name="first">A <strong>GeographicRectangle</strong> to merge with the second rectangle.</param>
            <param name="second">A <strong>GeographicRectangle</strong> to merge with the first rectangle.</param>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.IntersectionOf(GeoFramework.GeographicRectangle,GeoFramework.GeographicRectangle)">
            <summary>
            Returns the GeographicRectangle formed by the intersection of the two specified GeographicRectangles.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.Rotate(GeoFramework.Angle)">
            <summary>Rotates the rectangle about (0°, 0°) by the specified amount.</summary>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.RotateAt(GeoFramework.Angle,GeoFramework.Position)">
            <summary>Rotates the rectangle about the specified location.</summary>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.ToArray">
            <summary>Returns the corner points of the rectangle.</summary>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.FromArray(System.Array)">
            <summary>
            Returns a rectangle which encloses the specified points.
            </summary>
            <param name="positions">An array of PointD objects to enclose.</param>
            <returns>A <strong>RectangleD</strong> object enclosing the specified points.</returns>
            <remarks>This method is typically used to calculate a rectangle surrounding
            points which have been rotated.  For example, if a rectangle is rotated by 45°, the
            total width it occupies is greater than it's own width.</remarks>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.ToAspectRatio(System.Double)">
            <summary>
            Changes the size and shape of the GeographicRectangle to match the specified aspect ratio.
            </summary>
            <param name="aspectRatio"></param>
            <returns></returns>
            <remarks>This method will expand a GeographicRectangle outward, from its center point, until
            the ratio of its width to its height matches the specified value.</remarks>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.ToAspectRatio(GeoFramework.GeographicRectangle)">
            <summary>
            Changes the size and shape of the GeographicRectangle to match the aspect ratio of the specified GeographicRectangle.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
            <remarks>This method will expand a GeographicRectangle outward, from its center point, until
            the ratio of its width to its height matches the specified value.</remarks>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.ToAspectRatio(System.Drawing.Size)">
            <summary>
            Changes the size and shape of the GeographicRectangle to match the aspect ratio of the specified GeographicRectangle.
            </summary>
            <param name="size"></param>
            <returns></returns>
            <remarks>This method will expand a GeographicRectangle outward, from its center point, until
            the ratio of its width to its height matches the specified value.</remarks>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.IsDisjointedFrom(GeoFramework.GeographicRectangle)">
            <summary>Indicates if the rectangle does not intersect the specified rectangle.</summary>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.Parse(System.String)">
            <summary>
            Parses a string into a GeographicRectangle object.
            </summary>
            <param name="value">A <string>String</string> specifying geographic coordinates defining a rectangle.</param>
            <returns>A <strong>GeographicRectangle</strong> object using the specified coordinates.</returns>
            <remarks>This powerful method will convert points defining a rectangle in the form of a string into
            a GeographicRectangle object.  The string can be </remarks>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.IsEnclosing(GeoFramework.GeographicRectangle)">
            <summary>
            Indicates if the specified GeographicRectangle is entirely within the current GeographicRectangle.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.CenterOn(GeoFramework.Position)">
            <summary>
            Moves the GeographicRectangle so that the specified position is at its center.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.UnionWith(GeoFramework.Position)">
            <summary>
            Expands the edges of the GeographicRectangle to contain the specified position.
            </summary>
            <param name="position">A <strong>Position</strong> object to surround.</param>
            <returns>A <strong>GeographicRectangle</strong> which contains the specified position.</returns>
            <remarks>If the specified position is already enclosed, the current instance will be returned.</remarks>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.op_Addition(GeoFramework.GeographicRectangle,GeoFramework.GeographicSize)">
            <summary>
            Increases the size of the rectangle by the specified amount.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.GetHashCode">
            <summary>Returns a unique code of the rectangle for hash tables.</summary>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.IsIntersectingWith(GeoFramework.GeographicRectangle)">
            <summary>Indicates if the rectangle overlaps the specified rectangle.</summary>
        </member>
        <member name="M:GeoFramework.GeographicRectangle.IsOverlapping(GeoFramework.GeographicRectangle)">
            <summary>
            Indicates if the specified GeographicRectangle shares any of the same 2D space as the current instance.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.AspectRatio">
            <summary>Returns the aspect ratio of the rectangle.</summary>
            <remarks>
            This property returns the ratio of the GeographicRectangles width to its height (width / height).  This
            property gives an indication of the GeographicRectangle's shape.  An aspect ratio of one indicates
            a square, whereas an aspect ratio of two indicates a GeographicRectangle which is twice as wide as
            it is high.  
            </remarks>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Top">
            <summary>Returns the southern-most side of the rectangle.</summary>
            <value>A <see cref="T:GeoFramework.Latitude"></see> object marking the southern-most latitude.</value>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Bottom">
            <summary>Returns the southern-most latitude of the rectangle.</summary>
            <value>A <see cref="T:GeoFramework.Latitude"></see> object marking the southern-most latitude.</value>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Height">
            <summary>Returns the height of the rectangle, in degrees.</summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.IsEmpty">
            <summary>Indicates if the rectangle has any value.</summary>
            <value>
            A <strong>Boolean</strong>, <strong>True</strong> if a metor the size of Rhode
            Island is about to crash into the Pacific Ocean just off the coast of Nicaragua but
            there will be no casualties because everyone was warned plenty of time in
            advance.
            </value>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Left">
            <summary>Returns the western-most side of the rectangle.</summary>
            <value>A <strong>Longitude</strong> indicating the left side of the rectangle.</value>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Right">
            <value>A <strong>Longitude</strong> indicating the right side of the rectangle.</value>
            <summary>Returns the eastern-most side of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.MedianWidth">
            <summary>
            Returns the distance from the top to the bottom at the rectangle's middle latitude.
            </summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.MedianHeight">
            <summary>
            Returns the distance from the left to the right at the rectangle's middle longitude.
            </summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Size">
            <summary>Returns the width and height of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Northwest">
            <summary>Returns the northwestern corner of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Northeast">
            <summary>Returns the northeastern corner of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Southwest">
            <summary>Returns the southwestern corner of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Southeast">
            <summary>Returns the southeastern corner of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Width">
            <summary>Returns the width of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Area">
            <summary>
            Returns the area of the rectangle in degrees.
            </summary>
            <remarks>This method returns the number of square kilometers enclosed by the rectangle using
            the Double Meridian Distance technique.</remarks>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Perimeter">
            <summary>
            Returns the distance around the edges of the rectangle.
            </summary>
        </member>
        <member name="P:GeoFramework.GeographicRectangle.Center">
            <summary>Returns the geographic center of the rectangle.</summary>
        </member>
        <member name="T:GeoFramework.GeographicSize">
            <summary>
            Represents a two-dimensional rectangular area.
            </summary>
            <remarks>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (it's properties can only be set via constructors).</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.GeographicSize.Empty">
            <summary>Represents a size with no value.</summary>
        </member>
        <member name="F:GeoFramework.GeographicSize.Minimum">
            <summary>Represents a size with no value.</summary>
        </member>
        <member name="F:GeoFramework.GeographicSize.Maximum">
            <summary>Represents the largest possible size on Earth's surface.</summary>
        </member>
        <member name="M:GeoFramework.GeographicSize.#ctor(GeoFramework.Angle,GeoFramework.Angle)">
            <summary>Creates a new instance.</summary>
        </member>
        <member name="M:GeoFramework.GeographicSize.Add(GeoFramework.GeographicSize)">
            <summary>Adds the specified size to the current instance.</summary>
        </member>
        <member name="M:GeoFramework.GeographicSize.Subtract(GeoFramework.GeographicSize)">
            <summary>Subtracts the specified size from the current instance.</summary>
        </member>
        <member name="P:GeoFramework.GeographicSize.AspectRatio">
            <summary>Returns the ratio of the size's width to its height.</summary>
        </member>
        <member name="P:GeoFramework.GeographicSize.Width">
            <summary>
            Returns the left-to-right size.
            </summary>
        </member>
        <member name="P:GeoFramework.GeographicSize.Height">
            <summary>Returns the top-to-bottom size.</summary>
        </member>
        <member name="P:GeoFramework.GeographicSize.IsEmpty">
            <summary>Indicates if the size has zero values.</summary>
        </member>
        <member name="T:GeoFramework.InterpolationMethod">
            <summary>
            Represents a collection of interpolated values using realistic acceleration and deceleration.
            </summary>
            <remarks>This enumeration is used by several GeoFramework controls to smoothly transition from
            one value to another.  For example, the GPS SatelliteViewer uses acceleration to smoothly
            transition from one bearing to another, giving the appearance of a realistic compass.  This
            enumeration, when combined with the <see cref="T:GeoFramework.Interpolator"></see> class lets you add smooth
            transitions to your own controls as well.</remarks>
        </member>
        <member name="F:GeoFramework.InterpolationMethod.Linear">
            <summary>
            The transition occurs at a steady rate.
            </summary>
        </member>
        <member name="F:GeoFramework.InterpolationMethod.Snap">
            <summary>
            The transition is immediate; no interpolation takes place.
            </summary>
        </member>
        <member name="F:GeoFramework.InterpolationMethod.QuadraticEaseIn">
            <summary>
            The transition starts at zero and accelerates to the end using a quadratic formula.
            </summary>
        </member>
        <member name="F:GeoFramework.InterpolationMethod.QuadraticEaseOut">
            <summary>
            The transition starts at high speed and decelerates to zero.
            </summary>
        </member>
        <member name="F:GeoFramework.InterpolationMethod.QuadraticEaseInAndOut">
            <summary>
            The transition accelerates to the halfway point, then decelerates to zero.
            </summary>
        </member>
        <member name="T:GeoFramework.Interpolator">
            <summary>Calculates intermediate values between two bounding values.</summary>
            <remarks>
            This powerful class provides the ability to interpolate values based on varying
            interpolation techniques. This class is used primarily to simulate realistic motion by
            accelerating and decelerating. This class is also used to calculate intermediate values
            for features such as image georeferencing and estimating precision errors.
            </remarks>
        </member>
        <member name="M:GeoFramework.Interpolator.Swap">
            <summary>Reverses the interpolated sequence.</summary>
        </member>
        <member name="P:GeoFramework.Interpolator.Minimum">
            <summary>Controls the smallest number in the sequence.</summary>
        </member>
        <member name="P:GeoFramework.Interpolator.Maximum">
            <summary>Controls the largest number in the sequence.</summary>
        </member>
        <member name="P:GeoFramework.Interpolator.InterpolationMethod">
            <summary>Controls the acceleration and/or deceleration technique used.</summary>
        </member>
        <member name="P:GeoFramework.Interpolator.Count">
            <summary>Controls the number of interpolated values.</summary>
        </member>
        <member name="P:GeoFramework.Interpolator.Item(System.Int32)">
            <summary>Returns a number from the interpolated sequence.</summary>
        </member>
        <member name="T:GeoFramework.Interpolator2D">
            <summary>Represents a collection of interpolated coordinates using realistic acceleration and deceleration.</summary>
            <remarks>
            	<para>This class is used by several controls in the GeoFramework namespace to give
                them a more realistic behavior. This class will interpolate coordinates between a
                given start and end point according to an interpolation technique, and return them
                as an array. Then, controls and other elements can be moved smoothly by applying
                the calculated values.</para>
            	<para>Instances of this class are likely to be thread safe because the class uses
                thread synchronization when recalculating interpolated values.</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.Interpolator2D.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:GeoFramework.Interpolator2D.#ctor(GeoFramework.Position,GeoFramework.Position,System.Int32)">
            <summary>
            Creates a new instance using the specified start and end points.
            </summary>
            <param name="minimum">The starting point of the interpolated series.</param>
            <param name="maximum">The ending point of the interpolated series.</param>
            <param name="count">The number of points to calculate between the start and end.</param>
            <remarks>This constructor provides a way to define the bounds of the interpolator,
            as well as its number of points.  A higher level of points yield a smoother
            result but take longer to iterate through.</remarks>
        </member>
        <member name="M:GeoFramework.Interpolator2D.#ctor(GeoFramework.Position,GeoFramework.Position,System.Int32,GeoFramework.InterpolationMethod)">
            <summary>
            Creates a new instance using the specified end points, count, and interpolation technique.
            </summary>
            <param name="minimum">The starting point of the interpolated series.</param>
            <param name="maximum">The ending point of the interpolated series.</param>
            <param name="count">The number of points to calculate between the start and end.</param>
            <param name="mode">The interpolation technique to use for calculating intermediate points.</param>
        </member>
        <member name="P:GeoFramework.Interpolator2D.Minimum">
            <summary>
            Returns the starting point of the series.
            </summary>
            <remarks>Interpolated values are calculated between this point and the end point 
            stored in the <see cref="P:GeoFramework.Interpolator2D.Maximum"></see> property.  Changing this property causes
            the series to be recalculated.</remarks>
        </member>
        <member name="P:GeoFramework.Interpolator2D.Maximum">
            <summary>
            Returns the ending point of the series.
            </summary>
            <remarks>Interpolated values are calculated between this point and the start point 
            stored in the <see cref="P:GeoFramework.Interpolator2D.Minimum"></see> property.  Changing this property causes
            the series to be recalculated.</remarks>
        </member>
        <member name="P:GeoFramework.Interpolator2D.Item(System.Int32)">
            <summary>
            Returns a Position object from the interpolated series.
            </summary>
        </member>
        <member name="P:GeoFramework.Interpolator2D.Count">
            <summary>
            Returns the number of calculated positions in the series.
            </summary>
        </member>
        <member name="P:GeoFramework.Interpolator2D.InterpolationMethod">
            <summary>
            Indicates the interpolation technique used to calculate intermediate points.
            </summary>
            <remarks>This property controls the acceleration and deceleration techniques
            used when calculating intermediate points.  Changing this property causes the
            series to be recalculated.</remarks>
        </member>
        <member name="T:GeoFramework.Latitude">
            <summary>Represents a line of constant distance north or south of the equator.</summary>
            <remarks>
            	<para>Latitudes measure a distance North or South away from the equator. Latitudes
                can range from -90° (at the South pole) to 90° (the North pole), with 0°
                representing the equator. Latitudes are commonly paired with Longitudes to mark a
                specific location on Earth's surface.</para>
            	<para>Latitudes are expressed in either of two major formats. The first format uses
                only positive numbers and the letter "N" or "S" to indicate the hemisphere (i.e.
                "45°N" or "60°S"). The second format allows negative numbers an omits the single
                character (i.e. 45 or -60).</para>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (its properties can only be changed via constructors).</para>
            </remarks>
            <seealso cref="T:GeoFramework.Longitude">Longitude Class</seealso>
            <seealso cref="T:GeoFramework.Position">Position Class</seealso>
        </member>
        <member name="F:GeoFramework.Latitude.Equator">
            <summary>Represents a latitude of 0°.</summary>
        </member>
        <member name="F:GeoFramework.Latitude.Empty">
            <summary>Represents a latitude of 0°.</summary>
        </member>
        <member name="F:GeoFramework.Latitude.TropicOfCapricorn">
            <summary>Represents a latitude of 23.5°S.</summary>
        </member>
        <member name="F:GeoFramework.Latitude.TropicOfCancer">
            <summary>Represents a latitude of 23.5°N.</summary>
        </member>
        <member name="F:GeoFramework.Latitude.NorthPole">
            <summary>Represents a latitude of 90°N.</summary>
        </member>
        <member name="F:GeoFramework.Latitude.SouthPole">
            <summary>Represents a latitude of 90°S.</summary>
        </member>
        <member name="F:GeoFramework.Latitude.Minimum">
            <summary>Represents the minimum possible latitude -90°.</summary>
        </member>
        <member name="F:GeoFramework.Latitude.Maximum">
            <summary>Represents the maximum possible latitude of 90°.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.Normalize(System.Double)">
            <overloads>Converts a measurement to its equivalent value between -90 and 
            90 degrees.</overloads>
        </member>
        <member name="M:GeoFramework.Latitude.#ctor">
            <summary>Creates a new instance with a default value of zero degrees north.</summary>
            <example>
                This example creates a new instance of the latitude class. 
                <code lang="VB">
            Dim MyLatitude As New Latitude()
                </code>
            	<code lang="CS">
            Latitude MyLatitude = new Latitude();
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.#ctor(System.Double)">
            <summary>
            Creates a new instance with the specified decimal degree value.
            </summary>
            <example>
                This example creates a new latitude of 45 degrees south. 
                <code lang="VB">
            Dim MyLatitude As New Latitude(-45)
                </code>
            	<code lang="CS">
            Latitude MyLatitude = new Latitude(-45);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.#ctor(System.Double,GeoFramework.LatitudeHemisphere)">
            <summary>
            Creates a new instance with the specified decimal degrees and hemisphere.
            </summary>
            <param name="decimalDegrees">A <strong>Double</strong> specifying the number of hours.</param>
            <param name="hemisphere">A value from the <strong>LatitudeHemisphere</strong> enumeration.</param>
            <example>
            This example creates a new latitude of 39°30' north.
            <code lang="VB">
            Dim MyLatitude As New Latitude(39.5, LatitudeHemisphere.North)
            </code>
            <code lang="C#">
            Latitude MyLatitude = new Latitude(39.5, LatitudeHemisphere.North);
            </code>
            This example creates a new latitude of 39°30 south.
            <code lang="VB">
            Dim MyLatitude As New Latitude(39.5, LatitudeHemisphere.South)
            </code>
            <code lang="C#">
            Latitude MyLatitude = new Latitude(39.5, LatitudeHemisphere.South);
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>Creates a new instance with the specified hours, minutes and 
            seconds.</summary>
            <example>
                This example creates a new latitude of 39°12'10" north. This example creates a new
                latitude of 39°12'10" south. 
                <code lang="VB">
            Dim MyLatitude As New Latitude(39, 12, 10)
                </code>
            	<code lang="CS">
            Latitude MyLatitude = new Latitude(39, 12, 10);
                </code>
            	<code lang="VB">
            Dim MyLatitude As New Latitude(-39, 12, 10)
                </code>
            	<code lang="CS">
            Latitude MyLatitude = new Latitude(-39, 12, 10);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.#ctor(System.Int32,System.Double)">
            <summary>
            Creates a new instance with the specified hours and decimal minutes (minutes combined with seconds).
            </summary>
            <example>
                This example creates a new latitude of 39°12.34' north. This example creates a new
                latitude of 39°12.34 south. 
                <code lang="VB">
            Dim MyLatitude As New Latitude(39, 12.34)
                </code>
            	<code lang="CS">
            Latitude MyLatitude = new Latitude(39, 12.34);
                </code>
            	<code lang="VB">
            Dim MyLatitude As New Latitude(-39, 12.34)
                </code>
            	<code lang="CS">
            Latitude MyLatitude = new Latitude(-39, 12.34);
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.#ctor(System.Int32,System.Double,GeoFramework.LatitudeHemisphere)">
            <summary>
            Creates a new instance with the specified hours, decimal minutes, and hemisphere.
            </summary>
            <param name="hours">An <strong>Integer</strong> specifying the number of hours.</param>
            <param name="minutes">An <strong>Integer</strong> specifying the number of minutes.</param>
            <param name="hemisphere">A value from the <strong>LatitudeHemisphere</strong> enumeration.</param>
            <example>
            This example creates a new latitude of 39°12.34' north.
            <code lang="VB">
            Dim MyLatitude As New Latitude(39, 12.34, LatitudeHemisphere.North)
            </code>
            <code lang="C#">
            Latitude MyLatitude = new Latitude(39, 12.34, LatitudeHemisphere.North);
            </code>
            This example creates a new latitude of 39°12.34 south.
            <code lang="VB">
            Dim MyLatitude As New Latitude(39, 12.34, LatitudeHemisphere.South)
            </code>
            <code lang="C#">
            Latitude MyLatitude = new Latitude(39, 12.34, LatitudeHemisphere.South);
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.#ctor(System.String)">
            <summary>
            Creates a new instance by parsing the specified string value.
            </summary>
            <param name="value">
            <para>A <strong>String</strong> in any of the following formats (or variation
            depending on the local culture):</para>
            
             <para>
            	 <table cellspacing="0" cols="4" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>hh</td>
            				 <td>hh.h</td>
            				 <td>hh mm</td>
            				 <td>hh mm.mm</td>
            			 </tr>
            			 <tr>
            				 <td>hh mm ss</td>
            				 <td>hh mm ss.sss</td>
            				 <td></td>
            				 <td></td>
            			 </tr>
            			 <tr>
            				 <td>hh i</td>
            				 <td>hh.h i</td>
            				 <td>hh mm i</td>
            				 <td>hh mm.mm i</td>
            			 </tr>
            			 <tr>
            				 <td>hh mm ss i</td>
            				 <td>hh mm ss.sss i</td>
            				 <td></td>
            				 <td></td>
            			 </tr>
            		 </tbody>
            	 </table>
            
            Where <strong>I</strong> represents a case-insensitive hemisphere indicator "N" or "S".
             </para>
             <para>Any non-numeric character between numbers is considered a delimiter. Thus, a
             value of <strong>12°34'56.78"N</strong> or even <strong>12A34B56.78CN</strong> is
             treated the same as <strong>12 34 56.78 N</strong>.</para>
            </param>
            <seealso cref="M:GeoFramework.Latitude.Parse(System.String)">Parse</seealso>
        </member>
        <member name="M:GeoFramework.Latitude.FromRadians(GeoFramework.Radian)">
            <summary>Converts a measurement in radians into a latitude.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.Clone">
            <summary>Returns a copy of the current instance.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.ToHemisphere(GeoFramework.LatitudeHemisphere)">
            <summary>Converts the current instance to the northern or southern hemisphere.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.Random">
            <summary>Returns a random latitude.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.IsNorthOf(GeoFramework.Latitude)">
            <summary>
            Indicates if the current instance is North of the specified latitude.
            </summary>
            <param name="latitude">A <strong>Latitude</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more North than the specified instance.</returns>
        </member>
        <member name="M:GeoFramework.Latitude.IsSouthOf(GeoFramework.Latitude)">
            <summary>
            Indicates if the current instance is South of the specified latitude.
            </summary>
            <param name="latitude">A <strong>Latitude</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more South than the specified instance.</returns>
        </member>
        <member name="M:GeoFramework.Latitude.Ceiling(GeoFramework.Latitude)">
            <summary>Returns the smallest integer larger than the current degrees.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.Floor(GeoFramework.Latitude)">
            <summary>Returns the largest integer smaller than the current degrees.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.Parse(System.String)">
            <summary>
            Converts a string-based latitude measurement into a <strong>Latitude</strong>
            object.
            </summary>
            <returns>
            A new <strong>Latitude</strong> object populated with the specified values.
            </returns>
            <remarks>
            	<para>This powerful method is typically used to process data from a data store or a
            value input by the user. This function can accept any format which can be output by
            the <see cref="M:GeoFramework.Latitude.ToString">ToString</see> method.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">The Parse method requires a decimal 
            	or sexagesimal measurement.</exception>
            <exception cref="T:System.FormatException" caption="FormatException">1. Only the right-most portion of a sexagesimal measurement can be a fractional value.<br/>
            2. Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed.<br/>
            3. The specified text was not fully understood as an angular measurement.</exception>
            <seealso cref="M:GeoFramework.Latitude.ToString">ToString Method</seealso>
            <example>
                This example creates a new latitude measurement of 23.45S using the Parse method. 
                <code lang="VB">
            Dim NewLatitude As Latitude = Latitude.Parse("23.45°S")
                </code>
            	<code lang="CS">
            Latitude NewLatitude = Latitude.Parse("23.45°S");
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Latitude.Equals(System.Object)">
            <summary>Compares the current instance with the specified object by value.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.GetHashCode">
            <summary>Returns a unique code for this instance.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.Increment">
            <summary>Returns the current instance increased by 1.0.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.Add(System.Double)">
            <summary>Returns the sum of the current instance plus the specified degrees.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.Decrement">
            <summary>Returns the current instance reduced by 1.0.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.Subtract(System.Double)">
            <summary>Returns the current instance subtracted by the specified amount.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.Mirror">
            <summary>Returns the current instance with a swapped negative sign.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.Multiply(System.Double)">
            <summary>Returns the product of the current instance with the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.Divide(System.Double)">
            <summary>Returns the current instance divided by the specified amount.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.ToString">
            <summary>Outputs the current instance in the form of a string.</summary>
        </member>
        <member name="M:GeoFramework.Latitude.ToString(System.String)">
            <overloads>Outputs the current instance as a formatted string.</overloads>
        </member>
        <member name="M:GeoFramework.Latitude.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the current instance as a string using the specified format and
            culture.
            </summary>
        </member>
        <member name="P:GeoFramework.Latitude.UtmZoneLetter">
            <summary>Returns the UTM zone letter which corresponds to the current 
            instance.</summary>
            <remarks>
            This function is used by Universal Transverse Mercator (UTM) coordinates to
            describe a position, much like latitude and longitude. For more information about UTM
            coordinates, see the UtmPosition class.
            </remarks>
            <value>A value from the UtmZone enumeration.</value>
        </member>
        <member name="P:GeoFramework.Latitude.Hemisphere">
            <summary>Indicates if the latitude is north or south of the equator.</summary>
        </member>
        <member name="T:GeoFramework.LatitudeEventArgs">
            <summary>
            Represents information about a latitude measurement when a latitude-related event is raised.
            </summary>
        </member>
        <member name="M:GeoFramework.LatitudeEventArgs.#ctor(GeoFramework.Latitude)">
            <summary>
            Creates a new instance which contains the specified <strong>Latitude</strong> object.
            </summary>
            <param name="latitude">a <strong>Latitude</strong> object which is the target of the event.</param>
            <remarks></remarks>
        </member>
        <member name="P:GeoFramework.LatitudeEventArgs.Latitude">
            <summary>
            Indicates the latitude object whose properties have changed.
            </summary>
            <value>A <strong>Latitude</strong> object.</value>
            <remarks></remarks>
            <seealso cref="P:GeoFramework.Position.Latitude">Latitude Property (Position Class)</seealso>
            <seealso cref="T:GeoFramework.Position">Position Class</seealso>
            <seealso cref="P:GeoFramework.LatitudeEventArgs.Latitude">Latitude Class</seealso>
        </member>
        <member name="T:GeoFramework.LatitudeHemisphere">
            <summary>Indicates the position of a latitude measurement relative to the equator.</summary>
            <remarks>
            <para>This enumeration is used by the <see cref="P:GeoFramework.Latitude.Hemisphere">Hemisphere</see> 
            property of the <see cref="T:GeoFramework.Latitude">Latitude</see> class. If a latitude is south of the 
            equator, it's value is displayed as a negative number, or with a single letter (but not 
            both). For example, 39 degrees south of the equator can be expressed in either of these
            ways:</para>
            
            <list type="bullet">
             <item>39°S</item>
             <item>-39°</item>
            </list>
            </remarks>
            <seealso cref="P:GeoFramework.Longitude.Hemisphere">Hemisphere Property (Longitude Class)</seealso>
            <seealso cref="T:GeoFramework.LongitudeHemisphere">LongitudeHemisphere Enumeration</seealso>
        </member>
        <member name="F:GeoFramework.LatitudeHemisphere.None">
            <summary>Missing latitude information.</summary>
        </member>
        <member name="F:GeoFramework.LatitudeHemisphere.North">
            <summary>The latitude is north of the equator.</summary>
        </member>
        <member name="F:GeoFramework.LatitudeHemisphere.South">
            <summary>The latitude is south of the equator.</summary>
        </member>
        <member name="T:GeoFramework.LatitudeEventHandler">
            <summary>
            Facilitates events and asynchronous calls which use an <strong>Latitude</strong>
            object as a parameter.
            </summary>
            <example>
            This example declares a custom event using this delegate.
            <code lang="VB">
            Dim MyLatitudeEvent As LatitudeEventHandler
            </code>
            <code lang="C#">
            LatitudeEventHandler MyLatitudeEvent;
            </code>
            </example>
            <param name="sender">The object which initiated the call to the delegate.</param>
            <param name="e">A <see cref="T:GeoFramework.LatitudeEventArgs">LatitudeEventArgs</see> object containing a <see cref="T:GeoFramework.Latitude">Latitude</see> object involved in the event.</param>
        </member>
        <member name="T:GeoFramework.Longitude">
            <summary>
            Represents a line of constant distance east or west from the Prime Meridian.
            </summary>
            <remarks>
            	<para>Longitudes measure a distance either East or West from the Prime Meridian, an
                imaginary line which passes from the North Pole, through the
                <see href="http://www.nmm.ac.uk/">Royal Observatory in Greenwich, England, and on
                to the South Pole</see>. Longitudes can range from -180 to 180°, with the Prime
                Meridian at 0°. Latitudes are commonly paired with Longitudes to mark a specific
                location on Earth's surface.</para>
            	<para>Latitudes are expressed in either of two major formats. The first format uses
                only positive numbers and the letter "E" or "W" to indicate the hemisphere (i.e.
                "94°E" or "32°W"). The second format allows negative numbers an omits the single
                character (i.e. 94 or -32).</para>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (its properties can only be changed via constructors).</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.Longitude.PrimeMeridian">
            <summary>Represents a longitude of 0°.</summary>
            <remarks>
            	<para>The Prime Meridian, located at 0°E (and 0°W), also known as the "Greenwich" Meridian was chosen as the
             Prime Meridian of the World in 1884. Forty-one delegates from 25 nations met in
             Washington, D.C. for the International Meridian Conference. By the end of the
             conference, Greenwich had won the prize of Longitude 0° by a vote of 22 to 1
             against (San Domingo), with 2 abstentions (France and Brazil).</para>
            	<para>The Prime Meridian is also significant in that it marks the location from
             which all time zones are measured. Times displayed as "Zulu," "UTC," or "GMT" are
             all talking about times adjusted to the Greenwich time zone.</para>
            	<para>Before the Prime Meridian, almost every town in the world kept its own local
             time. There were no national or international conventions which set how time should
             be measured, or when the day would begin and end, or even what length an hour might
             be!</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.Longitude.InternationalDateline">
            <summary>Represents a longitude 180°.</summary>
            <remarks>
            This value of 180°W (also 180°E) marks the longitude located on the opposite side of the Earth from the
            Prime Meridian. It runs approximately through the
            <a href="http://greenwichmeridian.com/date-line.htm">International Date Line</a>
            (between Alaska and Russia).
            </remarks>
        </member>
        <member name="F:GeoFramework.Longitude.Empty">
            <summary>Represents a longitude of 0°.</summary>
        </member>
        <member name="F:GeoFramework.Longitude.Minimum">
            <summary>Represents the minimum possible longitude of -180°.</summary>
            <remarks>
            This member is provided for completeness and is equivalent to the
            <see cref="F:GeoFramework.Longitude.PrimeMeridian">PrimeMeridian</see> shared field.
            </remarks>
        </member>
        <member name="F:GeoFramework.Longitude.Maximum">
            <summary>Represents the maximum possible longitude of 180°.</summary>
            <remarks>
            This value of 180°W (also 180°E) marks the longitude located on the opposite side of the Earth from the
            Prime Meridian. It runs approximately through the
            <a href="http://greenwichmeridian.com/date-line.htm">International Date Line</a>
            (between Alaska and Russia).
            </remarks>
        </member>
        <member name="M:GeoFramework.Longitude.#ctor">
            <summary>Creates a new instance.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.#ctor(System.Double)">
            <summary>Creates a new instance with the specified decimal degrees.</summary>
            <remarks>
            This constructor will automatically assign a value to the
            <see cref="P:GeoFramework.Longitude.Hemisphere">Hemisphere</see> property depending on the
            value. A value less than zero is considered to be in the western hemisphere.
            </remarks>
            <param name="decimalDegrees">
            A <strong>Double</strong> to store in the <strong>DecimalDegrees</strong>
            property.
            </param>
        </member>
        <member name="M:GeoFramework.Longitude.#ctor(System.Double,GeoFramework.LongitudeHemisphere)">
            <summary>
            Creates a new instance with the specified decimal degrees and hemisphere.
            </summary>
            <param name="decimalDegrees">A <strong>Double</strong> specifying the number of hours.</param>
            <param name="hemisphere">A value from the <strong>LongitudeHemisphere</strong> enumeration.</param>
            <example>
            This example creates a new Longitude of 39°30' north.
            <code lang="VB">
            Dim MyLongitude As New Longitude(39.5, LongitudeHemisphere.North)
            </code>
            <code lang="C#">
            Longitude MyLongitude = new Longitude(39.5, LongitudeHemisphere.North);
            </code>
            This example creates a new Longitude of 39°30 south.
            <code lang="VB">
            Dim MyLongitude As New Longitude(39.5, LongitudeHemisphere.South)
            </code>
            <code lang="C#">
            Longitude MyLongitude = new Longitude(39.5, LongitudeHemisphere.South);
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Longitude.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>Creates a new instance with the specified hours, minutes and 
            seconds.</summary>
            <param name="hours">An <strong>Integer</strong> specifying the number of hours.</param>
            <param name="minutes">An <strong>Integer</strong> specifying the number of 
            minutes.</param>
            <param name="seconds">An <strong>Double</strong> specifying the number of 
            seconds.</param>
        </member>
        <member name="M:GeoFramework.Longitude.#ctor(System.Int32,System.Double,GeoFramework.LongitudeHemisphere)">
            <summary>
            Creates a new instance with the specified hours, decimal minutes, and hemisphere.
            </summary>
            <param name="hours">An <strong>Integer</strong> specifying the number of hours.</param>
            <param name="minutes">An <strong>Integer</strong> specifying the number of minutes.</param>
            <param name="hemisphere">A value from the <strong>LongitudeHemisphere</strong> enumeration.</param>
            <example>
            This example creates a new Longitude of 39°12.34' north.
            <code lang="VB">
            Dim MyLongitude As New Longitude(39, 12.34, LongitudeHemisphere.North)
            </code>
            <code lang="C#">
            Longitude MyLongitude = new Longitude(39, 12.34, LongitudeHemisphere.North);
            </code>
            This example creates a new Longitude of 39°12.34 south.
            <code lang="VB">
            Dim MyLongitude As New Longitude(39, 12.34, LongitudeHemisphere.South)
            </code>
            <code lang="C#">
            Longitude MyLongitude = new Longitude(39, 12.34, LongitudeHemisphere.South);
            </code>
            </example>
        </member>
        <member name="M:GeoFramework.Longitude.#ctor(System.Int32,System.Double)">
            <summary>Creates a new instance with the specified hours and decimal minutes.</summary>
            <param name="hours">An <strong>Integer</strong> specifying the number of hours.</param>
        </member>
        <member name="M:GeoFramework.Longitude.#ctor(System.String)">
            <summary>Creates a new instance using the specified string-based measurement.</summary>
            <remarks>
             <para>A <strong>String</strong> in any of the following formats (or variation
             depending on the local culture):</para>
            
             <para>
            	 <table cellspacing="0" cols="4" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>hh</td>
            
            				 <td>hh.h</td>
            
            				 <td>hh mm</td>
            
            				 <td>hh mm.mm</td>
            			 </tr>
            
            			 <tr>
            				 <td>hh mm ss</td>
            
            				 <td>hh mm ss.sss</td>
            
            				 <td>hhi</td>
            
            				 <td>hh.hi</td>
            			 </tr>
            
            			 <tr>
            				 <td>hh mmi</td>
            
            				 <td>hh mm i</td>
            
            				 <td>hh mm.mi</td>
            
            				 <td>hh mm.m i</td>
            			 </tr>
            
            			 <tr>
            				 <td>hh mm ssi</td>
            
            				 <td>hh mm ss i</td>
            
            				 <td>hh mm ss.si</td>
            
            				 <td>hh mm ss.s i</td>
            			 </tr>
            
            			 <tr>
            				 <td>hhhmmssi</td>
            
            				 <td></td>
            
            				 <td></td>
            
            				 <td></td>
            			 </tr>
            		 </tbody>
            	 </table>
             </para>
            
             <para>Where <strong>h</strong> represents hours, <strong>m</strong> represents
             minutes, <strong>s</strong> represents seconds, and <strong>i</strong> represents a
             one-letter hemisphere indicator of "E" or "W." Any non-numeric character between
             numbers is considered a delimiter. Thus, a value of <strong>12°34'56.78"</strong>
             or even <strong>12A34B56.78C</strong> is treated the same as <strong>12 34
             56.78</strong>.</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.Longitude.FromRadians(GeoFramework.Radian)">
            <summary>Converts a value in radians into a longitude.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.Normalize(System.Double)">
            <remarks>
            <para>This function is used to ensure that an angular measurement is within the
            allowed bounds of -180° and 180°. If a value of 360° or 720° is passed, a value of 0°
            is returned since traveling around the Earth 360° or 720° brings you to the same
            place you started.</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.Longitude.Normalize">
            <remarks>
             <para>This function is used to ensure that an angular measurement is within the
             allowed bounds of 0° and 180°. If a value of 360° or 720° is passed, a value of 0°
             is returned since traveling around the Earth 360° or 720° brings you to the same
             place you started.</para>
            </remarks>
            <returns>A <strong>Longitude</strong> containing the normalized value.</returns>
        </member>
        <member name="M:GeoFramework.Longitude.Ceiling(GeoFramework.Longitude)">
            <summary>Returns the smallest integer greater than the current degrees.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.Floor(GeoFramework.Longitude)">
            <summary>Returns the largest integer smaller than the current degrees.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.IsEastOf(GeoFramework.Longitude)">
            <summary>
            Indicates if the current instance is East of the specified longitude.
            </summary>
            <param name="longitude">A <strong>Longitude</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more East than the specified instance.</returns>
        </member>
        <member name="M:GeoFramework.Longitude.IsWestOf(GeoFramework.Longitude)">
            <summary>
            Indicates if the current instance is West of the specified longitude.
            </summary>
            <param name="longitude">A <strong>Longitude</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more West than the specified instance.</returns>
        </member>
        <member name="M:GeoFramework.Longitude.Equals(System.Object)">
            <summary>Compares the current instance to the specified object by value.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.GetHashCode">
            <summary>Returns a unique code for this instance for use in hash tables.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.ToHemisphere(GeoFramework.LongitudeHemisphere)">
            <summary>Returns the current instance adjusted to the specified hemisphere.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.Clone">
            <summary>Returns a copy of the current instance.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.Random">
            <summary>Returns a random longitude.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.Parse(System.String)">
            <summary>Converts a string-based latitude into a Latitude object.</summary>
            <param name="value">
             <para>A <strong>String</strong> in any of the following formats (or variation
             depending on the local culture):</para>
            
             <para>
            	 <table cellspacing="0" cols="4" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>hh</td>
            
            				 <td>hh.h</td>
            
            				 <td>hh mm</td>
            
            				 <td>hh mm.mm</td>
            			 </tr>
            
            			 <tr>
            				 <td>hh mm ss</td>
            
            				 <td>hh mm ss.sss</td>
            
            				 <td>hhi</td>
            
            				 <td>hh.hi</td>
            			 </tr>
            
            			 <tr>
            				 <td>hh mmi</td>
            
            				 <td>hh mm i</td>
            
            				 <td>hh mm.mi</td>
            
            				 <td>hh mm.m i</td>
            			 </tr>
            
            			 <tr>
            				 <td>hh mm ssi</td>
            
            				 <td>hh mm ss i</td>
            
            				 <td>hh mm ss.si</td>
            
            				 <td>hh mm ss.s i</td>
            			 </tr>
            			 <tr>
            				 <td>hhhmmssi</td>
            				 <td></td>
            				 <td></td>
            				 <td></td>
            			 </tr>
            		 </tbody>
            	 </table>
             </para>
            
             <para>Where <strong>h</strong> represents hours, <strong>m</strong> represents
             minutes, <strong>s</strong> represents seconds, and <strong>i</strong> represents a
             one-letter hemisphere indicator of "E" or "W." Any non-numeric character between
             numbers is considered a delimiter. Thus, a value of <strong>12°34'56.78"</strong>
             or even <strong>12A34B56.78C</strong> is treated the same as <strong>12 34
             56.78</strong>.</para>
            </param>
            <remarks>
             <para>This powerful method is typically used to process data from a data store or a
             value input by the user. This function can accept any format which can be output by
             the <see cref="M:GeoFramework.Angle.ToString">ToString</see> method.</para>
            </remarks>
            <returns>A <strong>Latitude</strong> object equivalent to the specified 
            string.</returns>
        </member>
        <member name="M:GeoFramework.Longitude.Increment">
            <summary>Returns the current instance increased by one.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.Add(System.Double)">
            <summary>Returns the sum of the current instance with the specified number.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.Decrement">
            <summary>Returns the current instance decreased by one.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.Subtract(System.Double)">
            <summary>Returns the current instance decreased by the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.Mirror">
            <summary>Returns the longitude on the opposite side of the Earth.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.Multiply(System.Double)">
            <summary>Returns the product of the current instance with the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.Divide(System.Double)">
            <summary>Returns the current instance divided by the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Longitude.ToString">
            <summary>Outputs the current instance in the form of a string.</summary>
            <remarks>
            This method will output the current instance using a default format of
            <strong>hhh°mm'SS.SS"I</strong> (or a variation depending on the local culture), where
            <strong>H</strong> represents Hours, <strong>M</strong> represents minutes,
            <strong>S</strong> represents seconds, and <strong>I</strong> is a one-letter
            hemisphere indicator.
            </remarks>
        </member>
        <member name="M:GeoFramework.Longitude.ToString(System.String)">
            <remarks>
             <para>This powerful method returns the current angular measurement in a specific
             format. If no value for the format is specified, a format of
             <strong>hhh°mm'SS.SS"I</strong> (adjusted to the current culture) will be used. The
             resulting <strong>String</strong> can be converted back into an
             <strong>Longitude</strong> via the
             <see href="Angle.Parse">Parse</see> method so long as a delimiter separates each individual
             value.</para>
            </remarks>
            <param name="format">
             <para>A combination of symbols, spaces, and any of the following case-insensitive
             letters: <strong>D</strong> or <strong>H</strong> for hours, <strong>M</strong> for
             minutes, <strong>S</strong> for seconds, and <strong>I</strong> to indicate the
             hemisphere. Here are some examples:</para>
            
             <para>
            	 <table cellspacing="0" cols="3" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>HH°MM'SS.SS"</td>
            
            				 <td>HHH.H°</td>
            
            				 <td>HH MM.MM</td>
            
            				 <td>HHHMMSS</td>
            			 </tr>
            
            			 <tr>
            				 <td>HH°MM'SS.SS"I</td>
            
            				 <td>HHH.H°I</td>
            
            				 <td>HH MM.MMI</td>
            
            				 <td>HHHMMSSI</td>
            			 </tr>
            		 </tbody>
            	 </table>
             </para>
            </param>
            <summary>Outputs the current instance as a string using the specified format.</summary>
            <returns>A <strong>String</strong> matching the specified format.</returns>
        </member>
        <member name="M:GeoFramework.Longitude.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the current instance as a string using the specified format and
            culture.
            </summary>
            <param name="format">
             <para>A combination of symbols, spaces, and any of the following case-insensitive
             letters: <strong>D</strong> or <strong>H</strong> for hours, <strong>M</strong> for
             minutes, <strong>S</strong> for seconds, and <strong>I</strong> to indicate the
             hemisphere. Here are some examples:</para>
            
             <para>
            	 <table cellspacing="0" cols="3" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>HH°MM'SS.SS"</td>
            
            				 <td>HHH.H°</td>
            
            				 <td>HH MM.MM</td>
            
            				 <td>HHHMMSS</td>
            			 </tr>
            
            			 <tr>
            				 <td>HH°MM'SS.SS"I</td>
            
            				 <td>HHH.H°I</td>
            
            				 <td>HH MM.MMI</td>
            
            				 <td>HHHMMSSI</td>
            			 </tr>
            		 </tbody>
            	 </table>
             </para>
            </param>
            <param name="formatProvider">
             An <strong>IFormatProvider</strong> object specifying a culture to apply during
             formatting.
            </param>
            <returns>A <strong>String</strong> matching the specified format.</returns>
            <remarks>
             <para>This powerful method returns the current angular measurement in a specific
             format. If no value for the format is specified, a format of
             <strong>hhh°mm'SS.SS"I</strong> (adjusted to the current culture) will be used. The
             resulting <strong>String</strong> can be converted back into an
             <strong>Longitude</strong> via the <see href="Angle.Parse">Parse</see> method so 
             long as a delimiter separates each individual value.</para>
            </remarks>
        </member>
        <member name="P:GeoFramework.Longitude.UtmZoneNumber">
            <summary>Returns the Universal Transverse Mercator zone number for this longitude.</summary>
        </member>
        <member name="P:GeoFramework.Longitude.Hemisphere">
            <summary>Returns whether the longitude is east or west of the Prime Meridian.</summary>
            <remarks>
            	<para>When this property changes, the DecimalDegrees property is adjusted: if the
             hemisphere is <strong>West</strong>, a negative sign is placed in front of the
             DecimalDegrees value, and vice versa.</para>
            </remarks>
        </member>
        <member name="T:GeoFramework.LongitudeEventArgs">
            <summary>
            Represents information about a longitude measurement when a longitude-related event is raised.
            </summary>
        </member>
        <member name="M:GeoFramework.LongitudeEventArgs.#ctor(GeoFramework.Longitude)">
            <summary>
            Creates a new instance which contains the specified <strong>Longitude</strong> object.
            </summary>
            <param name="longitude">a <strong>Longitude</strong> object which is the target of the event.</param>
            <remarks></remarks>
        </member>
        <member name="P:GeoFramework.LongitudeEventArgs.Longitude">
            <summary>
            Indicates the longitude object whose properties have changed.
            </summary>
            <value>A <strong>Longitude</strong> object.</value>
            <remarks></remarks>
            <seealso cref="P:GeoFramework.Position.Longitude">Longitude Property (Position Class)</seealso>
            <seealso cref="T:GeoFramework.Position">Position Class</seealso>
            <seealso cref="P:GeoFramework.LongitudeEventArgs.Longitude">Longitude Class</seealso>
        </member>
        <member name="T:GeoFramework.LongitudeHemisphere">
            <summary>Indicates the position of a longitude measurement relative to the <a href="http://www.greenwichmeridian.com/">Prime Meridian</a>.</summary>
            <remarks>
            <para>This enumeration is used by the <see cref="P:GeoFramework.Longitude.Hemisphere">Hemisphere</see> 
            property of the <see cref="T:GeoFramework.Longitude">Latitude</see> class. If a longitude is west of the 
            Prime Meridian, it's value is displayed as a negative number, or with a single letter (but not 
            both). For example, 105 degrees west can be expressed in either of these
            ways:</para>
            
            <list type="bullet">
             <item>105°W</item>
             <item>-105°</item>
            </list>
            </remarks>
            <seealso cref="P:GeoFramework.Latitude.Hemisphere">Hemisphere Property (Latitude Class)</seealso>
            <seealso cref="T:GeoFramework.LatitudeHemisphere">LatitudeHemisphere Enumeration</seealso>
        </member>
        <member name="F:GeoFramework.LongitudeHemisphere.None">
            <summary>Missing longitude information.</summary>
        </member>
        <member name="F:GeoFramework.LongitudeHemisphere.East">
            <summary>The longitude is east of the Prime Meridian.</summary>
        </member>
        <member name="F:GeoFramework.LongitudeHemisphere.West">
            <summary>The longitude is west of the Prime Meridian.</summary>
        </member>
        <member name="T:GeoFramework.LongitudeEventHandler">
            <summary>
            Facilitates events and asynchronous calls which use an <strong>Longitude</strong>
            object as a parameter.
            </summary>
            <example>
            This example declares a custom event using this delegate.
            <code lang="VB">
            Dim MyLongitudeEvent As LongitudeEventHandler
            </code>
            <code lang="C#">
            LongitudeEventHandler MyLongitudeEvent;
            </code>
            </example>
            <param name="sender">The object which initiated the call to the delegate.</param>
            <param name="e">A <see cref="T:GeoFramework.LongitudeEventArgs">LongitudeEventArgs</see> object containing a <see cref="T:GeoFramework.Longitude">Longitude</see> object involved in the event.</param>
        </member>
        <member name="T:GeoFramework.NativeMethods">
            <summary>
            Summary description for NativeMethods.
            </summary>
        </member>
        <member name="T:GeoFramework.PointD">
            <summary>Represents a highly-precise pixel coordinate.</summary>
            <remarks>
            	<para>This class behaves similar to the <strong>PointF</strong> structure in the
                <strong>System.Drawing</strong> namespace, except that it supports double-precision
                values and can be converted into a geographic coordinate. This structure is also
                supported on the Compact Framework version of the <strong>GeoFramework</strong>,
                whereas <strong>PointF</strong> is not.</para>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (its properties can only be changed via constructors).</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.PointD.Empty">
            <summary>Returns a point with no value.</summary>
        </member>
        <member name="F:GeoFramework.PointD.Invalid">
            <summary>Represents an invalid coordinate.</summary>
        </member>
        <member name="M:GeoFramework.PointD.#ctor(System.Double,System.Double)">
            <summary>Creates a new instance for the specified coordinates.</summary>
        </member>
        <member name="M:GeoFramework.PointD.GetHashCode">
            <summary>Returns a unique code used for hash tables.</summary>
        </member>
        <member name="M:GeoFramework.PointD.ToPointFArray(GeoFramework.PointD[])">
            <summary>
            Converts the specified array of <strong>PointD</strong> objects into an array of
            <strong>PointF</strong> objects.
            </summary>
        </member>
        <member name="M:GeoFramework.PointD.ToPointArray(GeoFramework.PointD[])">
            <summary>
            Converts the specified array of <strong>PointD</strong> objects into an array of
            <strong>Point</strong> objects.
            </summary>
        </member>
        <member name="M:GeoFramework.PointD.ToPolarCoordinate">
            <summary>Converts the current instance into a polar coordinate.</summary>
        </member>
        <member name="M:GeoFramework.PointD.Rotate(GeoFramework.Angle)">
            <summary>Returns the current instance rotated about (0, 0).</summary>
        </member>
        <member name="M:GeoFramework.PointD.RotateAt(GeoFramework.Angle,GeoFramework.PointD)">
            <summary>Returns the current instance rotated about the specified point.</summary>
        </member>
        <member name="M:GeoFramework.PointD.Ceiling(GeoFramework.PointD)">
            <summary>Calculates the nearest integers larger than the current X and Y values.</summary>
        </member>
        <member name="M:GeoFramework.PointD.Floor(GeoFramework.PointD)">
            <summary>Calculates the nearest integers smaller than the current X and Y values.</summary>
        </member>
        <member name="M:GeoFramework.PointD.IsAbove(GeoFramework.PointD)">
            <summary>
            Indicates if the current instance is closer to the top of the monitor than the
            specified value.
            </summary>
        </member>
        <member name="M:GeoFramework.PointD.IsBelow(GeoFramework.PointD)">
            <summary>
            Indicates if the current instance is closer to the bottom of the monitor than the
            specified value.
            </summary>
        </member>
        <member name="M:GeoFramework.PointD.IsLeftOf(GeoFramework.PointD)">
            <summary>
            Indicates if the current instance is closer to the left of the monitor than the
            specified value.
            </summary>
        </member>
        <member name="M:GeoFramework.PointD.IsRightOf(GeoFramework.PointD)">
            <summary>
            Indicates if the current instance is closer to the right of the monitor than the
            specified value.
            </summary>
        </member>
        <member name="M:GeoFramework.PointD.Mirror">
            <summary>Returns the current instance with its signs switched.</summary>
            <remarks>This method returns a new point where the signs of X and Y are flipped.  For example, if
            a point, represents (20, 40), this function will return (-20, -40).</remarks>
        </member>
        <member name="M:GeoFramework.PointD.Add(GeoFramework.PointD)">
            <summary>
            Returns the sum of two points by adding X and Y values together.
            </summary>
            <param name="offset"></param>
            <returns></returns>
            <remarks>This method adds the X and Y coordinates and returns a new point at that location.</remarks>
        </member>
        <member name="M:GeoFramework.PointD.Add(System.Double,System.Double)">
            <summary>
            Returns the sum of two points by adding X and Y values together.
            </summary>
            <returns></returns>
            <remarks>This method adds the X and Y coordinates and returns a new point at that location.</remarks>
        </member>
        <member name="M:GeoFramework.PointD.Subtract(GeoFramework.PointD)">
            <summary>
            Returns the difference of two points by subtracting the specified X and Y values.
            </summary>
            <param name="offset"></param>
            <returns></returns>
            <remarks>This method subtracts the X and Y coordinates and returns a new point at that location.</remarks>
        </member>
        <member name="M:GeoFramework.PointD.Subtract(System.Double,System.Double)">
            <summary>
            Returns the difference of two points by subtracting the specified X and Y values.
            </summary>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
            <returns></returns>
            <remarks>This method subtracts the X and Y coordinates and returns a new point at that location.</remarks>
        </member>
        <member name="M:GeoFramework.PointD.Multiply(GeoFramework.PointD)">
            <summary>
            Returns the product of two points by multiplying X and Y values together.
            </summary>
            <param name="offset"></param>
            <returns></returns>
            <remarks>This method multiplies the X and Y coordinates together and returns a new point at that location.  This
            is typically used to scale a point from one coordinate system to another.</remarks>
        </member>
        <member name="M:GeoFramework.PointD.DistanceTo(GeoFramework.PointD)">
            <summary>Calculates the distance to another pixel.</summary>
        </member>
        <member name="M:GeoFramework.PointD.BearingTo(GeoFramework.PointD)">
            <summary>Calculates the direction from one point to another.</summary>
        </member>
        <member name="P:GeoFramework.PointD.IsEmpty">
            <summary>Returns whether the current instance has no value.</summary>
        </member>
        <member name="P:GeoFramework.PointD.IsInvalid">
            <summary>Returns whether the current instance has an invalid value.</summary>
        </member>
        <member name="P:GeoFramework.PointD.X">
            <summary>Returns the horizontal portion of the coordinate.</summary>
        </member>
        <member name="P:GeoFramework.PointD.Y">
            <summary>Returns the vertical portion of the coordinate.</summary>
        </member>
        <member name="T:GeoFramework.Controls.PolarControl">
            <summary>
            Represents a base class for round controls painted using polar
            coordinates.
            </summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarControl.Dispose(System.Boolean)">
            <summary>Cleans up any unmanaged GDI+ resources used during painting.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarControl.OnEffectChanged(GeoFramework.Controls.PolarControlEffect)">
            <summary>Occurs when the control's effect has changed.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarControl.OnResize(System.EventArgs)">
            <summary>Occurs when the control's size has changed.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarControl.OnRotationChanged(GeoFramework.Angle)">
            <summary>Occurs when the control's rotation has changed.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarControl.OnOriginChanged(GeoFramework.Azimuth)">
            <summary>Occurs when the compass direction associated with 0° has changed.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarControl.OnOrientationChanged(GeoFramework.PolarCoordinateOrientation)">
            <summary>Occurs when the control's orientation has changed.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarControl.OnPaintOffScreenBackground(GeoFramework.Controls.CancelablePaintEventArgs)">
            <summary>Occurs when the control's background is painted.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarControl.OnPaintOffScreenAdornments(GeoFramework.Controls.CancelablePaintEventArgs)">
            <summary>
            Occurs when additional painting is performed on top of the control's main
            content.
            </summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarControl.OnOptimizationModeChanged(GeoFramework.Controls.ControlOptimizationMode)">
            <summary>Occurs when the painting goal has changed.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarControl.Rotate(GeoFramework.Angle)">
            <summary>Rotates the entire control to the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarControl.OnTargetFrameRateChanged(System.Int32)">
            <summary>Occurs when the desired animation frame rate has changed.</summary>
        </member>
        <member name="E:GeoFramework.Controls.PolarControl.RotationChanged">
            <summary>Occurs when the rotation amount has changed.</summary>
        </member>
        <member name="E:GeoFramework.Controls.PolarControl.OriginChanged">
            <summary>Occurs when the compass direction associated with 0° has changed.</summary>
        </member>
        <member name="E:GeoFramework.Controls.PolarControl.OrientationChanged">
            <summary>Occurs when the control's coordinate orientation has changed.</summary>
        </member>
        <member name="P:GeoFramework.Controls.PolarControl.Effect">
            <summary>Controls the special painting effect applied to the control.</summary>
        </member>
        <member name="P:GeoFramework.Controls.PolarControl.Rotation">
            <summary>Controls the amount of rotation applied to the entire control.</summary>
        </member>
        <member name="P:GeoFramework.Controls.PolarControl.RotationInterpolated">
            <summary>Returns the current amount of rotation during an animation.</summary>
        </member>
        <member name="P:GeoFramework.Controls.PolarControl.RotationInterpolationMethod">
            <summary>Controls the acceleration and deceleration technique used during rotation.</summary>
        </member>
        <member name="P:GeoFramework.Controls.PolarControl.Origin">
            <summary>
            Returns the compass direction which matches zero degrees.
            </summary>
        </member>
        <member name="P:GeoFramework.Controls.PolarControl.MaximumR">
            <summary>Returns the radius corresponding to the edge of the control.</summary>
        </member>
        <member name="P:GeoFramework.Controls.PolarControl.BackColor">
            <summary>Controls the background color of the control.</summary>
        </member>
        <member name="P:GeoFramework.Controls.PolarControl.CenterR">
            <summary>Returns the radius corresponding to the center of the control.</summary>
        </member>
        <member name="P:GeoFramework.Controls.PolarControl.Orientation">
            <summary>
            Returns whether positive values are applied in a clockwise or counter-clockwise direction.
            </summary>
        </member>
        <member name="T:GeoFramework.Controls.PolarControlEffect">
            <summary>Indicates the special effect applied to polar controls during painting.</summary>
        </member>
        <member name="F:GeoFramework.Controls.PolarControlEffect.None">
            <summary>No effect is applied.</summary>
        </member>
        <member name="F:GeoFramework.Controls.PolarControlEffect.Glass">
            <summary>
            Additional painting is performed during
            <strong>OnPaintOffScreenBackground</strong> and
            <strong>OnPaintOffScreenAdornments</strong> to give the appearance of lighting and
            glass.
            </summary>
        </member>
        <member name="T:GeoFramework.PolarCoordinate">
            <summary>Represents a coordinate measured relative to the center of a circle.</summary>
            <remarks>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (its properties can only be changed via constructors).</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.PolarCoordinate.Empty">
            <summary>Represents a polar coordinate with no value.</summary>
        </member>
        <member name="F:GeoFramework.PolarCoordinate.Center">
            <summary>Represents a polar coordinate at the center of a circle.</summary>
        </member>
        <member name="M:GeoFramework.PolarCoordinate.ToPoint">
            <summary>Converts the current instance to a pixel coordinate.</summary>
        </member>
        <member name="M:GeoFramework.PolarCoordinate.ToPointF">
            <summary>Converts the current instance to a precise pixel coordinate.</summary>
        </member>
        <member name="M:GeoFramework.PolarCoordinate.ToPointD">
            <summary>Converts the current instance to a highly-precise pixel coordinate.</summary>
        </member>
        <member name="M:GeoFramework.PolarCoordinate.ToCartesianPoint">
            <summary>Converts the current instance to a Cartesian coordinate.</summary>
        </member>
        <member name="M:GeoFramework.PolarCoordinate.ToCartesianPointF">
            <summary>Converts the current instance to a precise Cartesian coordinate.</summary>
        </member>
        <member name="M:GeoFramework.PolarCoordinate.ToCartesianPointD">
            <summary>Converts the current instance to a highly-precise Cartesian coordinate.</summary>
        </member>
        <member name="M:GeoFramework.PolarCoordinate.Rotate(GeoFramework.Angle)">
            <summary>
            Applies rotation to the existing coordinate.
            </summary>
            <param name="angle">The amount of rotation to apply (above zero for clockwise).</param>
            <returns>A <strong>PolarCoordinate</strong> adjusted by the specified rotation amount.</returns>
        </member>
        <member name="M:GeoFramework.PolarCoordinate.ToOrientation(GeoFramework.Azimuth,GeoFramework.PolarCoordinateOrientation)">
            <summary>
            Returns the current instance adjusted to the specified orientation and
            origin.
            </summary>
        </member>
        <member name="P:GeoFramework.PolarCoordinate.Theta">
            <summary>
            Returns <em>Theta</em>, the amount of clockwise rotation of the
            coordinate.
            </summary>
        </member>
        <member name="P:GeoFramework.PolarCoordinate.R">
            <summary>
            Returns <em>R</em>, the distance away from the center of an imaginary
            circle.
            </summary>
        </member>
        <member name="P:GeoFramework.PolarCoordinate.Origin">
            <summary>
            Returns the compass direction which matches zero degrees.
            </summary>
        </member>
        <member name="P:GeoFramework.PolarCoordinate.Orientation">
            <summary>
            Returns whether positive values are applied in a clockwise or counter-clockwise direction.
            </summary>
        </member>
        <member name="T:GeoFramework.Controls.PolarGraphics">
            <summary>
            Encapsulates a GDI+ drawing surface using polar coordinates instead of pixel coordinates.
            </summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarGraphics.ToPoint(GeoFramework.PolarCoordinate)">
            <summary>Converts a polar coordinate to a pixel coordinate.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarGraphics.ToPointD(GeoFramework.PolarCoordinate)">
            <summary>Converts a polar coordinate to a highly-precise pixel coordinate.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarGraphics.ToPointF(GeoFramework.PolarCoordinate)">
            <summary>Converts a polar coordinate to a precise pixel coordinate.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarGraphics.Clear(System.Drawing.Color)">
            <summary>Erases the control's background to the specified color.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarGraphics.DrawLine(System.Drawing.Pen,GeoFramework.PolarCoordinate,GeoFramework.PolarCoordinate)">
            <summary>Draws a single straight line.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarGraphics.DrawRectangle(System.Drawing.Pen,GeoFramework.PolarCoordinate,GeoFramework.PolarCoordinate)">
            <summary>Draws a square or rectangular shape.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarGraphics.FillEllipse(System.Drawing.Brush,GeoFramework.PolarCoordinate,System.Double)">
            <summary>Fills the interior of a circular shape.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarGraphics.DrawEllipse(System.Drawing.Pen,GeoFramework.PolarCoordinate,System.Double)">
            <summary>Draws a circular shape.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarGraphics.FillPolygon(System.Drawing.Brush,GeoFramework.PolarCoordinate[])">
            <summary>Fills the interior of a closed shape.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarGraphics.ToGraphicsPath(GeoFramework.PolarCoordinate[])">
            <summary>
            Converts an array of polar coordinates into a <strong>GraphicsPath</strong>
            object.
            </summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarGraphics.DrawAndFillPolygon(System.Drawing.Pen,System.Drawing.Brush,GeoFramework.PolarCoordinate[])">
            <summary>Fills and outlines a polygon using the specified style.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarGraphics.DrawPolygon(System.Drawing.Pen,GeoFramework.PolarCoordinate[])">
            <summary>Draws a closed shape.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarGraphics.DrawRotatedString(System.String,System.Drawing.Font,System.Drawing.Brush,GeoFramework.PolarCoordinate)">
            <summary>Draws text rotated by the specified amount.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarGraphics.ToPointArray(GeoFramework.PolarCoordinate[])">
            <summary>Converts an array of polar coordinates to an array of pixel coordinates.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarGraphics.ToPointFArray(GeoFramework.PolarCoordinate[])">
            <summary>
            Converts an array of polar coordinates to an array of precise pixel
            coordinates.
            </summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarGraphics.ToPointDArray(GeoFramework.PolarCoordinate[])">
            <summary>
            Converts an array of polar coordinates to an array of highly-precise pixel
            coordinates.
            </summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarGraphics.DrawArc(System.Drawing.Pen,GeoFramework.PolarCoordinate,GeoFramework.PolarCoordinate)">
            <summary>Draws a rounded line.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarGraphics.DrawBezier(System.Drawing.Pen,GeoFramework.PolarCoordinate,GeoFramework.PolarCoordinate,GeoFramework.PolarCoordinate,GeoFramework.PolarCoordinate)">
            <summary>Draws a rounded line that travels through several points.</summary>
        </member>
        <member name="M:GeoFramework.Controls.PolarGraphics.DrawBeziers(System.Drawing.Pen,GeoFramework.PolarCoordinate[])">
            <summary>Draws multiple rounded lines that travels through several points.</summary>
        </member>
        <member name="P:GeoFramework.Controls.PolarGraphics.Origin">
            <summary>
            Returns the compass direction which matches zero degrees.
            </summary>
        </member>
        <member name="P:GeoFramework.Controls.PolarGraphics.Orientation">
            <summary>
            Returns whether positive values are applied in a clockwise or counter-clockwise direction.
            </summary>
        </member>
        <member name="P:GeoFramework.Controls.PolarGraphics.CenterR">
            <summary>Returns the value of <em>R</em> associated with the center of the control.</summary>
        </member>
        <member name="P:GeoFramework.Controls.PolarGraphics.MaximumR">
            <summary>Returns the value of <em>R</em> associated with the edge of the control.</summary>
        </member>
        <member name="P:GeoFramework.Controls.PolarGraphics.Graphics">
            <summary>Returns the GDI+ drawing surface used for painting.</summary>
        </member>
        <member name="P:GeoFramework.Controls.PolarGraphics.Rotation">
            <summary>Returns the amount of rotation applied to the entire control.</summary>
        </member>
        <member name="T:GeoFramework.Position">
            <summary>Represents a specific location on Earth's surface.</summary>
            <remarks>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (its properties can only be changed via constructors).</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.Position.Empty">
            <summary>Represents the location at 0°, 0°.</summary>
        </member>
        <member name="F:GeoFramework.Position.Minimum">
            <summary>Represents the smallest possible location of 90°S, 180°W.</summary>
        </member>
        <member name="F:GeoFramework.Position.Maximum">
            <summary>Represents the largest possible location of 90°N, 180°E.</summary>
        </member>
        <member name="M:GeoFramework.Position.#ctor(GeoFramework.Latitude,GeoFramework.Longitude)">
            <overloads>Creates a new instance.</overloads>
        </member>
        <member name="M:GeoFramework.Position.#ctor(GeoFramework.Latitude,GeoFramework.Longitude,GeoFramework.Datum)">
            <summary>
            Creates a new instance using the specified latitude, longitude and
            Datum.
            </summary>
            <remarks>
            This constructor is commonly used when a new position must be created using an
            Datum other than the default of WGS1984.
            </remarks>
            <param name="latitude">An angle from the equator between -90° and +90°.</param>
            <param name="longitude">A Longitude describing an angle from the Prime Meridian between -90° and +90°.</param>
            <param name="datum">A Datum object to associate with the given latitude and 
            longitude.</param>
        </member>
        <member name="M:GeoFramework.Position.#ctor(System.String)">
            <summary>
            Creates a new instance by parsing latitude and longitude from a single string.
            </summary>
            <param name="value">A <strong>String</strong> containing both a latitude and longitude to parse.</param>
        </member>
        <member name="M:GeoFramework.Position.SpeedTo(GeoFramework.Position,System.TimeSpan)">
            <summary>
            Returns the minimum speed required to travel from the current location to the
            specified destination within the specified period of time.
            </summary>
        </member>
        <member name="M:GeoFramework.Position.IsNorthOf(GeoFramework.Position)">
            <summary>
            Indicates if the current instance is North of the specified position.
            </summary>
            <param name="value">A <strong>Position</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more North than the specified instance.</returns>
        </member>
        <member name="M:GeoFramework.Position.IsSouthOf(GeoFramework.Position)">
            <summary>
            Indicates if the current instance is South of the specified position.
            </summary>
            <param name="value">A <strong>Position</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more South than the specified instance.</returns>
        </member>
        <member name="M:GeoFramework.Position.IsEastOf(GeoFramework.Position)">
            <summary>
            Indicates if the current instance is East of the specified position.
            </summary>
            <param name="value">A <strong>Position</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more East than the specified instance.</returns>
        </member>
        <member name="M:GeoFramework.Position.IsWestOf(GeoFramework.Position)">
            <summary>
            Indicates if the current instance is West of the specified position.
            </summary>
            <param name="value">A <strong>Position</strong> object to examine.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the current instance is more West than the specified instance.</returns>
        </member>
        <member name="M:GeoFramework.Position.SpeedTo(GeoFramework.Position,GeoFramework.Position,System.TimeSpan)">
            <overloads>
            Calculates the minimum speed required to arrive at a destination in the given
            time.
            </overloads>
            <summary>
            Returns the minimum speed required to travel over land from the given starting
            point to the specified destination within the specified period of time.
            </summary>
            <returns>
            A <strong>Speed</strong> object containing the required minimum travel
            speed.
            </returns>
            <remarks>
            This method is typically used to compare the current speed with the minimum
            required speed. For example, if the current rate of travel is 30MPH and the minimum
            speed is 60MPH, it can be derived that the speed must be doubled to arrive at the
            destination on time. Of course, care must be taken when making any suggestion to
            increase driving speed.
            </remarks>
            <param name="start">The beginning point from which calculations are based.</param>
            <param name="destination">The ending point to which speed is calculated.</param>
            <param name="time">The amount of time allowed to reach the destination.</param>
        </member>
        <member name="M:GeoFramework.Position.TimeTo(GeoFramework.Position,GeoFramework.Speed)">
            <summary>
            Returns the minimum time required to travel to the given destination at the
            specified constant speed.
            </summary>
        </member>
        <member name="M:GeoFramework.Position.TimeTo(GeoFramework.Position,GeoFramework.Position,GeoFramework.Speed)">
            <overloads>
            Calculates the time required to arrive at a destination when traveling at the
            specified speed.
            </overloads>
            <summary>
            Returns the minimum amount of time required to reach the specified destination at
            the specified speed.
            </summary>
        </member>
        <member name="M:GeoFramework.Position.DistanceTo(GeoFramework.Position)">
            <overloads>Calculates the great circle distance between any two points on 
            Earth.</overloads>
            <summary>
            Returns the distance over land from the given starting point to the specified
            destination.
            </summary>
            <returns>
            A <strong>Distance</strong> object containing the calculated distance in
            kilometers.
            </returns>
            <param name="destination">The ending point of a segment.</param>
            <remarks>
            This method uses trigonometry to calculate the Great Circle (over Earth's curved
            surface) distance between any two points on Earth. The distance is returned in
            kilometers but can be converted to any other unit type using methods in the
            <see cref="T:GeoFramework.Distance">Distance</see>
            class.
            </remarks>
        </member>
        <member name="M:GeoFramework.Position.DistanceTo(GeoFramework.Position,GeoFramework.Position)">
            <overloads>Calculates the great circle distance between any two points on 
            Earth.</overloads>
            <summary>
            Returns the distance over land from the given starting point to the specified
            destination.
            </summary>
            <returns>
            A <strong>Distance</strong> object containing the calculated distance in
            kilometers.
            </returns>
            <param name="start">A beginning point from which to calculate distance.</param>
            <param name="destination">The ending point of a segment.</param>
            <remarks>
            This method uses trigonometry to calculate the Great Circle (over Earth's curved
            surface) distance between any two points on Earth. The distance is returned in
            kilometers but can be converted to any other unit type using methods in the
            <see cref="T:GeoFramework.Distance">Distance</see>
            class.
            </remarks>
        </member>
        <member name="M:GeoFramework.Position.DistanceTo(GeoFramework.Position,GeoFramework.Speed,System.TimeSpan)">
            <summary>
            Returns the remaining travel distance if traveling for a certain speed for a certain period of time.
            </summary>
            <param name="destination">A <strong>Position</strong> marking the destination location.</param>
            <param name="speed">A <strong>Speed</strong> travelled from the current instance.</param>
            <param name="time">A <strong>TimeSpan</strong> representing the time already elapsed during transit to the destination.</param>
            <returns>A <strong>Distance</strong> measuring the remaining distance to travel.</returns>
        </member>
        <member name="M:GeoFramework.Position.DistanceTo(GeoFramework.Position,GeoFramework.Position,GeoFramework.Speed,System.TimeSpan)">
            <summary>
            Returns the remaining travel distance if traveling for a certain speed for a certain period of time.
            </summary>
            <param name="start">A <strong>Position</strong> marking the starting location from which to calculate.</param>
            <param name="destination">A <strong>Position</strong> marking the destination location.</param>
            <param name="speed">A <strong>Speed</strong> travelled from the current instance.</param>
            <param name="time">A <strong>TimeSpan</strong> representing the time already elapsed during transit to the destination.</param>
            <returns>A <strong>Distance</strong> measuring the remaining distance to travel.</returns>
        </member>
        <member name="M:GeoFramework.Position.IntersectionOf(GeoFramework.Angle,GeoFramework.Position,GeoFramework.Angle)">
            <summary>
            Calculates the intersection of two lines created by the current instance, another point, and a direction of travel from each point.
            </summary>
            <param name="firstBearing">An <strong>Angle</strong> specifying a travel direction from the current instance.</param>
            <param name="secondPosition">A <strong>Position</strong> specifying the start of the second line of intersection.</param>
            <param name="secondBearing">An <strong>Angle</strong> specifying a travel direction from the second position.</param>
            <returns>A <strong>Position</strong> representing the point of intersection, if one exists.</returns>
            <remarks>This method is typically used to determine the point where two objects in motion would meet.  </remarks>
        </member>
        <member name="M:GeoFramework.Position.IntersectionOf(GeoFramework.Position,GeoFramework.Angle,GeoFramework.Position,GeoFramework.Angle)">
            <overloads>Calculates a position which marks the intersection of two 
            vectors.</overloads>
            <summary>Calculates the point (if any) at which two imaginary lines 
            intersect.</summary>
            <returns>A <strong>Position</strong> object specifying the intersection 
            point.</returns>
            <remarks>
            This method uses trigonometry to calculate the point at which two lines intersect
            on Earth's surface. This method is typically used to see where two objects in motion
            would meet given their current directions of travel.  This method does not take the speed 
            of each object into account.
            <img src="IntersectionOf.jpg"/>
            </remarks>
            <param name="firstPosition">A <strong>Position</strong> specifying a position which marks the start of a line.</param>
            <param name="firstBearing">An <strong>Angle</strong> specifying a direction from the first Position.</param>
            <param name="secondPosition">A <strong>Position</strong> specifying the second position, marking the start of a second line.</param>
            <param name="secondBearing">An <strong>Angle</strong> specifying a direction from the second Position.</param>
        </member>
        <member name="M:GeoFramework.Position.TranslateTo(GeoFramework.Angle,GeoFramework.Distance)">
            <summary>
            Calculates a position relative to the current instance based upon the given bearing and distance.
            </summary>
            <param name="bearing">An <strong>Angle</strong> object specifying a direction to shift.</param>
            <param name="distance">A <strong>Distance</strong> object specifying the distance to shift.</param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.TranslateTo(GeoFramework.Position,GeoFramework.Angle,GeoFramework.Distance)">
            <overloads>
            Returns the position shifted by the specified bearing and distance as new
            Position object.
            </overloads>
            <summary>Returns a new instance shifted by the specified direction and 
            distance.</summary>
            <returns>A new <strong>Position</strong> object adjusted by the specified 
            amount.</returns>
            <remarks>
            	<para>This method is typically used to create an destination point relative to an
             existing location. For example, this method could be used to create a point ten
             miles northeast of the current location.</para>
            	<para><em>NOTE: The trigonometric formula used for this method is subject to errors
             when the distance to translate falls below a quarter mile (approximately 433
             meters).</em></para>
            </remarks>
            <example>
            	<code lang="VB" title="[New Example]" description="This example creates a destination point ten miles northwest of the 
                           current location.">
            ' Create a distance of ten miles
            Dim TravelDistance As New Distance(10, DistanceUnit.StatuteMiles)
            ' Calculate the point
            Dim DestinationPoint As Position
            DestinationPoint = Position.CurrentPosition.TranslateTo(Azimuth.Northwest, 
            TravelDistance)
                </code>
            </example>
        </member>
        <member name="M:GeoFramework.Position.Equals(GeoFramework.Position)">
            <summary>
            Compares the current instance to the specified position.
            </summary>
            <param name="value">A <strong>Position</strong> object to compare with.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values are identical.</returns>
            <remarks>The two objects are compared at up to four digits of precision.</remarks>
        </member>
        <member name="M:GeoFramework.Position.Equals(GeoFramework.Position,System.Int32)">
            <summary>
            Compares the current instance to the specified position using the specified numeric precision.
            </summary>
            <param name="value">A <strong>Position</strong> object to compare with.</param>
            <param name="decimals">An <strong>Integer</strong> specifying the number of fractional digits to compare.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values are identical.</returns>
            <remarks>This method is typically used when positions do not mark the same location unless they are
            extremely close to one another.  Conversely, a low or even negative value for <strong>Precision</strong>
            allows positions to be considered equal even when they do not precisely match.</remarks>
        </member>
        <member name="M:GeoFramework.Position.Subtract(GeoFramework.Position)">
            <summary>
            Subtracts the specified latitude and longitude from the current latitude and longitude.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.Add(GeoFramework.Position)">
            <summary>
            Adds the specified latitude and longitude from the current latitude and longitude.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.Multiply(GeoFramework.Position)">
            <summary>
            Multiplies the specified latitude and longitude from the current latitude and longitude.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.Divide(GeoFramework.Position)">
            <summary>
            Divides the specified latitude and longitude from the current latitude and longitude.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.BearingTo(GeoFramework.Position,GeoFramework.Position)">
            <overloads>Returns the direction of travel from one position to another.</overloads>
        </member>
        <member name="M:GeoFramework.Position.ToString">
            <summary>
            Outputs the current instance as a string using the default format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.ToString(System.String)">
            <overloads>Outputs the current instance as a formatted string.</overloads>
            <summary>
            Outputs the current instance as a string using the specified format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the current instance as a string using the specified format and culture information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.Position.Parse(System.String)">
            <summary>Converts a string-based positional measurement into a Position 
            object.</summary>
            <param name="value">A <strong>String</strong> containing both latitude and longitude in the form of a string.</param>
            <remarks>
            This powerful method will analyze a string containing latitude and longitude and
            create a Position object matching the specified values.  The latitude and longitude
            must be separated by a non-space delimiter such as a comma.</remarks>
        </member>
        <member name="M:GeoFramework.Position.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            * @func GPS_Math_LatLonH_To_XYZ **********************************
        </member>
        <member name="P:GeoFramework.Position.IsEmpty">
            <summary>Indicates if the position has no value.</summary>
        </member>
        <member name="P:GeoFramework.Position.Northing">
            <summary>Returns the latitude expressed as UTM northing.</summary>
        </member>
        <member name="P:GeoFramework.Position.Easting">
            <summary>Returns the longitude expressed as UTM northing.</summary>
        </member>
        <member name="P:GeoFramework.Position.Latitude">
            <summary>Represents the vertical North/South portion of the location.</summary>
        </member>
        <member name="P:GeoFramework.Position.Longitude">
            <summary>Represents the horizontal East/West portion of the location.</summary>
        </member>
        <member name="P:GeoFramework.Position.Datum">
            <summary>Returns the coordinate system used for this location.</summary>
        </member>
        <member name="T:GeoFramework.ZoneLetter">
            <summary>Indicates a vertical slice of the Earth used as a starting point for UTM positions.</summary>
        </member>
        <member name="T:GeoFramework.PositionEventHandler">
            <summary>
            Facilitates events and asynchronous calls which use an <strong>Position</strong>
            object as a parameter.
            </summary>
            <example>
            This example declares a custom event using this delegate.
            <code lang="VB">
            Dim MyPositionEvent As PositionEventHandler
            </code>
            <code lang="C#">
            PositionEventHandler MyPositionEvent;
            </code>
            </example>
            <param name="e">A <see cref="T:GeoFramework.PositionEventArgs">PositionEventArgs</see> object containing a <see cref="T:GeoFramework.Position">Position</see> object involved in the event.</param>
            <param name="sender">The object which initiated the call to the delegate.</param>
        </member>
        <member name="T:GeoFramework.Position3D">
            <summary>
            Represents a position on Earth marked by latitude, longitude, and altitude.
            </summary>
            <remarks>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (its properties can only be changed via constructors).</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.Position3D.#ctor(GeoFramework.Latitude,GeoFramework.Longitude,GeoFramework.Distance)">
            <overloads>Creates a new instance.</overloads>
        </member>
        <member name="M:GeoFramework.Position3D.#ctor(GeoFramework.Latitude,GeoFramework.Longitude,GeoFramework.Datum,GeoFramework.Distance)">
            <summary>
            Creates a new instance using the specified latitude, longitude and
            Datum.
            </summary>
            <remarks>
            This constructor is commonly used when a new position must be created using an
            Datum other than the default of WGS1984.
            </remarks>
            <param name="latitude">An angle from the equator between -90° and +90°.</param>
            <param name="longitude">An angle from the Prime Meridian between -90° and +90°.</param>
            <param name="datum">An Datum to associate with the given latitude and 
            longitude.</param>
        </member>
        <member name="M:GeoFramework.Position3D.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance by parsing latitude and longitude from a single string.
            </summary>
            <param name="value">A <strong>String</strong> containing both a latitude and longitude to parse.</param>
        </member>
        <member name="P:GeoFramework.Position3D.Altitude">
            <summary>Returns the location's distance above sea level.</summary>
        </member>
        <member name="T:GeoFramework.PositionCollection">
            <summary>Represents an arbitrary collection of locations on the Earth's 
            surface.</summary>
            <remarks>
            	<para>This collection provides methods which work with a series of locations,
                typically a travelled route. Features are provided for calculating distance, area,
                perimeter, travel time, minimum travel speed, and nearest relative items.</para>
            	<para>This class is also used as a base class for other collections such as the
                <strong>Shape</strong> object in <strong>GIS.NET</strong>, and the
                <strong>WaypointCollection</strong> class for Garmin® waypoints.</para>
            	<para>Instances of this class are likely to be thread-safe because the class uses
                thread synchronization before modifying the underlying collection. Lock the
                <strong>SyncRoot</strong> property before enumerating through this
                collection.</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.PositionCollection.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:GeoFramework.PositionCollection.SetBackingStore(System.Collections.ArrayList)">
            <summary>
            Sets the inner list for this collection to the specified array.
            </summary>
            <param name="items">An <strong>ArrayList</strong> containing zero or more Position objects.</param>
            <remarks>This method is used to quickly set the backing store of this collection to a pre-made
            array of Position objects without having to add items one at a time.  This method is typically
            used internally by GeoFrameworks products to improve performance.</remarks>
        </member>
        <member name="M:GeoFramework.PositionCollection.CompressExtent">
            <summary>Recalculates the rectangle which encloses all points in the rectangle.</summary>
            <remarks>As points are removed and changed, the extent may become incorrect.
            This method will recalculate the extent for a collection.  This method should only
            be called when it is suspected that the extent would become smaller because extents
            are automatically expanded.  Calling this method periodically is recommended
            if the points within a shape are frequently removed.
            </remarks>
        </member>
        <member name="M:GeoFramework.PositionCollection.FromArray(GeoFramework.Position[])">
            <summary>Creates a new collection from the specified array.</summary>
        </member>
        <member name="M:GeoFramework.PositionCollection.ToArray">
            <summary>Converts the collection to an array of <strong>Position</strong> objects.</summary>
        </member>
        <member name="M:GeoFramework.PositionCollection.Add(GeoFramework.Position)">
            <summary>Adds a <strong>Position</strong> object to the end of the collection.</summary>
            <remarks>
            <para>This method is used to add a single Position object to the end of the collection.  Calling
            this method causes the current extent, area and perimeter calculations for the collection
            to become invalid.</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.PositionCollection.Clear">
            <summary>Removes all items from the collection.</summary>
        </member>
        <member name="M:GeoFramework.PositionCollection.AddRange(System.Collections.ICollection)">
            <summary>Adds a collection of Position objects to the current collection.</summary>
            <remarks>
             <para>This method is typically used to combine a separate collection of Position
             objects into the collection.</para>
            </remarks>
            <param name="collection">A collection of <strong>Position</strong> objects to add.</param>
        </member>
        <member name="M:GeoFramework.PositionCollection.Remove(GeoFramework.Position)">
            <summary>
            Removes a particular instance of a <strong>Position</strong> object from the
            collection.
            </summary>
        </member>
        <member name="M:GeoFramework.PositionCollection.IsEnclosing(GeoFramework.Position)">
            <summary>
            Indicates if the specified position is surrounded by all points in the
            collection.
            </summary>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the position is inside of the shape created by the collection.</returns>
            <remarks><para>Assuming that the PositionCollection defines a shape, this method will
            indicate if the specified point is inside of the shape or outside of it.  This method works with
            complicated shapes, including polygons containing holes.</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.PositionCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an item from the collection which is located at the specified
            index.
            </summary>
            <param name="index">
            A zero-based <strong>Integer</strong> indicating the position of the item to
            remove.
            </param>
        </member>
        <member name="M:GeoFramework.PositionCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a series of objects from the collection starting at the specified
            index.
            </summary>
        </member>
        <member name="M:GeoFramework.PositionCollection.OnInsertComplete(System.Int32,GeoFramework.Position)">
            <summary>Occurs when a new item has been added to the collection.</summary>
        </member>
        <member name="M:GeoFramework.PositionCollection.OnRemoveComplete(System.Int32,GeoFramework.Position)">
            <summary>Occurs when an item has been removed from the collection.</summary>
        </member>
        <member name="M:GeoFramework.PositionCollection.OnClearComplete">
            <summary>Occurs when all items have been removed from the collection.</summary>
        </member>
        <member name="M:GeoFramework.PositionCollection.OnSetComplete(System.Int32,GeoFramework.Position,GeoFramework.Position)">
            <summary>Occurs when an item in the collection has been replaced with another item.</summary>
        </member>
        <member name="M:GeoFramework.PositionCollection.Sort">
            <summary>Sorts the contents of the collection.</summary>
        </member>
        <member name="M:GeoFramework.PositionCollection.Sort(System.Collections.IComparer)">
            <summary>Sorts the collection using the specified custom comparison method.</summary>
            <param name="comparer">
            An <strong>IComparer</strong> object which specifies how one
            <strong>Position</strong> ranks compared to another <strong>Position</strong>.
            </param>
        </member>
        <member name="M:GeoFramework.PositionCollection.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts a subset of the collection using the specified custom comparison
            method.
            </summary>
            <param name="index">
            An <strong>Integer</strong> indicating the location from which to start
            sorting.
            </param>
            <param name="count">
            An <strong>Integer</strong> specifying the number of items to include in the
            sort.
            </param>
            <param name="comparer">
            An <strong>IComparer</strong> object which specifies how one
            <strong>Position</strong> ranks compared to another <strong>Position</strong>.
            </param>
        </member>
        <member name="M:GeoFramework.PositionCollection.GetMinimumTravelTime(GeoFramework.Speed)">
            <summary>
            Returns the minimum time required to travel through each point in the collection
            at the given speed.
            </summary>
            <returns>A <strong>TimeSpan</strong> containing the length of time required.</returns>
            <remarks>
             <para>This method is typically used to see if an entire PositionCollection can be travelled in
             time at the current speed. The MinimumSpeed method can be used to calculate what
             minimum speed is required to reach a destination within a set period of
             time.</para>
            
             <para><img src="BestPractice.jpg"/></para><para><strong>Avoid suggesting that the
             user increase or decrease speed.</strong></para>
            
             <para>The MinimumTime method might yield a result which suggests that the user can
             make a destination on time by increasing (or decreasing) their current speed. Avoid
             making recommendations which might cause the user to disobey a maximum (or minimum)
             speed limit.</para>
            </remarks>
            <param name="speed">
            A <strong>Speed</strong> indicating how fast to travel through all points in the
            collection.
            </param>
        </member>
        <member name="M:GeoFramework.PositionCollection.GetMinimumTravelSpeed(System.TimeSpan)">
            <summary>
            Returns the minimum speed required to travel through each point in the collection
            within the given time.
            </summary>
            <remarks>
             <para>This method is typically used to see if an entire PositionCollection can be travelled at
             the current speed within the specified length of time. An application could also
             use this method to calculate how early (or late) arrival time would be if
             modifications to the speed were made.</para>
            
             <para><img src="BestPractice.jpg"/></para><para><strong>Avoid suggesting that the
             user increase or decrease speed.</strong></para>
            
             <para>The MinimumSpeed method does not take into account any local traffic laws. As
             a result, it might return a result of 90MPH for a PositionCollection that goes through
             neighborhoods. Recommendations to slow down should also be avoided for roads that
             require a minimum speed, such as an interstate highway.</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.PositionCollection.ItemsWithinRange(GeoFramework.Position,GeoFramework.Distance)">
            <summary>
            Returns the item in the collection which is nearest to the specified position.
            </summary>
            <param name="value">A <strong>Position</strong> to compare with the collection.</param>
            <returns>An <strong>ArrayList</strong> containing all items within the specified range.</returns>
        </member>
        <member name="M:GeoFramework.PositionCollection.NearestPoints(GeoFramework.Position,System.Int32)">
            <summary>
            Returns the specified number of points nearest to the specified position.
            </summary>
            <param name="value"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.PositionCollection.NearestPoints(GeoFramework.PositionCollection)">
            <summary>
            Returns the two points nearest each other in the current and specified collections.
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.PositionCollection.Nearest(GeoFramework.Position)">
            <summary>
            Returns the point in the collection which is nearest to the specified position and also within the specified distance.
            </summary>
            <param name="value">A <strong>Distance</strong> specifying a maximum range for points.</param>
            <returns>A <strong>Position</strong> from the collection which is nearest to the specified position.</returns>
            <remarks>This method is useful for determining which of several points is</remarks>
        </member>
        <member name="M:GeoFramework.PositionCollection.CopyTo(GeoFramework.Position[],System.Int32)">
            <summary>Copies all or part of the current collection to another array.</summary>
        </member>
        <member name="M:GeoFramework.PositionCollection.Contains(GeoFramework.Position)">
            <summary>
            Indicates if the specified <strong>Position</strong> object exists in the
            collection.
            </summary>
        </member>
        <member name="M:GeoFramework.PositionCollection.IndexOf(GeoFramework.Position)">
            <summary>
            Returns the position in the collection of the specified Position object.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.PositionCollection.Insert(System.Int32,GeoFramework.Position)">
            <summary>Adds a <strong>Position</strong> to the collection at the specified index.</summary>
        </member>
        <member name="M:GeoFramework.PositionCollection.Clone">
            <summary>
            Creates a shallow copy of the current collection.
            </summary>
            <returns>A "shallow" copy means that the copy contains references to the same objects as the original collection.
            Modifications made to the cloned collection also affect the contents of the original.</returns>
        </member>
        <member name="P:GeoFramework.PositionCollection.InnerList">
            <summary>Returns the underlying list of items.</summary>
        </member>
        <member name="P:GeoFramework.PositionCollection.Count">
            <summary>Returns the number of items in the collection.</summary>
        </member>
        <member name="P:GeoFramework.PositionCollection.IsSynchronized">
            <summary>
            Indicates if the collection can be safely accessed from multiple threads at
            once.
            </summary>
        </member>
        <member name="P:GeoFramework.PositionCollection.SyncRoot">
            <summary>
            Returns an object used to lock the collection before enumeration or
            modification.
            </summary>
        </member>
        <member name="P:GeoFramework.PositionCollection.First">
            <summary>Returns the first item in the collection, if one exists.</summary>
            <remarks>
            This property is typically used to access the first item in the collection during
            a calculation which involves the entire collection.
            </remarks>
            <value>
            The first <strong>Position</strong> in the collection or <strong>null</strong>
            (<strong>Nothing</strong> in Visual Basic) if the collection is empty.
            </value>
        </member>
        <member name="P:GeoFramework.PositionCollection.Item(System.Int32)">
            <summary>Returns a <strong>Position</strong> object at the specified index.</summary>
        </member>
        <member name="P:GeoFramework.PositionCollection.Last">
            <summary>Returns the last item in the collection.</summary>
        </member>
        <member name="P:GeoFramework.PositionCollection.Extent">
            <summary>Returns a rectangle which encloses all points in the collection.</summary>
        </member>
        <member name="P:GeoFramework.PositionCollection.Capacity">
            <summary>Returns the allocated size of the underlying array.</summary>
        </member>
        <member name="P:GeoFramework.PositionCollection.IsLine">
            <summary>Indicates if the last point in the series does not match the first point.</summary>
            <remarks>
            This method is used to tell if a polygon is "closed," where the first and last points are the same.
            A polygon must be closed in order for a fill brush to be applied.  "Open" polygons are typically
            objects such as lines (i.e. railroads, roads, trails).</remarks>
        </member>
        <member name="P:GeoFramework.PositionCollection.IsPolygon">
            <summary>Indicates if the last point in the series is the same as the first point.</summary>
        </member>
        <member name="P:GeoFramework.PositionCollection.Area">
            <summary>
            Returns the area enclosed by all points in the collection.
            </summary>
            <remarks>
            <para>This method uses the Double Meridian Distance method to determine the total area enclosed
            by all points in the collection.  If the collection represents an "open" polygon, where the first and
            last points are not equivalent, the polygon is temporarily closed to perform this calculation.</para>
            <para>Area values are returned in square kilometers, but can be converted to other area units using
            methods in the <see cref="T:GeoFramework.Area">Area</see> structure.</para></remarks>
        </member>
        <member name="P:GeoFramework.PositionCollection.Centroid">
            <summary>Returns the weighted mean of all coordinates.</summary>
        </member>
        <member name="P:GeoFramework.PositionCollection.Perimeter">
            <summary>
            Calculates the total distance by traveling through all points in the
            collection.
            </summary>
        </member>
        <member name="T:GeoFramework.Radian">
            <summary>
            Represents a unit of angular measurement used during trigonometric
            equations.
            </summary>
            <remarks>
            	<para>A radian is a unit of measure of an angle formed by an arc whose length is
                the same as the circle's radius, making a shape similar to a slice of pizza.
                Radians are typically used during trigonometric calculations such as calculating
                the distance between two points on Earth's curved surface.</para>
            	<para>Instances of this class are guaranteed to be thread-safe because the class is
                immutable (its properties can only be changed during constructors).</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.Radian.Empty">
            <summary>Represents a radian with a value of zero.</summary>
        </member>
        <member name="M:GeoFramework.Radian.Add(GeoFramework.Radian)">
            <summary>Adds the current instance to the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Radian.Divide(GeoFramework.Radian)">
            <summary>Returns the current value divided by the specified value.</summary>
        </member>
        <member name="M:GeoFramework.Radian.Decrement">
            <summary>Returns the current value decreased by one.</summary>
        </member>
        <member name="M:GeoFramework.Radian.#ctor(System.Double)">
            <summary>Creates a new instance with the specified value.</summary>
            <remarks>
            this constructor is typically used to initialize an instance when the radian
            value is already known.
            </remarks>
            <param name="value">A value to store in the <strong>Value</strong> property.</param>
        </member>
        <member name="M:GeoFramework.Radian.Cosine">
            <summary>Returns the cosine of the current instance.</summary>
        </member>
        <member name="M:GeoFramework.Radian.AbsoluteValue">
            <summary>Returns the absolute value of the current instance.</summary>
        </member>
        <member name="M:GeoFramework.Radian.ArcCosine">
            <summary>Returns the arccosine of the current instance.</summary>
        </member>
        <member name="M:GeoFramework.Radian.ArcSine">
            <summary>Returns the arcsine of the current instance.</summary>
        </member>
        <member name="M:GeoFramework.Radian.ArcTangent">
            <summary>Returns the arctangent of the current instance.</summary>
        </member>
        <member name="M:GeoFramework.Radian.GetHashCode">
            <summary>Returns the unique code for this instance used in hash tables.</summary>
        </member>
        <member name="M:GeoFramework.Radian.FromAngle(GeoFramework.Angle)">
             <summary>
             Converts the specified angle into radians, storing the result in the current
             instance.
             </summary>
             <remarks>
             This method is typically used when a Radian object is being reused for
             conversions from multiple
             <see cref="T:GeoFramework.Angle">Angle</see>
             objects.
             </remarks>
             <param name="value">An <strong>Angle</strong> containing the value to convert.</param>
        </member>
        <member name="M:GeoFramework.Radian.ToAngle(GeoFramework.Radian)">
            <summary>
            Converts a Radian object into decimal degrees.
            </summary>
            <param name="value">A <strong>Radian</strong> object to convert to an <strong>Angle</strong>.</param>
            <returns>An <strong>Angle</strong> object containing the converted value.</returns>
            <remarks>This method is typically used for trigonometric functions which work with values expressed as radians.  Then the formula has completed, results are converted from radians to decimal degrees to make them easier to use.</remarks>
        </member>
        <member name="M:GeoFramework.Radian.ToString(System.String)">
            <summary>
            Outputs the speed measurement as a formatted string using the specified
            format.
            </summary>
        </member>
        <member name="M:GeoFramework.Radian.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the speed measurement as a formatted string using the specified format
            and culture information.
            </summary>
        </member>
        <member name="M:GeoFramework.Radian.ToAngle">
            <summary>Converts the current instance into an <strong>Angle</strong> object.</summary>
            <returns>An <strong>Angle</strong> object.</returns>
            <remarks>
            This method is typically used to convert a radian measurement back to latitude or
            longitude after a trigonometric formula has completed.
            </remarks>
        </member>
        <member name="M:GeoFramework.Radian.CompareTo(GeoFramework.Radian)">
            <summary>Compares the current instance with the specified value.</summary>
        </member>
        <member name="P:GeoFramework.Radian.Value">
            <summary>Represents the numeric portion of a radian measurement.</summary>
            <value>
            A <strong>Double</strong> value indicating an angular measurement expressed in
            radians.
            </value>
            <remarks>
            This property stores the numeric radian measurement. A radian can be converted into a degree
            measurements via the <see cref="M:GeoFramework.Radian.ToAngle(GeoFramework.Radian)">ToAngle</see> method.
            </remarks>
        </member>
        <member name="T:GeoFramework.RadianEventHandler">
            <summary>
            Facilitates events and asynchronous calls which use an <strong>Radian</strong>
            object as a parameter.
            </summary>
            <example>
            This example declares a custom event using this delegate.
            <code lang="VB">
            Dim MyRadianEvent As RadianEventHandler
            </code>
            <code lang="C#">
            RadianEventHandler MyRadianEvent;
            </code>
            </example>
            <param name="e">A <see cref="T:GeoFramework.RadianEventArgs">RadianEventArgs</see> object containing a <see cref="T:GeoFramework.Radian">Radian</see> object involved with the event.</param>
            <param name="sender">The object which initiated the call to the delegate.</param>
        </member>
        <member name="T:GeoFramework.RectangleD">
            <summary>Represents a highly-precise rectangle.</summary>
            <remarks>
            	<para>This class functions similar to the <strong>RectangleF</strong> class in the
                <strong>System.Drawing</strong> namespace, except that it uses
                double-floating-point precision and is also supported on the Compact Framework
                edition of the <strong>GeoFramework</strong>.</para>
            	<para>Instances of this class are guaranteed to be thread-safe because it is
                immutable (its properties can only be changed during constructors).</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.RectangleD.#ctor(GeoFramework.PointD,GeoFramework.SizeD)">
            <summary>
            Creates a new instance using the specified location, width, and height.
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:GeoFramework.RectangleD.#ctor(GeoFramework.PointD,System.Double,System.Double)">
            <summary>
            Creates a new instance using the specified location, width, and height.
            </summary>
            <param name="location"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:GeoFramework.RectangleD.#ctor(GeoFramework.PointD,GeoFramework.PointD)">
            <summary>
            Creates a new instance using the specified upper-left and lower-right coordinates.
            </summary>
        </member>
        <member name="M:GeoFramework.RectangleD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new instance using the specified latitudes and longitudes.
            </summary>
        </member>
        <member name="F:GeoFramework.RectangleD.Empty">
            <summary>
            Represents a RectangleD having no size.
            </summary>
        </member>
        <member name="M:GeoFramework.RectangleD.UnionWith(GeoFramework.RectangleD,GeoFramework.RectangleD)">
            <summary>
            Returns the smallest possible RectangleD containing both specified RectangleDs.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.RectangleD.FromArray(GeoFramework.PointD[])">
            <summary>
            Returns a rectangle which encloses the specified points.
            </summary>
            <param name="points">An array of PointD objects to enclose.</param>
            <returns>A <strong>RectangleD</strong> object enclosing the specified points.</returns>
            <remarks>This method is typically used to calculate a rectangle surrounding
            points which have been rotated.  For example, if a rectangle is rotated by 45°, the
            total width it occupies is greater than it's own width.</remarks>
        </member>
        <member name="M:GeoFramework.RectangleD.IntersectionOf(GeoFramework.RectangleD,GeoFramework.RectangleD)">
            <summary>
            Returns the RectangleD formed by the intersection of the two specified RectangleDs.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.RectangleD.RotateAt(GeoFramework.Angle,GeoFramework.PointD)">
            <summary>
            Returns a rectangle enclosing the corner points of the current instance, rotated
            by the specified amount around a specific point.
            </summary>
            <returns>A new <strong>RectangleD</strong> containing the rotated rectangle.</returns>
            <remarks><para>When a rectangle is rotated, the total width and height it occupies may be larger
            than the rectangle's own width and height.  This method calculates the smallest rectangle
            which encloses the rotated rectangle.</para>
            	<para>[TODO: Include before and after picture; this is confusing.]</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.RectangleD.Rotate(GeoFramework.Angle)">
            <summary>
            Returns a rectangle enclosing the corner points of the current instance, rotated
            by the specified amount.
            </summary>
        </member>
        <member name="M:GeoFramework.RectangleD.ToArray">
            <summary>Returns the corner points of the rectangle as an array.</summary>
        </member>
        <member name="M:GeoFramework.RectangleD.ToAspectRatio(System.Double)">
            <summary>
            Changes the size and shape of the RectangleD to match the specified aspect ratio.
            </summary>
            <param name="aspectRatio"></param>
            <returns></returns>
            <remarks>This method will expand a RectangleD outward, from its center point, until
            the ratio of its width to its height matches the specified value.</remarks>
        </member>
        <member name="M:GeoFramework.RectangleD.ToAspectRatio(GeoFramework.RectangleD)">
            <summary>
            Changes the size and shape of the RectangleD to match the aspect ratio of the specified RectangleD.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
            <remarks>This method will expand a RectangleD outward, from its center point, until
            the ratio of its width to its height matches the specified value.</remarks>
        </member>
        <member name="M:GeoFramework.RectangleD.ToAspectRatio(GeoFramework.SizeD)">
            <summary>
            Changes the size and shape of the RectangleD to match the aspect ratio of the specified RectangleD.
            </summary>
            <param name="size"></param>
            <returns></returns>
            <remarks>This method will expand a RectangleD outward, from its center point, until
            the ratio of its width to its height matches the specified value.</remarks>
        </member>
        <member name="M:GeoFramework.RectangleD.IsDisjointedFrom(GeoFramework.RectangleD)">
            <summary>
            Returns whether the specified rectangle is not overlapping the current
            instance.
            </summary>
        </member>
        <member name="M:GeoFramework.RectangleD.Parse(System.String)">
            <summary>
            Parses a string into a RectangleD object.
            </summary>
            <param name="value">A <string>String</string> specifying geographic coordinates defining a rectangle.</param>
            <returns>A <strong>RectangleD</strong> object using the specified coordinates.</returns>
            <remarks>This powerful method will convert points defining a rectangle in the form of a string into
            a RectangleD object.  The string can be </remarks>
        </member>
        <member name="M:GeoFramework.RectangleD.IsEnclosing(GeoFramework.RectangleD)">
            <summary>
            Indicates if the specified RectangleD is entirely within the current RectangleD.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.RectangleD.CenterOn(GeoFramework.PointD)">
            <summary>Moves the rectangle so that the specified point is at its center.</summary>
        </member>
        <member name="M:GeoFramework.RectangleD.Clone">
            <summary>
            Returns a copy of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.RectangleD.UnionWith(GeoFramework.PointD)">
            <summary>
            Expands the edges of the RectangleD to contain the specified position.
            </summary>
            <param name="point">A <strong>PointD</strong> object to surround.</param>
            <returns>A <strong>RectangleD</strong> which contains the specified position.</returns>
            <remarks>If the specified position is already enclosed, the current instance will be returned.</remarks>
        </member>
        <member name="M:GeoFramework.RectangleD.op_Addition(GeoFramework.RectangleD,GeoFramework.SizeD)">
            <summary>
            Increases the size of the rectangle by the specified amount.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.RectangleD.GetHashCode">
            <summary>Returns a unique code for this instance used in hash tables.</summary>
        </member>
        <member name="M:GeoFramework.RectangleD.IsIntersectingWith(GeoFramework.RectangleD)">
            <summary>Returns whether the current instance overlaps the specified rectangle.</summary>
        </member>
        <member name="M:GeoFramework.RectangleD.IsOverlapping(GeoFramework.RectangleD)">
            <summary>
            Indicates if the specified RectangleD shares any of the same 2D space as the current instance.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:GeoFramework.RectangleD.IsInsideOf(GeoFramework.RectangleD)">
            <summary>
            Returns whether the current instance is surrounded on all sides by the specified
            rectangle.
            </summary>
        </member>
        <member name="M:GeoFramework.RectangleD.IsEnclosingCenter(GeoFramework.RectangleD)">
            <summary>
            Returns whether the current instance surrounds the center point of the specified
            rectangle.
            </summary>
        </member>
        <member name="M:GeoFramework.RectangleD.IsAdjacentTo(GeoFramework.RectangleD)">
            <summary>
            Returns whether the specified rectangle shares a side with the specified
            rectangle.
            </summary>
            <returns>A <strong>Boolean</strong>, true if the specified rectangle shares one
            (and only one) side.</returns>
            <remarks>The method will return false if the specified rectangle intersects with the
            current instance.</remarks>
        </member>
        <member name="P:GeoFramework.RectangleD.AspectRatio">
            <summary>Returns the ratio of the rectangle's width to its height.</summary>
            <remarks>
            This property returns the ratio of the RectangleDs width to its height (width / height).  This
            property gives an indication of the RectangleD's shape.  An aspect ratio of one indicates
            a square, whereas an aspect ratio of two indicates a RectangleD which is twice as wide as
            it is high.  
            </remarks>
        </member>
        <member name="P:GeoFramework.RectangleD.Top">
            <summary>Returns the top side of the rectangle.</summary>
            <value>A <see cref="T:GeoFramework.Latitude"></see> object marking the southern-most latitude.</value>
        </member>
        <member name="P:GeoFramework.RectangleD.Bottom">
            <summary>Returns the bottom side of the rectangle.</summary>
            <value>A <see cref="T:GeoFramework.Latitude"></see> object marking the southern-most latitude.</value>
        </member>
        <member name="P:GeoFramework.RectangleD.Height">
            <summary>Returns the top-to-bottom size of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.IsEmpty">
            <summary>Indicates if the rectangle has any value.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.Left">
            <summary>Returns the left side of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.Right">
            <summary>Returns the right side of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.Size">
            <summary>Returns the width and height of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.UpperLeft">
            <summary>Returns the point at the upper-left corner of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.UpperRight">
            <summary>Returns the point at the upper-right corner of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.LowerLeft">
            <summary>Returns the point at the lower-left corner of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.LowerRight">
            <summary>Returns the point at the lower-right corner of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.Width">
            <summary>Returns the left-to-right size of the rectangle.</summary>
        </member>
        <member name="P:GeoFramework.RectangleD.Center">
            <summary>Returns the point at the center of the rectangle.</summary>
        </member>
        <member name="T:GeoFramework.Resources">
            <summary>
            Contains United States English resource information.
            </summary>
        </member>
        <member name="T:GeoFramework.IO.SafeHandle">
            <summary>Represents a base class for designing safe unmanaged handle managers.</summary>
            <remarks>
            	<para>This class is provided as a way to safely manage unmanaged resources, namely
                handles used during platform invoke calls. When a new file handle is created, such
                as with the <strong>CreateFile</strong> API, a this class will ensure that the
                <strong>CloseHandle</strong> method is always called to release the handle. If
                necessary, the handle is released during the finalizer.</para>
            	<para>Safe handles provide a clean way to manage handles and should be used in
                every situation where a platform invoke requires a handle. Using this class is also
                preferable because it can remove the need for a parent class to implement
                <strong>IDisposable</strong>, which simplifies classes.</para>
            	<para>This class is used primarily by the <strong>SerialStream</strong> and
                <strong>BluetoothStream</strong> classes to perform platform invoke calls within a
                safe context.</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.IO.SafeHandle.handle">
            <summary>Returns the handle to an unmanaged resource.</summary>
        </member>
        <member name="M:GeoFramework.IO.SafeHandle.Close">
            <summary>Closes the unmanaged resource associated with the handle.</summary>
        </member>
        <member name="M:GeoFramework.IO.SafeHandle.DangerousGetHandle">
            <summary>Returns the handle as an <strong>IntPtr</strong>.</summary>
        </member>
        <member name="P:GeoFramework.IO.SafeHandle.IsClosed">
            <summary>Indicates if the handle has been successfully closed.</summary>
        </member>
        <member name="P:GeoFramework.IO.SafeHandle.IsInvalid">
            <summary>Indicates if the handle is valid.</summary>
        </member>
        <member name="T:GeoFramework.Segment">
            <summary>
            Represents a line connected by two points on Earth's surface.
            </summary>
        </member>
        <member name="M:GeoFramework.Segment.#ctor(GeoFramework.Position,GeoFramework.Position)">
            <summary>Creates a new instance using the specified end points.</summary>
        </member>
        <member name="M:GeoFramework.Segment.DistanceTo(GeoFramework.Position)">
            <summary>
            Returns the distance from the segment to the specified position.
            </summary>
            <param name="position"></param>
            <returns></returns>
            <remarks>This method analyzes the relative position of the segment to the line to determine the
            best mathematical approach.</remarks>
        </member>
        <member name="P:GeoFramework.Segment.Distance">
            <summary>
            Returns the distance from the starting point to the end point.
            </summary>
        </member>
        <member name="P:GeoFramework.Segment.Bearing">
            <summary>
            Returns the bearing from the start to the end of the line.
            </summary>
        </member>
        <member name="P:GeoFramework.Segment.Start">
            <summary>
            Returns the starting point of the segment.
            </summary>
        </member>
        <member name="P:GeoFramework.Segment.End">
            <summary>
            Returns the end point of the segment.
            </summary>
        </member>
        <member name="P:GeoFramework.Segment.Center">
            <summary>Returns the location halfway from the start to the end point.</summary>
        </member>
        <member name="T:GeoFramework.SizeD">
            <summary>Represents a highly-precise two-dimensional size.</summary>
            <remarks>
            	<para>This structure is a <em>GeoFrameworks</em> "parseable type" whose value can
                be freely converted to and from <strong>String</strong> objects via the
                <strong>ToString</strong> and <strong>Parse</strong> methods.</para>
            	<para>Instances of this structure are guaranteed to be thread-safe because it is
                immutable (its properties can only be modified via constructors).</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.SizeD.Empty">
            <summary>Represents a size with no value.</summary>
        </member>
        <member name="F:GeoFramework.SizeD.Infinity">
            <summary>Represents an infinite size.</summary>
        </member>
        <member name="F:GeoFramework.SizeD.Minimum">
            <summary>Represents the smallest possible size.</summary>
        </member>
        <member name="F:GeoFramework.SizeD.Maximum">
            <summary>Represents the largest possible size.</summary>
        </member>
        <member name="M:GeoFramework.SizeD.#ctor(System.Double,System.Double)">
            <summary>Creates a new instance.</summary>
        </member>
        <member name="M:GeoFramework.SizeD.Clone">
            <summary>Returns a copy of the current instance.</summary>
        </member>
        <member name="M:GeoFramework.SizeD.Add(GeoFramework.SizeD)">
            <summary>Returns the sum of the current instance with the specified size.</summary>
        </member>
        <member name="M:GeoFramework.SizeD.Subtract(GeoFramework.SizeD)">
            <summary>Returns the current instance decreased by the specified value.</summary>
        </member>
        <member name="M:GeoFramework.SizeD.Multiply(GeoFramework.SizeD)">
            <summary>Returns the product of the current instance with the specified value.</summary>
        </member>
        <member name="M:GeoFramework.SizeD.Divide(GeoFramework.SizeD)">
            <summary>Returns the current instance divided by the specified value.</summary>
        </member>
        <member name="P:GeoFramework.SizeD.AspectRatio">
            <summary>Returns the ratio width to height.</summary>
        </member>
        <member name="P:GeoFramework.SizeD.Width">
            <summary>Returns the horizontal size.</summary>
        </member>
        <member name="P:GeoFramework.SizeD.Height">
            <summary>Returns the vertical size.</summary>
        </member>
        <member name="P:GeoFramework.SizeD.IsEmpty">
            <summary>Indicates if the instance has any value.</summary>
        </member>
        <member name="T:GeoFramework.Speed">
            <summary>Represents a measurement of an object's rate of travel.</summary>
            <remarks>
            	<para>This structure is used to measure the rate at which something moves in a
                given period of time. This structure supports several different unit types in both
                Imperial and Metric measurement systems. A speed is measured in two parts: a
                numeric value and a label indicating the units of measurement.</para>
            	<para>Speed measurements can be converted to their equivalent values in other unit
                types through the use of several conversion methods such as ToMetersPerSecond,
                <strong>ToFeetPerSecond</strong>, <strong>ToKilometersPerHour</strong>, and others.
                Three methods, <strong>ToImperialUnitType</strong>,
                <strong>ToMetricUnitType</strong> and <strong>ToLocalUnitType</strong> also exist
                for converting a speed measurement to the most readable unit type (i.e. 1 meter vs.
                0.0001 kilometers) in any local culture.</para>
            	<para>This structure is a <em>GeoFrameworks</em> "parseable type" whose value can
                be freely converted to and from <strong>String</strong> objects via the
                <strong>ToString</strong> and <strong>Parse</strong> methods.</para>
            	<para>Instances of this structure are guaranteed to be thread-safe because it is
                immutable (its properties can only be modified via constructors).</para>
            </remarks>
        </member>
        <member name="F:GeoFramework.Speed.Empty">
            <remarks>
            The speed of light is used to determine distances such as the meter, which is
            defined as the distance travelled by light for 1/299792458th of a second.
            </remarks>
            <summary>Represents a speed of zero.</summary>
        </member>
        <member name="F:GeoFramework.Speed.AtRest">
            <summary>Represents a speed of zero.</summary>
        </member>
        <member name="F:GeoFramework.Speed.SpeedOfLight">
            <summary>Returns the rate of travel of light in a vacuum.</summary>
        </member>
        <member name="F:GeoFramework.Speed.Maximum">
            <summary>Represents the largest possible speed.</summary>
        </member>
        <member name="F:GeoFramework.Speed.Minimum">
            <summary>Represents the smallest possible speed.</summary>
        </member>
        <member name="F:GeoFramework.Speed.SpeedOfSoundAtSeaLevel">
            <summary>Returns the rate of travel of sound waves at sea level.</summary>
        </member>
        <member name="F:GeoFramework.Speed.Infinity">
            <summary>Represents an infinite speed.</summary>
        </member>
        <member name="M:GeoFramework.Speed.ToDistance(System.TimeSpan)">
            <summary>
            Returns the total distance traveled at the current speed for the specified
            time.
            </summary>
            <returns>A <strong>Distance</strong> representing the distance travelled at
            the current speed for the specified length of time.</returns>
        </member>
        <member name="M:GeoFramework.Speed.Increment">
            <summary>Returns the current instance increased by one.</summary>
        </member>
        <member name="M:GeoFramework.Speed.Decrement">
            <summary>Returns the current instance decreased by one.</summary>
        </member>
        <member name="M:GeoFramework.Speed.IsLessThan(GeoFramework.Speed)">
            <summary>Indicates if the current instance is smaller than the specified speed.</summary>
        </member>
        <member name="M:GeoFramework.Speed.IsLessThanOrEqualTo(GeoFramework.Speed)">
            <summary>
            Indicates if the current instance is smaller or equivalent to than the specified
            speed.
            </summary>
        </member>
        <member name="M:GeoFramework.Speed.IsGreaterThan(GeoFramework.Speed)">
            <summary>Indicates if the current instance is larger than the specified speed.</summary>
        </member>
        <member name="M:GeoFramework.Speed.IsGreaterThanOrEqualTo(GeoFramework.Speed)">
            <summary>
            Indicates if the current instance is larger or equivalent to than the specified
            speed.
            </summary>
        </member>
        <member name="M:GeoFramework.Speed.#ctor(System.Double,GeoFramework.SpeedUnit)">
             <summary>Creates a new instance using the specified value and unit type.</summary>
             <remarks>This is the most frequently used constructor of the speed class.</remarks>
             <param name="value">A <strong>Double</strong> containing a speed measurement.</param>
             <param name="units">
             A
             <see cref="T:GeoFramework.SpeedUnit">SpeedUnit</see>
             value describing the value's type.
             </param>
        </member>
        <member name="M:GeoFramework.Speed.#ctor(System.String)">
            <param name="value">
             <para>A <strong>String</strong> in any of the following formats (or a variation
             depending on the local culture):</para>
            
             <para>
            	 <table cellspacing="0" cols="4" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>vv uu</td>
            
            				 <td>vv.v uu</td>
            
            				 <td>vvuu</td>
            			 </tr>
            		 </tbody>
            	 </table>
             </para>
            
             <para>Where <strong>vv.v</strong> indicates a numeric value, and uu is any of the
             following case-insensitive units:</para>
            
             <para>
            	 <table cellspacing="0" cols="4" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>FT/S</td>
            
            				 <td>FT/SEC</td>
            
            				 <td>FEET PER SECOND</td>
            
            				 <td>FEET PER SEC</td>
            			 </tr>
            
            			 <tr>
            				 <td>FEET/SEC</td>
            
            				 <td>km/h</td>
            
            				 <td>KM/H</td>
            
            				 <td>KM/HR</td>
            			 </tr>
            
            			 <tr>
            				 <td>KILOMETERS/HOUR</td>
            
            				 <td>KM/S</td>
            
            				 <td>KM/SEC</td>
            
            				 <td>KM/SECOND</td>
            			 </tr>
            
            			 <tr>
            				 <td height="18">KNOT</td>
            
            				 <td height="18">KNOTS</td>
            
            				 <td height="18">KTS</td>
            
            				 <td height="18">M/S</td>
            			 </tr>
            
            			 <tr>
            				 <td>M/SEC</td>
            
            				 <td>M/SECOND</td>
            
            				 <td>MPH</td>
            
            				 <td>MI/HR</td>
            			 </tr>
            
            			 <tr>
            				 <td>MILES/HOUR</td>
            
            				 <td></td>
            
            				 <td></td>
            
            				 <td></td>
            			 </tr>
            		 </tbody>
            	 </table>
             </para>
            
             <para><em><font size="2">To request additional unit types, please send feedback by
             clicking the link at the bottom of this page.</font></em></para>
            </param>
            <remarks>
            This powerful method is designed to simplify the process of parsing values read
            from a data store or typed in by the user.
            </remarks>
        </member>
        <member name="M:GeoFramework.Speed.Equals(System.Object)">
            <summary>
            Compares the current instance to the specified arbitrary value.
            </summary>
            <param name="value">An <strong>Object</strong> representing a value to compare.</param>
            <returns>A <strong>Boolean</strong>, <strong>True</strong> if the values are equivalent.</returns>
        </member>
        <member name="M:GeoFramework.Speed.Clone">
            <summary>Returns a copy of the current instance.</summary>
        </member>
        <member name="M:GeoFramework.Speed.GetHashCode">
            <summary>Returns a unique code for the current instance used in hash tables.</summary>
        </member>
        <member name="M:GeoFramework.Speed.ToFeetPerSecond">
            <summary>Returns the current instance converted to feet per second.</summary>
            <remarks>The measurement is converted regardless of its current unit type.</remarks>
        </member>
        <member name="M:GeoFramework.Speed.ToKilometersPerHour">
            <remarks>The measurement is converted regardless of its current unit type.</remarks>
            <summary>Converts the current measurement into kilometers per hour.</summary>
        </member>
        <member name="M:GeoFramework.Speed.ToKilometersPerSecond">
            <remarks>The measurement is converted regardless of its current unit type.</remarks>
            <summary>Converts the current measurement into kilometers per second.</summary>
        </member>
        <member name="M:GeoFramework.Speed.ToKnots">
            <remarks>The measurement is converted regardless of its current unit type.</remarks>
            <summary>Returns the current instance converted to knots.</summary>
        </member>
        <member name="M:GeoFramework.Speed.ToMetersPerSecond">
            <remarks>The measurement is converted regardless of its current unit type.</remarks>
            <summary>Returns the current instance converted to meters per second.</summary>
        </member>
        <member name="M:GeoFramework.Speed.ToStatuteMilesPerHour">
            <remarks>The measurement is converted regardless of its current unit type.</remarks>
            <summary>Returns the current instance converted to miles per hours (MPH).</summary>
        </member>
        <member name="M:GeoFramework.Speed.ToUnitType(GeoFramework.SpeedUnit)">
            <summary>Returns the current instance converted to the specified unit type.</summary>
        </member>
        <member name="M:GeoFramework.Speed.ToImperialUnitType">
            <summary>
            Returns the current instance converted to the most readable Imperial unit
            type.
            </summary>
            <returns>A <strong>Speed</strong> converted to the chosen unit type.</returns>
            <remarks>When a Speed becomes smaller, it may make more sense to the 
            user to be expressed in a smaller unit type.  For example, a Speed of
            0.001 kilometers might be better expressed as 1 meter.  This method will
            determine the smallest Imperial unit type.</remarks>
        </member>
        <member name="M:GeoFramework.Speed.ToMetricUnitType">
            <summary>
            Returns the current instance converted to the most readable Metric unit
            type.
            </summary>
            <returns>A <strong>Speed</strong> converted to the chosen unit type.</returns>
            <remarks>When a Speed becomes smaller, it may make more sense to the 
            user to be expressed in a smaller unit type.  For example, a Speed of
            0.001 kilometers per second might be better expressed as 1 meter per second.  This method will
            determine the smallest metric unit type.</remarks>
        </member>
        <member name="M:GeoFramework.Speed.ToLocalUnitType">
            <returns>A <strong>Speed</strong> converted to the chosen unit type.</returns>
            <remarks>When a Speed becomes smaller, it may make more sense to the 
            user to be expressed in a smaller unit type.  For example, a Speed of
            0.001 kilometers might be better expressed as 1 meter.  This method will
            find the smallest unit type and convert the unit to the user's local
            numeric system (Imperial or Metric).</remarks>
            <summary>
            Returns the current instance converted to the most readable Imperial or Metric
            unit type depending on the local culture.
            </summary>
        </member>
        <member name="M:GeoFramework.Speed.Parse(System.String)">
            <summary>Creates a speed measurement based on a string value.</summary>
            <param name="value">
             <para>A <strong>String</strong> in any of the following formats (or variation
             depending on the local culture):</para>
            
             <para>
            	 <table cellspacing="0" cols="4" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>vu</td>
            
            				 <td>vv.vu</td>
            
            				 <td>v u</td>
            			 </tr>
            		 </tbody>
            	 </table>
             </para>
            
             <para>where <strong>vv.v</strong> is a decimal value and <strong>u</strong> is a
             unit type made from words in the following list:</para>
            
             <para>
            	 <table cellspacing="0" cols="3" cellpadding="2" width="100%">
            		 <tbody>
            			 <tr>
            				 <td>FEET</td>
            
            				 <td>FOOT</td>
            
            				 <td>METER</td>
            			 </tr>
            
            			 <tr>
            				 <td>METERS</td>
            
            				 <td>METRE</td>
            
            				 <td>METRES</td>
            			 </tr>
            
            			 <tr>
            				 <td>KILOMETER</td>
            
            				 <td>KILOMETRE</td>
            
            				 <td>KILOMETERS</td>
            			 </tr>
            
            			 <tr>
            				 <td>KILOMETRES</td>
            
            				 <td>KNOT</td>
            
            				 <td>KNOTS</td>
            			 </tr>
            
            			 <tr>
            				 <td>MILE</td>
            
            				 <td>MILES</td>
            
            				 <td>STATUTE MILE</td>
            			 </tr>
            
            			 <tr>
            				 <td>STATUTE MILES</td>
            
            				 <td>F</td>
            
            				 <td>FT</td>
            			 </tr>
            
            			 <tr>
            				 <td>M</td>
            
            				 <td>KM</td>
            
            				 <td>K</td>
            			 </tr>
            
            			 <tr>
            				 <td>PER</td>
            
            				 <td>-PER-</td>
            
            				 <td>/</td>
            			 </tr>
            
            			 <tr>
            				 <td>SECOND</td>
            
            				 <td>SEC</td>
            
            				 <td>S</td>
            			 </tr>
            
            			 <tr>
            				 <td>HOUR</td>
            
            				 <td>HR</td>
            
            				 <td>H</td>
            			 </tr>
            		 </tbody>
            	 </table>
             </para>
            
             <para>For example, "12 miles per hour" is acceptable because the words "miles,"
             "per," and "hour" are found in the above list. Some combinations are not supported,
             such as "feet/hour." The word combination should look similar to a value from the
             
            <see cref="T:GeoFramework.SpeedUnit">SpeedUnit</see> enumeration.</para>
            </param>
            <remarks>
            This powerful method simplifies the process of processing values read from a data
            store or entered via the user. This method even supports some natural language
            processing ability by understanding words (see list above). This method can parse any
            value created via the ToString method.
            </remarks>
            <returns>A new <strong>Speed</strong> object with the specified value and 
            units.</returns>
        </member>
        <member name="M:GeoFramework.Speed.ToString">
            <summary>Outputs the speed measurement as a formatted string.</summary>
        </member>
        <member name="M:GeoFramework.Speed.ToString(System.String)">
            <summary>
            Outputs the speed measurement as a formatted string using the specified
            format.
            </summary>
        </member>
        <member name="M:GeoFramework.Speed.ToString(System.String,System.IFormatProvider)">
            <summary>
            Outputs the speed measurement as a formatted string using the specified format
            and culture information.
            </summary>
        </member>
        <member name="M:GeoFramework.Speed.CompareTo(GeoFramework.Speed)">
            <summary>Compares the current instance to the specified speed.</summary>
        </member>
        <member name="P:GeoFramework.Speed.IsEmpty">
            <summary>Indicates if the measurement is zero.</summary>
        </member>
        <member name="P:GeoFramework.Speed.IsMetric">
            <summary>Indicates if the unit of measurement is a Metric unit type.</summary>
        </member>
        <member name="P:GeoFramework.Speed.IsInfinity">
            <summary>Indicates if the measurement is infinite.</summary>
        </member>
        <member name="P:GeoFramework.Speed.Units">
            <remarks>
            	<para>Following proper scientific practices, speed measurements are always made
             using a value paired with a unit type. </para>
            	<para><img src="BestPractice.jpg"/></para><para><strong>Always explicitly
             convert to a specific speed unit type before performing
             mathematics.</strong></para>
            	<para>Since the Units property of the Speed class can be modified, it is not
             safe to assume that a speed measurement will always be of a certain unit type.
             Therefore, use a conversion method such as <see cref="M:GeoFramework.Speed.ToKilometersPerHour">
             ToKilometersPerHour</see> or <see cref="M:GeoFramework.Speed.ToStatuteMilesPerHour">
             ToStatuteMilesPerHour</see> to ensure that the speed is in the correct unit
             type before perfoming mathematics.</para>
            </remarks>
            <value>
            A value from the <see cref="T:GeoFramework.SpeedUnit">SpeedUnits</see> enumeration.
            </value>
            <summary>Returns the units portion of the speed measurement.</summary>
        </member>
        <member name="P:GeoFramework.Speed.Value">
            <summary>Returns the numeric portion of the speed measurement.</summary>
            <remarks>
            This property is combined with the
            <see cref="P:GeoFramework.Speed.Units">Units</see> property to form a complete
            speed measurement. 
            </remarks>
        </member>
        <member name="T:GeoFramework.SpeedUnit">
            <summary>Indicates the unit of measure for speed measurements.</summary>
            <remarks>
            This enumeration is used by the
            <see cref="P:GeoFramework.Speed.Units">Units</see> property of the
            <see cref="T:GeoFramework.Speed">Speed</see>
            class in conjunction with the <see cref="P:GeoFramework.Speed.Value">Value</see>
            property to describe a speed measurement.
            </remarks>
            <seealso cref="P:GeoFramework.Speed.Units">Units Property (Speed Class)</seealso>
            <seealso cref="T:GeoFramework.Speed">Speed Class</seealso>
        </member>
        <member name="F:GeoFramework.SpeedUnit.Knots">
            <summary>The number of nautical miles travelled in one hour.</summary>
        </member>
        <member name="F:GeoFramework.SpeedUnit.StatuteMilesPerHour">
            <summary>The number of statute miles travelled in one hour, also known as MPH.</summary>
        </member>
        <member name="F:GeoFramework.SpeedUnit.KilometersPerHour">
            <summary>The number of kilometers travelled in one hour, also known as KPH.</summary>
        </member>
        <member name="F:GeoFramework.SpeedUnit.KilometersPerSecond">
            <summary>The number of kilometers travelled in one second, also known as 
            KM/S.</summary>
        </member>
        <member name="F:GeoFramework.SpeedUnit.FeetPerSecond">
            <summary>The number of feet travelled in one second, also known as FT/S.</summary>
        </member>
        <member name="F:GeoFramework.SpeedUnit.MetersPerSecond">
            <summary>The number of meters travelled in one hour, also known as M/S.</summary>
        </member>
        <member name="T:GeoFramework.SpeedEventHandler">
            <summary>
            Facilitates events and asynchronous calls which use an <strong>Speed</strong>
            object as a parameter.
            </summary>
            <example>
            This example declares a custom event using this delegate.
            <code lang="VB">
            Dim MySpeedEvent As SpeedEventHandler
            </code>
            <code lang="C#">
            SpeedEventHandler MySpeedEvent;
            </code>
            </example>
            <param name="e">A <see cref="T:GeoFramework.SpeedEventArgs">SpeedEventArgs</see> object containing a <see cref="T:GeoFramework.Speed">Speed</see> object involved with the event.</param>
            <param name="sender">The object which initiated the call to the delegate.</param>
        </member>
        <member name="T:GeoFramework.Threading.ThreadPool">
            <summary>
            Represents a group of threads used to execute lightweight methods.
            </summary>
            <remarks><para>While the .NET Framework has its own ThreadPool class in the
            System.Threading namespace, the class is missing some important features
            which can affect performance.  This class was created to give developers
            greater control over the thread pool for better results.  The queue of
            methods waiting to be executed can be cleared, helping applications to
            shut down more gracefully.  The prioirty of all threads in the pool can
            be adjusted on-the-fly to give applications the best performance.  The
            maximum number of threads lets developers control how much of system 
            resources to use, and the maximum thread idle time keeps the active thread
            count as low as possible to maximum performance.</para>
            <para>The performance of this class appears to exceed that of .NET's own
            ThreadPool due to the ability to control thread priority.  Additionally, the .NET
            ThreadPool seems to launch new threads for each request, whereas this class will
            reuse existing threads whenever possible, resulting in less time spend creating
            and tearing down threads.</para>
            <para>This class is completely thread-safe.  Methods are executed in
            the same order in which they are queued.  Rarely, methods may execute out-of-order
            depending on how complex the methods are.  If an absolute guarantee of execution
            order is needed, thread pools should not be used.</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.Threading.ThreadPool.Dispose">
            <summary>
            Cancels any pending methods and shuts down all active threads.
            </summary>
            <remarks>This method is called automatically when an application exits.
            Calling this method manually causes all threads to be shut down.  Any
            subsequent calls to the Queue method will fail.  This method must only
            be called when an application shutdown is in progress and will not be 
            cancelled.</remarks>
        </member>
        <member name="M:GeoFramework.Threading.ThreadPool.Clear">
            <summary>
            Removes any pending methods from the queue.
            </summary>
            <remarks>This method will clear the queue of all methods waiting to
            execute.  This method is typically called via the Dispose method to 
            gracefully shut down the thread pool.  This method should only be
            called if the methods waiting to execute are not critical.</remarks>
        </member>
        <member name="M:GeoFramework.Threading.ThreadPool.Queue(System.Threading.WaitCallback)">
            <summary>
            Adds a method to the thread pool for execution.
            </summary>
            <param name="method">A WaitCallback delegate pointing to a method to execute.</param>
            <remarks>This method is used to execute a method on the thread pool.
            Depending on the maximum number of threads allowed, the method will be
            executed either immediately, or as soon as a thread becomes available.
            If resources allow, a new thread may be started to service the queue.</remarks>
        </member>
        <member name="M:GeoFramework.Threading.ThreadPool.Queue(System.Threading.WaitCallback,System.Object)">
            <summary>
            Adds a method to the thread pool for execution.
            </summary>
            <param name="method">A WaitCallback delegate pointing to a method to execute.</param>
            <remarks>This method is used to execute a method on the thread pool.
            Depending on the maximum number of threads allowed, the method will be
            executed either immediately, or as soon as a thread becomes available.
            If resources allow, a new thread may be started to service the queue.</remarks>
        </member>
        <member name="P:GeoFramework.Threading.ThreadPool.MaximumThreads">
            <summary>
            Controls the maximum allowed threads in the pool.
            </summary>
            <remarks><para>This class will create new threads only if all other active threads
            are busy and the current thread count is less than the maximum number of
            threads allowed.  Increasing this property will not cause new threads to
            be created immediately -- it will only allow for new threads to be created when they
            are actually needed.  If this property is decreased, then any extra threads
            in the thread pool will terminate until the current thread count it at
            the maximum.</para>
            <para>To maximumize performance, threads in the pool which have been idle for the
            amount of time specified in MaximumIdleTime will exit.  This allows
            the thread pool to automaitcally expand and shrink based on the changing demands 
            of the application.</para>
            <para>For Compact Framework applications (and especially Smartphone applications), 
            resources for multithreading are very limited, so the maximum thread count should 
            rarely exceed ten.</para></remarks>
        </member>
        <member name="P:GeoFramework.Threading.ThreadPool.MaximumQueueSize">
            <summary>
            Controls the maximum number of methods allowed in the queue.
            </summary>
            <remarks><para>The method queue is a Queue object which contains a list of all delegates waiting
            to be executed by the thread pool.  If there are not enough threads in the pool, the
            method queue can start to grow out of control.  Ideally, there will be enough threads in
            the pool to execute methods as fast as they become queued.  This property causes an exception
            to be raised if the queue grows too large.</para>
            <para>If your application experiences a significant delay between the
            time a method is queued and the time it actually executes, consider increasing the
            MaximumThreads property.  This will allow more threads to work simultaneously to
            execute queued methods.</para>
            <para>If the queue becomes too full, the Queue method will block until the queue
            decreases in size.  Sudden application hangs can be caused by this blocking, so
            examine the CurrentQueueSize property to see if the queue is overflowing and increase
            MaximumThreads to compensate.</para></remarks>
        </member>
        <member name="P:GeoFramework.Threading.ThreadPool.CurrentThreads">
            <summary>
            Returns the current number of active threads in the thread pool.
            </summary>
            <remarks><para>The thread pool is designed to create new threads if no
            other thread is already available to service the method queue.  This
            property is typically examined to see how many threads the thread pool
            actually needs to keep up with the application.</para>
            <para>If this property is almost always equal to MaximumThreads, there
            may not be enough threads allowed to keep up with the method queue.  
            Consider increasing the MaximumThreads property to compensate.</para></remarks>
        </member>
        <member name="P:GeoFramework.Threading.ThreadPool.BusyThreads">
            <summary>
            Returns the number of threads which are currently executing methods.
            </summary>
            <remarks><para>This property is used to see how many threads are actually
            executing methods.  The value of this property should typically be less than
            the MaximumThreads property.  If this property is almost always equal to MaximumThreads, there
            may not be enough threads allowed to keep up with the method queue.  
            Consider increasing the MaximumThreads property to compensate.</para></remarks>
        </member>
        <member name="P:GeoFramework.Threading.ThreadPool.CurrentQueueSize">
            <summary>
            Returns the number of methods waiting to be executed by the thread pool.
            </summary>
            <remarks>This property is typically used to see if there are enough threads
            allowed to keep the size of the method queue low.  If there are not enough threads,
            the method queue will grow faster than threads can execute them.  This can result
            in significant application latency.  If this property is near the 
            MaximumQueueSize property, consider increasing the MaximumThreads property
            to compensate.</remarks>
        </member>
        <member name="P:GeoFramework.Threading.ThreadPool.MaximumIdleTime">
            <summary>
            Controls the maximum time a thread is allowed to be idle before shutting down.
            </summary>
            <remarks>If an application uses the thread pool a lot, but the activity starts to
            taper off, threads in the thread pool may no longer be required.  If a thread in 
            the pool does not execute any method for a period of time, it will exit in order
            to release system resources.  This property controls the period of time a thread is
            allowed to remain idle before it terminates.  This property is typically a value
            of thirty or more seconds.  A value of over five or ten seconds is recommended
            in order to allow threads to be re-used.  Higher values should be used when system
            resources are not so much of a concern, such as for the Desktop Framework applications.</remarks>
        </member>
        <member name="T:GeoFramework.TimeoutException">
            <summary>
            Represents information about an GarminText sentence processing error.
            </summary>
        </member>
        <member name="T:GeoFramework.Waypoint">
            <summary>Represents a location on Earth of special significance.</summary>
            <remarks>
            	<para>Waypoints are typically used to mark unique places such as positions along a
                route, destinations and starting points. This class provides features for labeling
                a location as well as giving it a color. This class is used by other products to
                create their own flavor of waypoints. For example, GIS.NET uses this class to mark
                special features on a map, whereas the Garmin® binary plug-in for GPS.NET uses this
                class to upload and download waypoints from Garmin devices.</para>
            	<para>Instances of this class are not inherently thread-safe because properties can
                be modified after construction.</para>
            </remarks>
        </member>
        <member name="M:GeoFramework.Waypoint.#ctor(GeoFramework.Latitude,GeoFramework.Longitude)">
            <overloads>Creates a new instance.</overloads>
        </member>
        <member name="M:GeoFramework.Waypoint.#ctor(GeoFramework.Latitude,GeoFramework.Longitude,GeoFramework.Datum)">
            <summary>
            Creates a new instance using the specified latitude, longitude and
            Datum.
            </summary>
            <remarks>
            This constructor is commonly used when a new position must be created using an
            Datum other than the default of WGS1984.
            </remarks>
            <param name="latitude">An angle from the equator between -90° and +90°.</param>
            <param name="longitude">An angle from the Prime Meridian between -90° and +90°.</param>
            <param name="datum">An Datum to associate with the given latitude and 
            longitude.</param>
        </member>
        <member name="M:GeoFramework.Waypoint.#ctor(System.String)">
            <summary>
            Creates a new instance by parsing latitude and longitude from a single string.
            </summary>
            <param name="value">A <strong>String</strong> containing both a latitude and longitude to parse.</param>
        </member>
        <member name="P:GeoFramework.Waypoint.IsVisible">
            <summary>Controls whether or not the waypoint should be visible.</summary>
        </member>
        <member name="P:GeoFramework.Waypoint.ForeColor">
            <summary>Controls the color of the waypoint.</summary>
        </member>
        <member name="P:GeoFramework.Waypoint.Text">
            <summary>Controls the label associated with the waypoint.</summary>
        </member>
        <member name="T:GeoFramework.Waypoint3D">
            <summary>
            Represents a geographic coordinate which is associated with a specific pixel coordinate.
            </summary>
            <remarks>
            Georeferenced points are geographic coordinates which are associated with
            a specific pixel.  These coordinates are typically used to derive formulas for
            converting geographic coordinates to and from pixel coordinates.  For example,
            a bitmap image of Florida would use georeferenced points to calculate the scale
            of the bitmap relative to the real world.
            </remarks>
        </member>
        <member name="M:GeoFramework.Waypoint3D.#ctor(GeoFramework.Latitude,GeoFramework.Longitude,GeoFramework.Distance)">
            <overloads>Creates a new instance.</overloads>
        </member>
        <member name="M:GeoFramework.Waypoint3D.#ctor(GeoFramework.Latitude,GeoFramework.Longitude,GeoFramework.Datum,GeoFramework.Distance)">
            <summary>
            Creates a new instance using the specified latitude, longitude and
            Datum.
            </summary>
            <remarks>
            This constructor is commonly used when a new position must be created using an
            Datum other than the default of WGS1984.
            </remarks>
            <param name="latitude">An angle from the equator between -90° and +90°.</param>
            <param name="longitude">An angle from the Prime Meridian between -90° and +90°.</param>
            <param name="datum">An Datum to associate with the given latitude and 
            longitude.</param>
        </member>
        <member name="M:GeoFramework.Waypoint3D.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance by parsing latitude and longitude from a single string.
            </summary>
            <param name="value">A <strong>String</strong> containing both a latitude and longitude to parse.</param>
        </member>
    </members>
</doc>
